<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Smiecj的小窝</title>
  <icon>https://www.gravatar.com/avatar/8b59dee7e59ad63ca309edd9effc2618</icon>
  <subtitle>tech make life better</subtitle>
  <link href="http://smiecj.github.io/atom.xml" rel="self"/>
  
  <link href="http://smiecj.github.io/"/>
  <updated>2024-11-09T16:00:00.000Z</updated>
  <id>http://smiecj.github.io/</id>
  
  <author>
    <name>smiecj</name>
    <email>xxx@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>flink cdc 3.0 &quot;尝鲜&quot;</title>
    <link href="http://smiecj.github.io/2024/06/19/flink-cdc-3.0/"/>
    <id>http://smiecj.github.io/2024/06/19/flink-cdc-3.0/</id>
    <published>2024-06-18T16:00:00.000Z</published>
    <updated>2024-11-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在大数据实时同步的场景中，一个常见场景是从 mysql OLTP 数据库同步到 doris OLAP 数据库，前者属于业务系统通常情况下使用的数据库，后者提供给业务的同事进行高并发、大批量的数据计算和分析</p><p>今年年初时，我们这里的部署方案还是 flink cdc 2.4 + flink sql，任务在 yarn 上运行，架构如下:</p><p><img src="/2024/06/19/flink-cdc-3.0/flink-cdc-2.4.png" alt="flink cdc 2.4 structure"></p><p>这个架构在需要同步的表不多的情况下，维护起来不算麻烦，不过也有两个实践中很关键的问题: 通过 SQL 提交后每张表都会单独拉取 binlog，造成资源浪费，以及频繁拉取造成 MySQL 压力较大；其次是不支持表结构同步，比如 mysql 新增了字段，虽然不会直接导致同步任务报错（修改字段类型除外），但是一旦业务说需要用到这个字段，那我就需要在 flink sql 中加上这个字段，下游的 doris 手动执行 alter 去添加字段，再把 flink 任务重启，这些操作，比创建一个新的任务还要麻烦</p><p>于是在看到 flink 3.0 对 schema evolution 和批量表同步支持之后，我也是第一时间去尝鲜，根据官方文档: <a href="https://nightlies.apache.org/flink/flink-cdc-docs-release-3.2/zh/docs/get-started/quickstart/mysql-to-doris">Streaming ELT 同步 MySQL 到 Doris</a>，在本地运行了整套 mysql 、 doris 、 flink 以及 flink cdc 任务。本文总结了整套服务部署过程，也提示一些遇到的小坑，希望助大家丝滑体验 flink cdc</p><p>flink cdc 3.0 之后的任务架构如下:<br><img src="/2024/06/19/flink-cdc-3.0/flink-cdc-3.0.png" alt="flink cdc 3.0 structure"></p><!--[Introduction](https://nightlies.apache.org/flink/flink-cdc-docs-release-3.2/zh/docs/deployment/standalone)--><h2 id="flink-cdc-功能速览"><a href="#flink-cdc-功能速览" class="headerlink" title="flink cdc 功能速览"></a>flink cdc 功能速览</h2><p><a href="https://github.com/apache/flink-cdc">flink cdc</a> 是一个支持实时同步的数据流框架，相比其他第三方实现的实时同步框架，如 seatunnel、chunjun 等，它的优势在于 flink 社区原生支持，版本迭代和新功能发布更快，不足点在于缺少任务管理功能，需要自己做好任务监控和自动恢复机制</p><p>3.0 架构:<br><img src="/2024/06/19/flink-cdc-3.0/flink-cdc-3.0-structure.png" alt="flink cdc 3.0 structure"></p><p><a href="https://medium.com/@ipolyzos_/a-glimpse-into-flink-cdc-3-0-a985fb5895a5">图片来源-A Glimpse into Flink CDC 3.0</a></p><p>3.0 之后 cdc 整体的架构就很清晰了，架构中几个比较重要的概念如下：</p><p>CDC Client: 新的用于提交任务的客户端封装</p><p>Data Pipeline: 整个 flink cdc 数据流称为 pipeline，内部包括必须配置的 Data Source 和 Data Sink，以及可选的 router</p><p>Pipeline Connector: 支持 schema evolution 的数据源，目前有 mysql ( <a href="https://github.com/debezium/debezium">debezium</a> ) 、 paimon ( <a href="https://github.com/apache/paimon/tree/master/paimon-flink">paimon flink conector</a> ) 、 kafka ( <a href="https://github.com/apache/flink-connector-kafka">kafka flink connector</a> ) 、doris ( <a href="https://github.com/apache/doris-flink-connector">doris flink connector</a> ) 、 starrocks ( <a href="https://github.com/StarRocks/starrocks-connector-for-apache-flink">starrocks flink connector</a> ) 和 elasticsearch ( <a href="https://github.com/apache/flink-connector-elasticsearch">elasticsearch flink connector</a> )</p><p>Source Connector: 包括 pipeline connector 以及其他暂不支持 pipeline 的其他数据源，如 pgsql (debezium) 和 tidb ( <a href="https://github.com/tikv/client-java">tikv client java</a> ) 等，可直接引用或通过 flink sql 使用</p><p>Data Source: 数据读取端封装</p><p>Data Sink: 数据写入端封装</p><p>Table ID: 标识同步数据源时需要指定的表标识，如 mysql 就是表名，kafka 就是 topic</p><p>Transform: 通过 SQL 或者 UDF 注入字段转换的特殊逻辑</p><p>Route: 路由，支持设置不同表名映射、多表对单表映射等</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>需要部署的 mysql, doris 和 flink 都可以单点模式运行，因此接下来的所有部署操作都在一个 centos8 容器内执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 3306: mysql</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 9030: doris fe</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 8081: flink web</span></span><br><span class="line">docker run -it -p 3306:3306 -p 9030:9030 -p 8081:8081 -d --name test_flink centos8</span><br></pre></td></tr></table></figure><h3 id="flink-local-singleton"><a href="#flink-local-singleton" class="headerlink" title="flink local singleton"></a>flink local singleton</h3><p>flink 选择 1.18 版本, 本地启动 jobmanager 和 taskmanager</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载安装包</span></span><br><span class="line">wget https://dlcdn.apache.org/flink/flink-1.18.1/flink-1.18.1-bin-scala_2.12.tgz</span><br><span class="line">tar -xvf flink-1.18.1-bin-scala_2.12.tgz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置默认配置</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> web ui port</span></span><br><span class="line">rest.port: 24001</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> web ui <span class="built_in">bind</span> address</span></span><br><span class="line">rest.bind-address: 0.0.0.0</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 其他和内存相关的配置，在生产环境需要考虑扩容的: taskmanager.memory.process.size、jobmanager.memory.process.size 等</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动 jobmanager 和 taskmanager</span></span><br><span class="line"></span><br><span class="line">bash /opt/modules/flink/bin/jobmanager.sh start</span><br><span class="line">bash /opt/modules/flink/bin/taskmanager.sh start</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行 wordcount example</span></span><br><span class="line">/opt/modules/flink/bin/flink run /opt/modules/flink/examples/batch/WordCount.jar</span><br></pre></td></tr></table></figure><h3 id="flink-cdc-3-0"><a href="#flink-cdc-3-0" class="headerlink" title="flink cdc 3.0"></a>flink cdc 3.0</h3><!--3.0 版本后，cdc 可以直接通过，相比之前需要通过类似 starrocks smt 的工具生成 flink sql 任务的方式要方便很多尤其是使用具备 pipeline 能力的数据源，支持在一个任务中配置多个数据库表，配置起来更加方便--><p>3.0 之后的 flink cdc 可以直接通过它自己封装的 Client 提交任务了，因此除了和 2.4 同样的要下载数据源对应的 jar 包外，还需用到官方提供的客户端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 从 release 中下载并安装 flink cdc</span></span><br><span class="line">wget https://dlcdn.apache.org/flink/flink-cdc-3.1.1/flink-cdc-3.1.1-bin.tar.gz</span><br><span class="line">tar -xzvf flink-cdc-3.1.1-bin.tar.gz</span><br><span class="line">mv flink-cdc-3.1.1 flink-cdc</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意: lib 下面只有 cdc 本身的依赖，数据库相关的依赖包需要自行下载</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行创建 flink jdbc connector 的任务需要以下依赖</span></span><br><span class="line">wget https://repo1.maven.org/maven2/mysql/mysql-connector-java/8.0.30/mysql-connector-java-8.0.30.jar -O lib/mysql-connector-java-8.0.30.jar</span><br><span class="line"></span><br><span class="line">wget https://repo1.maven.org/maven2/org/apache/flink/flink-connector-jdbc/3.1.2-1.18/flink-connector-jdbc-3.1.2-1.18.jar -O lib/flink-connector-jdbc-3.1.2-1.18.jar</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行从 mysql 同步到 doris 的 CDC 任务还需要以下依赖</span></span><br><span class="line">wget https://repo.maven.apache.org/maven2/org/apache/flink/flink-cdc-pipeline-connector-mysql/3.1.1/flink-cdc-pipeline-connector-mysql-3.1.1.jar -O lib/flink-cdc-pipeline-connector-mysql-3.1.1.jar</span><br><span class="line"></span><br><span class="line">wget https://repo.maven.apache.org/maven2/org/apache/flink/flink-cdc-pipeline-connector-doris/3.1.1/flink-cdc-pipeline-connector-doris-3.1.1.jar -O lib/flink-cdc-pipeline-connector-doris-3.1.1.jar</span><br></pre></td></tr></table></figure><ul><li>注意: flink cdc 的版本要和 connector 的版本对应，否则可能会在提交任务时报 Cannot find factory with identifier “mysql” in the classpath</li></ul><!-- 编译: mvn clean package -DskipTests -Dspotless.apply.skip --><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><p>这里我们部署 8.0.39 版本，作为数据源</p><blockquote><p>注: 一开始部署 8.4.3 最新版本 mysql ，发现读取 binlog 信息的 SHOW MASTER STATUS 竟然执行不了，替换成了 SHOW BINARY LOG STATUS ，而 flink cdc 还没有做适配，因此只能把 mysql 回退重装了。看来什么都用社区最新版还是有一些踩坑的风险的😂</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 从官网下载安装包，注意下载适配系统架构的版本</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> https://dev.mysql.com/downloads/mysql</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意: 系统若已有 mariadb 相关的安装包，安装会报冲突，需要先卸载 mariadb 相关包</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载 arm 的 mysql 官方安装包</span></span><br><span class="line"></span><br><span class="line">wget https://dev.mysql.com/get/Downloads/MySQL-8.4/mysql-community-common-8.0.39-1.el8.aarch64.rpm</span><br><span class="line">wget https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-community-client-plugins-8.0.39-1.el8.aarch64.rpm</span><br><span class="line">wget https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-community-libs-8.0.39-1.el8.aarch64.rpm</span><br><span class="line">wget https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-community-client-8.0.39-1.el8.aarch64.rpm</span><br><span class="line">wget https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-community-icu-data-files-8.0.39-1.el8.aarch64.rpm</span><br><span class="line">wget https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-community-server-8.0.39-1.el8.aarch64.rpm</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> x86</span></span><br><span class="line">wget https://dev.mysql.com/get/Downloads/MySQL-8.4/mysql-community-common-8.0.39-1.el8.x86_64.rpm</span><br><span class="line">wget https://dev.mysql.com/get/Downloads/MySQL-8.4/mysql-community-client-plugins-8.0.39-1.el8.x86_64.rpm</span><br><span class="line">wget https://dev.mysql.com/get/Downloads/MySQL-8.4/mysql-community-libs-8.0.39-1.el8.x86_64.rpm</span><br><span class="line">wget https://dev.mysql.com/get/Downloads/MySQL-8.4/mysql-community-client-8.0.39-1.el8.x86_64.rpm</span><br><span class="line">wget https://dev.mysql.com/get/Downloads/MySQL-8.4/mysql-community-icu-data-files-8.0.39-1.el8.x86_64.rpm</span><br><span class="line">wget https://dev.mysql.com/get/Downloads/MySQL-8.4/mysql-community-server-8.0.39-1.el8.x86_64.rpm</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">rpm -ivh mysql-community-common-8.0.39-1.el8.aarch64.rpm</span><br><span class="line">rpm -ivh mysql-community-client-plugins-8.0.39-1.el8.aarch64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-8.0.39-1.el8.aarch64.rpm</span><br><span class="line">rpm -ivh mysql-community-client-8.0.39-1.el8.aarch64.rpm</span><br><span class="line">rpm -ivh mysql-community-icu-data-files-8.0.39-1.el8.aarch64.rpm</span><br><span class="line">rpm -ivh mysql-community-server-8.0.39-1.el8.aarch64.rpm</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始化、首次启动 mysql</span></span><br><span class="line">mysqld --initialize</span><br><span class="line">mysqld --user=root</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从 /var/<span class="built_in">log</span>/mysqld.log 中获得 mysql 初始密码</span></span><br><span class="line">cat /var/log/mysqld.log | grep &quot;A temporary password&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从另一个窗口登录 mysql</span></span><br><span class="line">mysql -h127.0.0.1 -P3306 -uroot -p&#123;mysql初始密码&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改 root 密码</span></span><br><span class="line">SET PASSWORD = &#x27;&#123;mysql密码&#125;&#x27;;</span><br></pre></td></tr></table></figure><h3 id="doris"><a href="#doris" class="headerlink" title="doris"></a>doris</h3><p><a href="https://doris.apache.org/docs/dev/gettingStarted/what-is-apache-doris">doris</a> 是一个具备高性能实时计算和查询性能的OLAP数据库，经常用于从业务数据库实时同步数据后，进行海量数据分析、高并发即席查询、日志分析、用户画像分析等。在企业内最常用的场景是制作各种业务报表，提供给数据分析师和管理者。相关技术主要有存储模型、物化视图、向量化引擎、CBO优化等</p><p>doris 的基本组件为 fe 和 be，fe 负责管理集群，接收和处理用户请求，分析并得到SQL执行计划，be 负责数据存储和SQL的具体计算逻辑执行</p><p><img src="/2024/06/19/flink-cdc-3.0/doris-01.png" alt="doris structure"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> doris 3.0 版本需要用 jdk 17</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> adoptium 版本的开源 openjdk 可以从这里下载</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> https://github.com/adoptium/temurin17-binaries/releases</span></span><br><span class="line"></span><br><span class="line">wget https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.9%2B9/OpenJDK17U-jdk_aarch64_linux_hotspot_17.0.9_9.tar.gz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置环境变量</span></span><br><span class="line">export JAVA_HOME=/opt/modules/java/jdk-17.0.9+9</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载 doris</span></span><br><span class="line">wget https://apache-doris-releases.oss-accelerate.aliyuncs.com/apache-doris-3.0.2-bin-arm64.tar.gz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> fe: http_port: frontend 界面地址，默认 9030</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> fe: meta_dir: frontend 元数据存储路径</span></span><br><span class="line">vim /opt/modules/doris/fe/conf/fe.conf</span><br><span class="line"></span><br><span class="line">meta_dir = /opt/modules/doris/fe/meta</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> be: storage_root_path: 存储路径</span></span><br><span class="line">vim /opt/modules/doris/be/conf/be.conf</span><br><span class="line">storage_root_path = /opt/modules/doris/be/data</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动 fe</span></span><br><span class="line">mkdir -p /opt/modules/doris/fe/meta</span><br><span class="line">/opt/modules/doris/fe/bin/start_fe.sh --daemon</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看启动日志</span></span><br><span class="line">tail -f /opt/modules/doris/fe/log/fe.log</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动 be</span></span><br><span class="line">mkdir -p /opt/modules/doris/be/data</span><br><span class="line">/opt/modules/doris/be/bin/start_be.sh --daemon</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看启动日志</span></span><br><span class="line">tail -f /opt/modules/doris/be/log/be.INFO</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动后，首次登录 fe 不需要密码，设置 root 密码并添加 be</span></span><br><span class="line">mysql -h127.0.0.1 -P9030 -uroot</span><br><span class="line"></span><br><span class="line">SET PASSWORD FOR &#x27;root&#x27; = PASSWORD(&#x27;&#123;Doris密码&#125;&#x27;);</span><br><span class="line"></span><br><span class="line">ALTER SYSTEM ADD BACKEND &quot;localhost:9050&quot;;</span><br></pre></td></tr></table></figure><blockquote><p>注: 容器内启动可能会遇到报错 Please set vm.max_map_count to be 2000000 under root using ‘sysctl -w vm.max_map_count=2000000’ ，为了测试可以先注释掉这段判断逻辑，在 /opt/modules/doris/be/bin/start_be.sh 中</p></blockquote><h2 id="任务配置与运行"><a href="#任务配置与运行" class="headerlink" title="任务配置与运行"></a>任务配置与运行</h2><p>前面的环境安装都是为了这里的任务运行做铺垫</p><h3 id="mysql-模拟表"><a href="#mysql-模拟表" class="headerlink" title="mysql 模拟表"></a>mysql 模拟表</h3><p>在 mysql 创建一张“业务”表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 专辑</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `d_music`.`album` (</span><br><span class="line">  `id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `album_artist` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `<span class="keyword">year</span>` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  `song_count` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span></span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure><h3 id="通过-dagagen-实时向-mysql-写入数据"><a href="#通过-dagagen-实时向-mysql-写入数据" class="headerlink" title="通过 dagagen 实时向 mysql 写入数据"></a>通过 dagagen 实时向 mysql 写入数据</h3><p><a href="https://nightlies.apache.org/flink/flink-docs-master/docs/dev/python/table/python_table_api_connectors">flink connector</a> 数据源有各种连接器，其中 <a href="https://nightlies.apache.org/flink/flink-docs-master/docs/connectors/table/datagen">datagen</a> 是可以随机生成数据的 connector</p><p>针对刚才 mysql 创建的测试表，我们创建一个定时写入数据的任务:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- /opt/modules/flink/album.sql</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> TEMPORARY <span class="keyword">TABLE</span> album_datagen (</span><br><span class="line">    id STRING,</span><br><span class="line">    name STRING,</span><br><span class="line">    album_artist STRING,</span><br><span class="line">    `<span class="keyword">year</span>` <span class="type">INT</span>,</span><br><span class="line">    song_count <span class="type">INT</span></span><br><span class="line">) <span class="keyword">WITH</span> (</span><br><span class="line">    <span class="string">&#x27;connector&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;datagen&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;rows-per-second&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> album_mysql (</span><br><span class="line">    id STRING,</span><br><span class="line">    name STRING,</span><br><span class="line">    album_artist STRING,</span><br><span class="line">    `<span class="keyword">year</span>` <span class="type">INT</span>,</span><br><span class="line">    song_count <span class="type">INT</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (id) <span class="keyword">NOT</span> ENFORCED</span><br><span class="line">) <span class="keyword">WITH</span> (</span><br><span class="line">   <span class="string">&#x27;connector&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;jdbc&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;url&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;jdbc:mysql://localhost:3306/d_music&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;username&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;password&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;&#123;mysql密码&#125;&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;table-name&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;album&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `album_mysql` <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> album_datagen;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注: 这里 flink sql 的表没有设置 create_time 字段，为了让其能使用 mysql 表的默认值</p></blockquote><blockquote><p>注: rows-per-second 配置为datagen每秒产生的数据量，默认为1w</p></blockquote><p>提交 flink sql:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/modules/flink/bin/sql-client.sh -f /opt/modules/flink/album.sql</span><br></pre></td></tr></table></figure><p>提交后可以在 flink 界面看到 datagen 任务正常运行，并在 mysql 中查询到每秒写入的随机数据</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -hlocalhost -P3306 -uroot -p<span class="string">&#x27;&#123;mysql密码&#125;&#x27;</span> -e <span class="string">&quot;select * from d_music.artist order by create_time desc limit 10&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/2024/06/19/flink-cdc-3.0/flink-datagen-01.png" alt="flink datagen job"></p><p><img src="/2024/06/19/flink-cdc-3.0/flink-datagen-02.png" alt="flink datagen data"></p><h3 id="flink-cdc-任务配置与提交"><a href="#flink-cdc-任务配置与提交" class="headerlink" title="flink cdc 任务配置与提交"></a>flink cdc 任务配置与提交</h3><p>按照官方教程，修改 mysql 地址和 doris 地址、需要同步的库表即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /opt/modules/flink-cdc/album.yaml</span></span><br><span class="line"><span class="attr">source:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3306</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">password:</span> &#123;<span class="string">mysql密码</span>&#125;</span><br><span class="line">  <span class="attr">tables:</span> <span class="string">d_music.album</span></span><br><span class="line">  <span class="attr">scan.incremental.snapshot.chunk.size:</span> <span class="number">1000</span></span><br><span class="line">  <span class="attr">scan.snapshot.fetch.size:</span> <span class="number">1000</span></span><br><span class="line">  <span class="attr">scan.startup.mode:</span> <span class="string">initial</span></span><br><span class="line">  <span class="attr">server-time-zone:</span> <span class="string">UTC+8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sink:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">doris</span></span><br><span class="line">  <span class="attr">fenodes:</span> <span class="string">localhost:8030</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">password:</span> &#123;<span class="string">doris密码</span>&#125;</span><br><span class="line">  <span class="attr">table.create.properties.light_schema_change:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">table.create.properties.replication_num:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pipeline:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">sr_cdc_sink_doris_example</span></span><br><span class="line">  <span class="attr">parallelism:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>注: 若任务运行的本地时区和 mysql 服务器时区不一致，server-time-zone 需要指定为本地时区</p></blockquote><blockquote><p>注: fenodes 对应 doris fe 的 http_port</p></blockquote><blockquote><p>注: scan.startup.mode: 类似 canal 的同步模式配置，initial 表示从头同步所有数据，还支持从指定时间戳同步</p></blockquote><p>然后我们提交这个任务, 正常等待个几秒，在 doris 就能查到从 mysql 同步过来的数据了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 注意需要显式声明 FLINK_HOME 即 flink 安装路径，在 flink-cdc.sh 脚本中用到</span></span><br><span class="line">export FLINK_HOME=/opt/modules/flink</span><br><span class="line"></span><br><span class="line">/opt/modules/flink-cdc/bin/flink-cdc.sh /opt/modules/flink-cdc/album.yaml</span><br></pre></td></tr></table></figure><p><img src="/2024/06/19/flink-cdc-3.0/flink-cdc-job-01.png" alt="flink cdc job"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询 doris 最近写入的数据</span></span><br><span class="line">mysql <span class="operator">-</span>h127<span class="number">.0</span><span class="number">.0</span><span class="number">.1</span> <span class="operator">-</span>P9030 <span class="operator">-</span>uroot <span class="operator">-</span>p&#123;Doris密码&#125; <span class="operator">-</span>e &quot;select * from d_music.album order by create_time desc limit 10&quot;</span><br></pre></td></tr></table></figure><p><img src="/2024/06/19/flink-cdc-3.0/flink-cdc-job-02.png" alt="flink cdc job"></p><p>我们还能发现，Doris 这边是不需要提前建表的，flink cdc 已经帮我们建好了一张主键表，其中副本数之类的基本配置根据cdc 任务中的 table.create.properties.replication_num 来设置</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> d_music.album;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `album` (</span><br><span class="line">  `id` <span class="type">varchar</span>(<span class="number">765</span>) <span class="keyword">NULL</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">765</span>) <span class="keyword">NULL</span>,</span><br><span class="line">  `album_artist` <span class="type">varchar</span>(<span class="number">765</span>) <span class="keyword">NULL</span>,</span><br><span class="line">  `<span class="keyword">year</span>` <span class="type">int</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `song_count` <span class="type">int</span> <span class="keyword">NULL</span></span><br><span class="line">) ENGINE<span class="operator">=</span>OLAP</span><br><span class="line"><span class="keyword">UNIQUE</span> KEY(`id`)</span><br><span class="line">DISTRIBUTED <span class="keyword">BY</span> HASH(`id`) BUCKETS AUTO</span><br><span class="line">PROPERTIES (</span><br><span class="line">&quot;replication_allocation&quot; <span class="operator">=</span> &quot;tag.location.default: 1&quot;,</span><br><span class="line">&quot;min_load_replica_num&quot; <span class="operator">=</span> &quot;-1&quot;,</span><br><span class="line">&quot;is_being_synced&quot; <span class="operator">=</span> &quot;false&quot;,</span><br><span class="line">&quot;storage_medium&quot; <span class="operator">=</span> &quot;hdd&quot;,</span><br><span class="line">&quot;storage_format&quot; <span class="operator">=</span> &quot;V2&quot;,</span><br><span class="line">&quot;inverted_index_storage_format&quot; <span class="operator">=</span> &quot;V2&quot;,</span><br><span class="line">&quot;enable_unique_key_merge_on_write&quot; <span class="operator">=</span> &quot;true&quot;,</span><br><span class="line">&quot;light_schema_change&quot; <span class="operator">=</span> &quot;true&quot;,</span><br><span class="line">&quot;disable_auto_compaction&quot; <span class="operator">=</span> &quot;false&quot;,</span><br><span class="line">&quot;enable_single_replica_compaction&quot; <span class="operator">=</span> &quot;false&quot;,</span><br><span class="line">&quot;group_commit_interval_ms&quot; <span class="operator">=</span> &quot;10000&quot;,</span><br><span class="line">&quot;group_commit_data_bytes&quot; <span class="operator">=</span> &quot;134217728&quot;,</span><br><span class="line">&quot;enable_mow_light_delete&quot; <span class="operator">=</span> &quot;false&quot;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>当然，除了主键模型，doris 还支持聚合模型(Aggregate)和明细模型(Duplicate)表，参考 <a href="https://doris.apache.org/docs/dev/table-design/data-model/overview">data models</a>。但是 flink cdc 对于同步源表中主键的表，会默认创建主键模型表。因此有创建其他模型表的话就需要提前建了</p><p>关于 flink cdc 实现提前建表和 schema evolution 的实现可以参考对各个数据源的 MetadataApplier 实现，如 <a href="https://github.com/apache/flink-cdc/blob/master/flink-cdc-connect/flink-cdc-pipeline-connectors/flink-cdc-pipeline-connector-doris/src/main/java/org/apache/flink/cdc/connectors/doris/sink/DorisMetadataApplier.java">DorisMetadataApplier</a></p><h3 id="schema-evolution"><a href="#schema-evolution" class="headerlink" title="schema evolution"></a>schema evolution</h3><p>铺垫了这么久，终于来到了测试表结构变更同步的环节</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加字段</span></span><br><span class="line">mysql -hlocalhost -P3306 -uroot -p&#x27;&#123;mysql密码&#125;&#x27; -e &quot;ALTER TABLE d_music.album ADD COLUMN duration DOUBLE AFTER song_count&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改后确认 doris 表结构是否更新</span></span><br><span class="line">mysql -h127.0.0.1 -P9030 -uroot -p&#123;doris密码&#125; -e &quot;show create table d_music.album&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改 mysql 字段名称</span></span><br><span class="line">mysql -hlocalhost -P3306 -uroot -p&#x27;&#123;mysql密码&#125;&#x27; -e &quot;ALTER TABLE d_music.album RENAME COLUMN duration TO duration_total&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除 mysql 字段</span></span><br><span class="line">mysql -hlocalhost -P3306 -uroot -p&#x27;&#123;mysql密码&#125;&#x27; -e &quot;ALTER TABLE d_music.album DROP COLUMN duration_total&quot;</span><br></pre></td></tr></table></figure><p>从 flink taskmanager 日志中我们可以看到表结构变更时，会触发 SchemaChangeEvent 事件，后续的其他数据写入或变更操作都必须等待当前的 schema change 完成后才会继续进行，以保证数据一致性</p><p><img src="/2024/06/19/flink-cdc-3.0/flink-cdc-job-03.png" alt="flink taskmanager log"></p><blockquote><p>注: 表字段类型变更的同步在 <a href="https://github.com/apache/flink-cdc/blob/release-3.2.0/flink-cdc-connect/flink-cdc-pipeline-connectors/flink-cdc-pipeline-connector-doris/src/main/java/org/apache/flink/cdc/connectors/doris/sink/DorisMetadataApplier.java#L112">3.2.0</a> 版本之后才支持，本文所用的 3.1 不支持</p></blockquote><blockquote><p>注: 不同数据源对字段变更的适配完善程度有所不同，如 Doris 在 cdc 最新版支持字段类型变更，但 <a href="https://github.com/apache/flink-cdc/blob/release-3.2/flink-cdc-connect/flink-cdc-pipeline-connectors/flink-cdc-pipeline-connector-starrocks/src/main/java/org/apache/flink/cdc/connectors/starrocks/sink/StarRocksMetadataApplier.java#L292-L301">Starrocks</a> 还不支持</p></blockquote><h3 id="整库同步"><a href="#整库同步" class="headerlink" title="整库同步"></a>整库同步</h3><p>我们在 mysql 中再创建两张表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> d_music.artist</span><br><span class="line">(</span><br><span class="line">    `id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `create_time` datetime <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">    `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    `album_count` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> d_music.playlist</span><br><span class="line">(</span><br><span class="line">    `id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `create_time` datetime <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">    `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    `comment` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    `song_count` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure><p>对应的，我们在 flink 也再提交这两张新表的 datagen</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> TEMPORARY <span class="keyword">TABLE</span> artist_datagen (</span><br><span class="line">    id STRING,</span><br><span class="line">    name STRING,</span><br><span class="line">    album_count <span class="type">INT</span></span><br><span class="line">) <span class="keyword">WITH</span> (</span><br><span class="line">    <span class="string">&#x27;connector&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;datagen&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;rows-per-second&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> TEMPORARY <span class="keyword">TABLE</span> playlist_datagen (</span><br><span class="line">    id STRING,</span><br><span class="line">    name STRING,</span><br><span class="line">    `comment` STRING,</span><br><span class="line">    song_count <span class="type">INT</span></span><br><span class="line">) <span class="keyword">WITH</span> (</span><br><span class="line">    <span class="string">&#x27;connector&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;datagen&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;rows-per-second&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> artist_mysql (</span><br><span class="line">    id STRING,</span><br><span class="line">    name STRING,</span><br><span class="line">    album_count <span class="type">INT</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (id) <span class="keyword">NOT</span> ENFORCED</span><br><span class="line">) <span class="keyword">WITH</span> (</span><br><span class="line">   <span class="string">&#x27;connector&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;jdbc&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;url&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;jdbc:mysql://localhost:3306/d_music&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;username&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;password&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;&#123;mysql密码&#125;&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;table-name&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;artist&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> playlist_mysql (</span><br><span class="line">    id STRING,</span><br><span class="line">    name STRING,</span><br><span class="line">    `comment` STRING,</span><br><span class="line">    song_count <span class="type">INT</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (id) <span class="keyword">NOT</span> ENFORCED</span><br><span class="line">) <span class="keyword">WITH</span> (</span><br><span class="line">   <span class="string">&#x27;connector&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;jdbc&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;url&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;jdbc:mysql://localhost:3306/d_music&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;username&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;password&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;&#123;mysql密码&#125;&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;table-name&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;playlist&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `artist_mysql` <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> artist_datagen;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `playlist_mysql` <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> playlist_datagen;</span><br></pre></td></tr></table></figure><p>最后我们再提交同步这三张表 flink cdc ，相比刚才同步一张表的配置只需要修改 tables，按照正则表达式配置即可。从 <a href="https://github.com/apache/flink-cdc/blob/master/flink-cdc-connect/flink-cdc-pipeline-connectors/flink-cdc-pipeline-connector-mysql/src/main/java/org/apache/flink/cdc/connectors/mysql/factory/MySqlDataSourceFactory.java">MySqlDataSourceFactory</a> 可以找到对 tables 配置的解析逻辑</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /opt/modules/flink-cdc/album.yaml</span></span><br><span class="line">  <span class="attr">tables:</span> <span class="string">d_music.\.*</span></span><br></pre></td></tr></table></figure><p>提交所有任务后，flink 上将会有四个任务，三个 datagen 对应三张表，而 flink cdc 对应的所有表都在一个任务中同步</p><p><img src="/2024/06/19/flink-cdc-3.0/flink-cdc-job-04.png" alt="flink cdc all job"></p><p>另外，我们还可以注意 mysql 的连接数: 和 2.4 版本对比，这次一整个任务只需要一个连接，其读取 binlog 会自动解析给对应表的同步，而不需要每张表都创建一个连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看 mysql 读取 binlog 相关的连接数</span></span><br><span class="line">mysql <span class="operator">-</span>hlocalhost <span class="operator">-</span>P3306 <span class="operator">-</span>uroot <span class="operator">-</span>p<span class="string">&#x27;&#123;mysql密码&#125;&#x27;</span> <span class="operator">-</span>e &quot;show processlist&quot; <span class="operator">|</span> grep &quot;Binlog Dump&quot;</span><br></pre></td></tr></table></figure><p>但注意: 有哪些表需要同步，是任务在创建的时候就解析的，后续源库再添加表，不会让现有的任务把这个新表也加入同步</p><!--### 扩展: 同步 tidb[使用最新版flink tidb cdc 同步数据到StarRocks](https://blog.csdn.net/gongxiucheng/article/details/124281253)截止目前 tidb 还不支持 pipeline 连接器 - [mysql](https://nightlies.apache.org/flink/flink-cdc-docs-release-3.1/zh/docs/connectors/pipeline-connectors/mysql)--><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>3.0 之后的 cdc 在功能上更加成熟，不仅是架构更清楚，通过 yaml 配置 cdc 任务的方式也更简化，和 flink 本身更统一了</p><p>不过从整个过程也能看到，在生产环境面对大量业务表需要同步的时候，先不说任务怎么做好监控，本身任务要做到高可用就必须把 checkpoint 打开，另外，不是所有 mysql 的表结构变更都能成功同步到下游，面对无法同步的特殊情况，还需要手动设置指定同步时间点恢复任务，一些繁琐的维护过程还是无法避免</p><p>后续有机会再探索一下这些优化的思路吧</p>]]></content>
    
    
    <summary type="html">schema 自动同步和整库同步功能体验</summary>
    
    
    
    <category term="大数据" scheme="http://smiecj.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="大数据" scheme="http://smiecj.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    <category term="flink" scheme="http://smiecj.github.io/tags/flink/"/>
    
    <category term="doris" scheme="http://smiecj.github.io/tags/doris/"/>
    
  </entry>
  
  <entry>
    <title>azkaban-tools 项目介绍</title>
    <link href="http://smiecj.github.io/2024/04/25/azkaban-tools/"/>
    <id>http://smiecj.github.io/2024/04/25/azkaban-tools/</id>
    <published>2024-04-24T16:00:00.000Z</published>
    <updated>2024-05-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/smiecj/p/18328700">本文cnblog博客地址</a></p><h2 id="文章结构"><a href="#文章结构" class="headerlink" title="文章结构"></a>文章结构</h2><p>本文背景 -&gt; 项目背景 -&gt; azkaban 编译方式 -&gt; jq 基本使用方法 -&gt; 后记</p><h2 id="本文背景"><a href="#本文背景" class="headerlink" title="本文背景"></a>本文背景</h2><p>应一个用户的好心和好奇心，在最近<strong>水深火热的百忙之中</strong>抽时间写完了一个简短的项目介绍，项目代码不多，其实就是几个azkaban的批量操作脚本，但在大数据集群的“运维生涯”中，还是帮了自己不少忙的，也算是为了它做一个简单的回顾吧</p><h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p><a href="https://github.com/azkaban/azkaban">azkaban</a> 是一个大数据领域通用的任务管理服务，它的运行模式和其他任务管理服务类似，都是将任务下发到执行器，定期执行，它的优势主要在于可定义任务流，同个项目下不同任务可引用同个模板，大数据领域的任务正好比较具有复用性，因此在 azkaban 诞生的时代（<a href="https://github.com/azkaban/azkaban/releases/tag/2.6.1">第一个release</a>在2014年），它还是成为了当时比较流行的开源任务调度服务</p><p>azkaban 的操作方式比较容易上手，通过界面即可完成所有的操作，包括上传项目、执行项目中定义的job、查看job日志、给任务配置调度时间等，操作并不复杂。但如果需要批量做一些操作，在界面一个个点就不太方便了</p><p>之前没有做这个项目的时候，隔三差五用户就要来找我“能不能帮忙…”（具体对话参考下面），终于有一天没忍住，本项目就此诞生…</p><p>主要实现的批量操作场景如下：</p><h3 id="批量操作①-启动任务"><a href="#批量操作①-启动任务" class="headerlink" title="批量操作① 启动任务"></a>批量操作① 启动任务</h3><p>每年都会有个一两次的真实对话</p><!--<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用户: 昨晚集群是不是有点问题啊，有几个抽数任务跑失败了</span><br><span class="line">我: 啊，好像是有点问题...我看一下，要不一会我重新拉起一次吧</span><br><span class="line">用户: 但是失败的任务好像有点多啊，你要一个个拉起吗</span><br><span class="line">我: 我试试用脚本批量拉起吧...</span><br></pre></td></tr></table></figure><p>–&gt;</p><p><img src="/2024/04/25/azkaban-tools/10.png" alt="对话"></p><h3 id="批量操作②-启动任务"><a href="#批量操作②-启动任务" class="headerlink" title="批量操作② 启动任务"></a>批量操作② 启动任务</h3><p>azkaban 默认不允许同时执行同一个任务，因此如果任务在上个周期执行一直没结束，到下个周期也不会被触发</p><p>于是偶尔也会有以下的对话</p><!--<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用户: http://azkaban/executor 这几个任务跑了好几天了，还没结束</span><br><span class="line">我: 我看看</span><br><span class="line">我: 这几个任务计算量怎么这么大，跑了一天多了</span><br><span class="line">用户: 哦，好像是有个参数设置错了，你先帮我把这些任务都停一下吧</span><br></pre></td></tr></table></figure><p>–&gt;</p><p><img src="/2024/04/25/azkaban-tools/14.png" alt="对话"></p><h3 id="批量操作③-设置调度"><a href="#批量操作③-设置调度" class="headerlink" title="批量操作③ 设置调度"></a>批量操作③ 设置调度</h3><p>对离线抽数任务来说，有时业务会新增好几张表，并要求执行时间统一放在早上8点或是晚上8点这样的</p><!--<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用户: 大佬，帮忙加一下这几张表的调度，时间早上8点</span><br><span class="line">我: 好的</span><br></pre></td></tr></table></figure><p>–&gt;</p><p><img src="/2024/04/25/azkaban-tools/15.png" alt="对话"></p><h3 id="批量操作④-设置调度"><a href="#批量操作④-设置调度" class="headerlink" title="批量操作④ 设置调度"></a>批量操作④ 设置调度</h3><p>背景同上，调度周期如果要修改，比如从早上8点改成9点，需要先把原来的调度删除后再创建新的调度</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><h3 id="本地部署-azkaban"><a href="#本地部署-azkaban" class="headerlink" title="本地部署 azkaban"></a>本地部署 azkaban</h3><p>azkaban 提供两种部署模式: solo （单节点）和 webserver+executor集群模式，生产环境肯定是采用后者，本地测试可以通过 solo 模式快速部署</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第三方镜像</span></span><br><span class="line">docker run -d -p 8081:8081 --name azkaban-srv -e TZ=<span class="string">&#x27;Asia/Shanghai&#x27;</span> haxqer/azkaban</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载代码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/azkaban/azkaban</span><br><span class="line"><span class="comment"># 注意: 官方仓库久未维护，直接编译甚至会有报错，也可以拉取笔者 fork 后修复的仓库</span></span><br><span class="line"><span class="comment"># 修复 commit: https://github.com/smiecj/azkaban/commit/94dc6034ee522199db7a8b4f315cfa0779f37bf6</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/smiecj/azkaban -b b_3_90_extend</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">./gradlew build installDist</span><br><span class="line"></span><br><span class="line"><span class="comment"># solo模式启动</span></span><br><span class="line"><span class="built_in">cd</span> azkaban-solo-server/build/install/azkaban-solo-server</span><br><span class="line">./bin/start-solo.sh</span><br></pre></td></tr></table></figure><p>访问刚启动的 solo 服务器: <a href="http://localhost:8081/">http://localhost:8081</a> ，默认用户名密码都是 azkaban</p><p><img src="/2024/04/25/azkaban-tools/01.png" alt="首次登录，首页还没有项目"></p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>这里我们创建一个示例项目 examples, 并以 <a href="https://github.com/joeharris76/azkaban_examples">azkaban_examples</a> 作为项目代码，压缩成zip包后上传</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/joeharris76/azkaban_examples</span><br><span class="line">zip -r azkaban_examples.zip azkaban_examples</span><br></pre></td></tr></table></figure><p><img src="/2024/04/25/azkaban-tools/02.png" alt="上传任务压缩包后azkaban会解析出任务结构"></p><p>azkaban 项目下的任务结构一般是 flow-&gt;job-&gt;template，flow 是父任务，job 为子任务。flow 可以通过串行或并行定义一组job的关系，job 可以直接定义任务行为，也可以引用template，在template中定义具体行为</p><p>以笔者实际维护的离线抽数作为例子，就是一个比较标准的azkaban任务格式:<br><img src="/2024/04/25/azkaban-tools/18.png" alt="STG"></p><p>所有抽数任务都在每天早上7点执行，每个抽数任务都对应一张mysql表，具体指令都是通过sqoop指令将数据从mysql导入hive表，区别只是执行sqoop的参数（即库表名）。这种任务我们就可以在 template 中编写sqoop的执行逻辑，每个表的同步任务作为一个job，都引用定义了sqoop 操作的 template 即可</p><p>具体的任务定义示例:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># template/sqoop.job</span></span><br><span class="line"><span class="built_in">command</span>=sqoop import -Dmapreduce.job.user.classpath.first=<span class="literal">true</span> --connect jdbc:mysql://mysql_host:mysql_port/<span class="variable">$&#123;mysql_db&#125;</span> --username mysql_user --password mysql_pwd --table <span class="variable">$&#123;mysql_table&#125;</span> -m 1 --target-dir /import/stg/<span class="variable">$&#123;mysql_table&#125;</span> --as-avrodatafile</span><br><span class="line"></span><br><span class="line"><span class="comment"># stg/table1.job</span></span><br><span class="line">mysql_db=element</span><br><span class="line">mysql_table=orders</span><br><span class="line"></span><br><span class="line"><span class="built_in">command</span>=<span class="built_in">echo</span> <span class="string">&quot;import mysql table&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span>=flow</span><br><span class="line">flow.name=sqoop</span><br></pre></td></tr></table></figure><p>examples 项目结构也比较简单，basic_flow 和 workflow 是最上层的 flow，basic_flow 引用的8个job直接定义了执行echo的行为；workflow引用的4个job则都属于同一个template，同样都是echo操作，只是最后打印的内容不同</p><p><img src="/2024/04/25/azkaban-tools/16.png" alt="basic_flow任务结构"></p><p><img src="/2024/04/25/azkaban-tools/17.png" alt="workflow任务结构"></p><p>手动执行两个flow，可以看到它们的执行速度都非常快，因为到最后的子任务都只是执行 echo</p><p><img src="/2024/04/25/azkaban-tools/04.png" alt="执行basic_flow"></p><p><img src="/2024/04/25/azkaban-tools/03.png" alt="basic_flow执行结果"></p><p>为了方便接下来的测试，我们可以给basic_flow下的job添加sleep以增加执行时间</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每个job增加睡眠时间，序号越大睡眠时间越长</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..8&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;command.1=sleep <span class="variable">$&#123;i&#125;</span>&quot;</span> &gt;&gt; basic_flow/basic_step_<span class="variable">$&#123;i&#125;</span>.cmd.job</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="登录配置"><a href="#登录配置" class="headerlink" title="登录配置"></a>登录配置</h3><p>在正式使用 azkaban-tools 之前，我们需要先修改 env.sh 中和服务相关的配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># search_env_name: 查询操作的环境</span></span><br><span class="line">search_env_name=produce</span><br><span class="line"></span><br><span class="line"><span class="comment"># exec_env_name: 执行、修改等操作的环境</span></span><br><span class="line"><span class="comment"># 注: 一开始开发这个项目是为了将一个老集群部署的azkaban上的所有任务调度都迁移到新集群服务上。为防止误操作生产环境，区分了进行查询和执行操作时使用不同的环境</span></span><br><span class="line">exec_env_name=<span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## produce env 连接信息</span></span><br><span class="line">produce_azkaban_address=localhost:8081</span><br><span class="line">produce_azkaban_user=azkaban</span><br><span class="line">produce_azkaban_password=azkaban</span><br><span class="line"></span><br><span class="line"><span class="comment">## test env 连接信息</span></span><br><span class="line"><span class="comment">## 这里故意将测试环境地址配置成和生产环境不同（虽然都是本地地址），是为了接下来测试批量停止任务时，不会因为脚本中判断“执行环境地址和生产环境地址完全一致”而停止执行</span></span><br><span class="line">test_azkaban_address=127.0.0.1:8081</span><br><span class="line">test_azkaban_user=azkaban</span><br><span class="line">test_azkaban_password=azkaban</span><br></pre></td></tr></table></figure><h3 id="jq-工具"><a href="#jq-工具" class="headerlink" title="jq 工具"></a>jq 工具</h3><p>项目通过 <a href="https://github.com/jqlang/jq">jq</a> 工具来解析 azkaban 接口返回的json数据</p><p>jq 可以通过 yum/apt 安装，或者直接下载可执行文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64</span><br><span class="line">mv jq-linux64 /usr/<span class="built_in">local</span>/bin/jq</span><br><span class="line">chmod +x jq</span><br></pre></td></tr></table></figure><p>jq 作为命令行工具，解析json还是非常好用的，常用指令可以参考后面的章节</p><h3 id="批量启动任务"><a href="#批量启动任务" class="headerlink" title="批量启动任务"></a>批量启动任务</h3><p>如果需要把examples的两个flow都调度起来，可以这么配置:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需要执行的项目名</span></span><br><span class="line">execute_project_name=<span class="string">&quot;examples&quot;</span></span><br><span class="line"><span class="comment"># 禁止执行的任务名</span></span><br><span class="line">execute_block_flow_names=<span class="string">&quot;(^_template$)&quot;</span></span><br><span class="line"><span class="comment"># 允许执行的任务名</span></span><br><span class="line">execute_allow_flow_names=<span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>配置完成后直接执行 <code>make run</code>，即可同时拉起两个任务</p><p><img src="/2024/04/25/azkaban-tools/05.png" alt="两个flow被同时拉起"></p><h3 id="批量停止任务"><a href="#批量停止任务" class="headerlink" title="批量停止任务"></a>批量停止任务</h3><p>配置和启动任务一样，执行 <code>make kill</code>，即可把项目下所有<strong>执行中</strong>的任务停止</p><h3 id="批量创建调度"><a href="#批量创建调度" class="headerlink" title="批量创建调度"></a>批量创建调度</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 操作项目名</span></span><br><span class="line">target_project_name=<span class="string">&quot;examples&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要设置调度的白名单，不配置默认会设置项目下的所有任务</span></span><br><span class="line">flow_name_allowlist=<span class="string">&quot;(^workflow$|^basic_flow$)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置的调度周期，java cron 格式</span></span><br><span class="line">fix_schedule_cron=<span class="string">&quot;0 0 18 * * ?&quot;</span></span><br></pre></td></tr></table></figure><p>注: 已经配有调度的任务不会覆盖</p><p><img src="/2024/04/25/azkaban-tools/06.png" alt="设置调度后"></p><h3 id="批量删除调度"><a href="#批量删除调度" class="headerlink" title="批量删除调度"></a>批量删除调度</h3><p>配置和创建调度相同，执行 <code>make clean_cron</code>即可删除任务调度</p><h2 id="部分脚本逻辑"><a href="#部分脚本逻辑" class="headerlink" title="部分脚本逻辑"></a>部分脚本逻辑</h2><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登录方法需要返回azkaban地址和登录成功得到的session id 两个信息</span></span><br><span class="line"><span class="function"><span class="title">login</span></span>() &#123;</span><br><span class="line">    <span class="built_in">local</span> env_name=<span class="variable">$1</span></span><br><span class="line">    <span class="built_in">eval</span> $(get_azkaban_env_info_by_envname <span class="variable">$env_name</span>)</span><br><span class="line">    <span class="built_in">local</span> login_ret=`curl -X POST --data <span class="string">&quot;action=<span class="variable">$command_login</span>&amp;username=<span class="variable">$tmp_azkaban_user</span>&amp;password=<span class="variable">$tmp_azkaban_password</span>&quot;</span> http://<span class="variable">$tmp_azkaban_address</span> 2&gt;/dev/null`</span><br><span class="line">    <span class="built_in">local</span> tmp_session_id=`<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$login_ret</span>&quot;</span> | jq <span class="string">&#x27;.[&quot;session.id&quot;] // empty&#x27;</span> | tr -d <span class="string">&#x27;&quot;&#x27;</span>`</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;tmp_azkaban_address=<span class="variable">$tmp_azkaban_address</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;tmp_session_id=<span class="variable">$tmp_session_id</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># eval $(login $exec_env_name)</span></span><br><span class="line"><span class="comment"># session_id=$tmp_session_id</span></span><br><span class="line"><span class="comment"># azkaban_address=$tmp_azkaban_address</span></span><br></pre></td></tr></table></figure><p>shell脚本中返回多个值的方法<a href="https://stackoverflow.com/a/32030550">参考</a>，<a href="https://phoenixnap.com/kb/bash-eval">eval</a>: 将传入的字符串当成指令执行</p><h3 id="获取任务下的所有-flow"><a href="#获取任务下的所有-flow" class="headerlink" title="获取任务下的所有 flow"></a>获取任务下的所有 flow</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">get_project_flow</span></span>() &#123;</span><br><span class="line">    <span class="built_in">local</span> project_name=<span class="variable">$1</span></span><br><span class="line">    <span class="built_in">local</span> session_id=<span class="variable">$2</span></span><br><span class="line">    <span class="built_in">local</span> azkaban_address=<span class="variable">$3</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">local</span> get_project_ret=`curl <span class="string">&quot;http://<span class="variable">$azkaban_address</span>/manager?ajax=<span class="variable">$command_get_project_flows</span>&amp;project=<span class="variable">$project_name</span>&amp;session.id=<span class="variable">$session_id</span>&quot;</span> 2&gt;/dev/null`</span><br><span class="line"></span><br><span class="line">    <span class="built_in">local</span> tmp_project_id=`<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$get_project_ret</span>&quot;</span> | jq <span class="string">&#x27;.projectId // empty&#x27;</span>`</span><br><span class="line">    <span class="built_in">local</span> tmp_flow_count=`<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$get_project_ret</span>&quot;</span> | jq <span class="string">&#x27;.flows | length&#x27;</span>`</span><br><span class="line">    <span class="built_in">local</span> tmp_flow_name=`<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$get_project_ret</span>&quot;</span> | sed <span class="string">&quot;s/ //g&quot;</span> | jq -r <span class="string">&#x27;[.flows[].flowId] | join(&quot;,&quot;)&#x27;</span>`</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;project_id=<span class="variable">$tmp_project_id</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;flow_name_join_str=<span class="variable">$tmp_flow_name</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;flow_count=<span class="variable">$tmp_flow_count</span>&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="jq-基本用法"><a href="#jq-基本用法" class="headerlink" title="jq 基本用法"></a>jq 基本用法</h2><p>参考<a href="https://justcode.ikeepstudying.com/2018/02/shell%EF%BC%9A%E6%97%A0%E6%AF%94%E5%BC%BA%E5%A4%A7%E7%9A%84shell%E4%B9%8Bjson%E8%A7%A3%E6%9E%90%E5%B7%A5%E5%85%B7jq-linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%A7%A3%E6%9E%90json-jq%E8%A7%A3%E6%9E%90-json">这篇文档</a>和<a href="https://jqlang.github.io/jq/manual">官方文档</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取某个key-value</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&#123;&quot;hello&quot;: &quot;world&quot;&#125;&#x27;</span> | jq <span class="string">&#x27;.hello&#x27;</span> <span class="comment"># world</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数组</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&#123;&quot;arr&quot;: [1,2,3]&#125;&#x27;</span> | jq <span class="string">&#x27;.arr&#x27;</span> <span class="comment"># [1,2,3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组所有元素用逗号组合</span></span><br><span class="line"><span class="comment"># 注意: 如果数组元素类型是数字，还要先通过tostring转成字符串</span></span><br><span class="line"><span class="comment"># -r: 直接打印，不再组装成json</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&#123;&quot;arr&quot;: [1,2,3]&#125;&#x27;</span> | jq -r <span class="string">&#x27;[.arr[] | tostring] | join(&quot;,&quot;)&#x27;</span> <span class="comment"># 1,2,3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&#123;&quot;hello&quot;: &quot;world&quot;&#125;&#x27;</span> | jq <span class="string">&#x27;has(&quot;world&quot;)&#x27;</span> <span class="comment"># false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择器</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&#123;&quot;arr&quot;: [1,2,3,4,5]&#125;&#x27;</span> | jq -r <span class="string">&#x27;[.arr[] | select(.&gt;2) | tostring] | join(&quot;,&quot;)&#x27;</span> <span class="comment"># 3,4,5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择器和映射</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&#123;&quot;arr&quot;: [1,2,3,4,5]&#125;&#x27;</span> | jq -r <span class="string">&#x27;.arr | map(select(.&gt;2))&#x27;</span> <span class="comment"># [3,4,5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&#123;&quot;arr&quot;: [5,4,3,2,1]&#125;&#x27;</span> | jq -r <span class="string">&#x27;.arr | sort&#x27;</span> <span class="comment"># [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>未来或许是属于airflow的，我或许也是应该考虑 airflow-tools 该怎么写了</p><p>直到想起原来自己只是过了个单休，算了，挖坑的事情还是放以后吧😂</p>]]></content>
    
    
    <summary type="html">azkaban 批量操作工具</summary>
    
    
    
    <category term="大数据" scheme="http://smiecj.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    <category term="azkaban" scheme="http://smiecj.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/azkaban/"/>
    
    
    <category term="大数据" scheme="http://smiecj.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    <category term="azkaban" scheme="http://smiecj.github.io/tags/azkaban/"/>
    
    <category term="shell" scheme="http://smiecj.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>make sadservers happy again</title>
    <link href="http://smiecj.github.io/2024/01/17/sadserver-intro/"/>
    <id>http://smiecj.github.io/2024/01/17/sadserver-intro/</id>
    <published>2024-01-16T16:00:00.000Z</published>
    <updated>2024-07-15T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/smiecj/p/18306958">本文 cnblog 博客地址</a></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>从 <a href="https://www.ruanyifeng.com/blog/2022/11/weekly-issue-230.html">阮一峰老师的博客</a> 了解到 <a href="https://sadservers.com/">sadserver</a> 这样一个可以提供 linux 服务器，并尝试解决系统和服务相关问题的在线测试平台。非常难得的是它可以直接提供一个公网的linux服务器（一般40-60分钟后会自动销毁），你可以在上面做任何探索。对于想要学习常用 linux 指令的同学，是一个非常不错的练手平台</p><p>sadserver 大部分题目都是免费的，46道题中11道需要会员，会员一个月5美元。可以在完成其他题目之后再小小氪💰一下挑战剩下的题目</p><p>本文整理了目前sadserver所有题目的分类和解题相关指令，带部分“剧透”，建议对题目本身有强烈兴趣的同学直接动手尝试</p><p>*推荐: 标注推荐的主要是和 linux 常用指令相关的题目，其他开源服务相关的题目可以选择性了解</p><p>*提醒: 部分题目需要root用户权限，以执行系统配置修改等相关指令，可通过<code>sudo su</code>指令提权</p><h2 id="题目分类"><a href="#题目分类" class="headerlink" title="题目分类"></a>题目分类</h2><table><thead><tr><th>题目</th><th>类型/相关服务</th><th>题目/问题概述</th><th>相关指令</th></tr></thead><tbody><tr><td>“Saint John”: what is writing to this log file?</td><td>linux</td><td>查找文件占用的进程</td><td>lsof, find</td></tr><tr><td><strong>“Saskatoon”: counting IPs. (推荐)</strong></td><td>linux</td><td>字符串计数</td><td>awk, uniq, sort</td></tr><tr><td>“Santiago”: Find the secret combination (推荐)</td><td>linux</td><td>文本内容过滤</td><td>grep</td></tr><tr><td><strong>“Taipei”: Come a-knocking (推荐)</strong></td><td>linux</td><td>knock 端口开放</td><td>knocked</td></tr><tr><td><strong>“Lhasa”: Easy Math (推荐)</strong></td><td>linux</td><td>数值计算</td><td>bc</td></tr><tr><td>“Bucharest”: Connecting to Postgres</td><td>postgresql</td><td>pgsql配置修复</td><td></td></tr><tr><td>“Bilbao”: Basic Kubernetes Problems</td><td>kubernetes</td><td>服务配置修复</td><td>kubectl</td></tr><tr><td>“Apia”: Needle in a Haystack</td><td>linux</td><td>文本比较</td><td>diff</td></tr><tr><td>“Manhattan”: can’t write data into database.</td><td>postgresql</td><td>pgsql 配置修复</td><td></td></tr><tr><td><strong>“Tokyo”: can’t serve web file (推荐)</strong></td><td>httpd, linux</td><td>httpd 配置修复</td><td>iptables</td></tr><tr><td>“Cape Town”: Borked Nginx</td><td>nginx</td><td>nginx 配置修复</td><td>systemctl</td></tr><tr><td>“Salta”: Docker container won’t start</td><td>Docker</td><td>容器内服务启动问题</td><td>docker, netstat</td></tr><tr><td>“Oaxaca”: Close an Open File</td><td>linux</td><td>查找文件占用的进程</td><td>lsof, exec</td></tr><tr><td>“Melbourne”: WSGI with Gunicorn</td><td>gunicorn</td><td>gunicorn 配置修复</td><td></td></tr><tr><td>“Lisbon”: etcd SSL cert troubles</td><td>etcd 访问不通</td><td>etcd, iptables</td><td></td></tr><tr><td>“Kihei”: Surely Not Another Disk Space Scenario (推荐)</td><td>linux</td><td>挂盘</td><td>pvcreate, vgcreate, lvcreate, mount</td></tr><tr><td>“Unimak Island”: Fun with Mr Jason</td><td>linux</td><td>文本解析</td><td>jq</td></tr><tr><td>“Ivujivik”: Parlez-vous Français?</td><td>python</td><td>excel 解析</td><td>python</td></tr><tr><td>“Paris”: Where is my webserver?</td><td>linux</td><td>http 接口调用和参数</td><td>curl</td></tr><tr><td>“Buenos Aires”: Kubernetes Pod Crashing</td><td>kubernetes</td><td>kubernetes 权限体系</td><td>kubectl</td></tr><tr><td>“Tarifa”: Between Two Seas</td><td>nginx</td><td>nginx 配置修复</td><td>docker</td></tr><tr><td><strong>“Marrakech”: Word Histogram (推荐)</strong></td><td>sqlite</td><td>文本解析</td><td>sqlite</td></tr><tr><td>“Rosario”: Restore a MySQL database</td><td>mysql</td><td>mysql 故障恢复</td><td>mysql</td></tr><tr><td>“Abaokoro”: Restore MySQL Databases Spooked by a Ghost</td><td>mysql</td><td>mysql 数据导入</td><td>mysql</td></tr><tr><td>“Poznań”: Helm Chart Issue in Kubernetes</td><td>kubernetes</td><td>helm 基本使用</td><td>helm</td></tr><tr><td>“Manado”: How much do you press?</td><td>linux</td><td>解压缩常用指令的使用</td><td>zip, tar, xz</td></tr><tr><td>“Warsaw”: Prometheus can’t scrape the webserver</td><td>linux</td><td>go 服务问题修复</td><td>docker</td></tr><tr><td>“Moyogalpa”: Security Snag. The Trials of Mary and John</td><td>linux</td><td>服务文件权限和防火墙设置</td><td>apparmor, systemctl, update-ca-certificates</td></tr><tr><td>“Helsingør”: The first walls of postgres physical replication</td><td>postgresql</td><td>postgresql 同步主库相关配置修复</td><td>docker</td></tr><tr><td>“Bekasi”: Supervisor is still around</td><td>wsgi</td><td>wsgi 启动配置修复</td><td>curl, supervisorctl</td></tr><tr><td>“Depok”: Nginx with Brotli</td><td>nginx</td><td>nginx 插件安装</td><td>cmake, make, systemctl</td></tr><tr><td>“Tukaani”: XZ LZMA Library Compromised</td><td>linux</td><td>preload 库问题修复</td><td>lsof</td></tr><tr><td>“Jakarta”: it’s always DNS.</td><td>linux</td><td>DNS 解析配置修复</td><td></td></tr><tr><td>“Bern”: Docker web container can’t connect to db container.</td><td>wordpress</td><td>通过 docker 启动 wordpress</td><td>docker</td></tr><tr><td><strong>“Karakorum”: WTFIT – What The Fun Is This? (推荐)</strong></td><td>linux</td><td>定位系统和进程启动问题</td><td>perl, strace, python</td></tr><tr><td>“Singara”: Docker and Kubernetes web app not working.</td><td>kubernetes</td><td>镜像重建和提交</td><td>docker, kubectl</td></tr><tr><td>“Hong-Kong”: can’t write data into database.</td><td>postgresql</td><td>postgresql 配置问题修复</td><td>postgres, systemctl</td></tr><tr><td><strong>“Pokhara”: SSH and other sshenanigans (推荐)</strong></td><td>linux</td><td>ssh 和 su 问题解决</td><td>ssh, su, chage, ssh-keygen</td></tr><tr><td>“Roseau”: Hack a Web Server</td><td>linux</td><td>john 暴力破解工具的使用</td><td>john</td></tr><tr><td>“Belo-Horizonte”: A Java Enigma</td><td>linux</td><td>java 程序执行问题解决</td><td>java, javap, free, fallocate, mkswap, swapon</td></tr><tr><td>“Chennai”: Pull a Rabbit from a Hat</td><td>rabbitmq</td><td>rabbitmq 测试生产消费</td><td>docker, python</td></tr><tr><td>“Monaco”: Disappearing Trick</td><td>linux</td><td>git和进程环境变量</td><td>git</td></tr><tr><td>“Florence”: Database Migration Hell</td><td>微服务</td><td>js+web后台+pgsql问题解决</td><td>docker, sed</td></tr></tbody></table><h2 id="如何解题"><a href="#如何解题" class="headerlink" title="如何解题"></a>如何解题</h2><p><img src="/2024/01/17/sadserver-intro/01.png" alt="打开题目"></p><p><img src="/2024/01/17/sadserver-intro/02.png" alt="题目示例"></p><p><img src="/2024/01/17/sadserver-intro/03.png" alt="检查成功结果"></p><h2 id="Level-简单"><a href="#Level-简单" class="headerlink" title="Level: 简单"></a>Level: 简单</h2><h3 id="【linux】“Saint-John”-what-is-writing-to-this-log-file"><a href="#【linux】“Saint-John”-what-is-writing-to-this-log-file" class="headerlink" title="【linux】“Saint John”: what is writing to this log file?"></a>【linux】<a href="https://sadservers.com/scenario/saint-john">“Saint John”: what is writing to this log file?</a></h3><p><img src="/2024/01/17/sadserver-intro/04.png" alt="题目"></p><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>服务器上有一个日志文件在被一个进程占用，需要找到这个进程并停止</p><h4 id="相关指令"><a href="#相关指令" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看文件占用进程 id</span></span><br><span class="line">lsof /var/log/bad.log</span><br><span class="line">ls -l /proc/*/fd/* | grep bad.log</span><br><span class="line">fuser /var/log/bad.log</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 确认文件是否最近未更新</span></span><br><span class="line">find /var/log/bad.log -mmin -0.1</span><br></pre></td></tr></table></figure><h3 id="【推荐】【linux】“Saskatoon”-counting-IPs"><a href="#【推荐】【linux】“Saskatoon”-counting-IPs" class="headerlink" title="【推荐】【linux】“Saskatoon”: counting IPs."></a>【推荐】【linux】<a href="https://sadservers.com/scenario/saskatoon">“Saskatoon”: counting IPs.</a></h3><p><img src="/2024/01/17/sadserver-intro/05.png" alt="题目"></p><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>/home/admin/access.log 是一个 web 服务的访问记录日志（如 nginx 的访问日志就在 access.log 中），从中统计出访问次数最多的源ip</p><h4 id="相关指令-1"><a href="#相关指令-1" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 截取ip</span></span><br><span class="line">cat /home/admin/access.log | awk &#x27;&#123;print $1&#125;&#x27; &gt; /tmp/access_ips.log</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 排序</span></span><br><span class="line">cat /tmp/access_ips.log | sort &gt; /tmp/sort_ips.log</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 计数 &amp; 再排序</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># uniq: 统计出现次数</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># sort: -n: 按数值排序而不是字符串序; -r: 逆序</span></span></span><br><span class="line">cat /tmp/sort_ips.log | uniq -c | sort -nr &gt; /tmp/count_ips.log</span><br></pre></td></tr></table></figure><h3 id="【推荐】【linux】“Santiago”-Find-the-secret-combination"><a href="#【推荐】【linux】“Santiago”-Find-the-secret-combination" class="headerlink" title="【推荐】【linux】“Santiago”: Find the secret combination"></a>【推荐】【linux】<a href="https://sadservers.com/scenario/santiago">“Santiago”: Find the secret combination</a></h3><p><img src="/2024/01/17/sadserver-intro/06.png" alt="题目"></p><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>统计特定字符串在每个文件中的出现次数，并导出只出现一次的文件，出现位置的下一行内容</p><h4 id="相关指令-2"><a href="#相关指令-2" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查找文件内容 &amp; 统计数量</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 注意: 题目要求是字符串出现次数，如果是统计词语可在 grep 之后加上 -w 参数</span></span></span><br><span class="line">find /home/admin -name &quot;*.txt&quot; | xargs grep -c &#x27;Alice&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输出之后一行（前一行是-B），且过滤出数字部分</span></span><br><span class="line">grep &quot;Alice&quot; -A1 /home/admin/1342-0.txt | grep -oE &quot;[0-9]+&quot;</span><br></pre></td></tr></table></figure><h3 id="The-Command-Line-Murders"><a href="#The-Command-Line-Murders" class="headerlink" title="The Command Line Murders"></a><a href="https://sadservers.com/scenario/command-line-murders">The Command Line Murders</a></h3><p>本题更像是解密游戏，而不是解决服务器问题，因此笔者选择（偷懒）跳过了这题，喜欢读解密类小说的可以试一下</p><h3 id="【推荐】【linux】“Taipei”-Come-a-knocking"><a href="#【推荐】【linux】“Taipei”-Come-a-knocking" class="headerlink" title="【推荐】【linux】“Taipei”: Come a-knocking"></a>【推荐】【linux】<a href="https://sadservers.com/scenario/taipei">“Taipei”: Come a-knocking</a></h3><p><img src="/2024/01/17/sadserver-intro/07.png" alt="题目"></p><h4 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h4><p>本机 80 端口启动了 http 服务，但端口被 knockd 进程限制访问，无法直接访问</p><p>需要通过 knock 对所有端口进行“开门”，使得 80 端口放开</p><p><a href="https://www.cnblogs.com/f-carey/p/16066178.html">参考-knock：端口敲门服务</a></p><h4 id="相关指令-3"><a href="#相关指令-3" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 对 1000 到 65535 的所有端口发送 knock 请求（ 发送 SYN ）</span></span><br><span class="line">for port in &#123;1000..65535&#125;</span><br><span class="line">do</span><br><span class="line">knock localhost $&#123;port&#125;</span><br><span class="line">done</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 扫描本地常见服务端口（ 发送 SYN ）</span></span><br><span class="line">nmap -p- localhost</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 nmap 扫描的端口范围</span></span><br><span class="line">nmap -v -oG - | grep &quot;Ports scanned&quot;</span><br></pre></td></tr></table></figure><h3 id="【推荐】【linux】“Lhasa”-Easy-Math"><a href="#【推荐】【linux】“Lhasa”-Easy-Math" class="headerlink" title="【推荐】【linux】“Lhasa”: Easy Math"></a>【推荐】【linux】<a href="https://sadservers.com/scenario/lhasa">“Lhasa”: Easy Math</a></h3><p><img src="/2024/01/17/sadserver-intro/08.png" alt="题目"></p><h4 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h4><p>将一个文本中的第二列数字求和以及求平均</p><p>linux 本身的运算符支持整数运算，因此节点还提供了 python3 和 bc</p><h4 id="相关指令-4"><a href="#相关指令-4" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 获取第二列</span></span><br><span class="line">sum_expr=`awk &#x27;&#123;print $2&#125;&#x27; /home/admin/scores.txt </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将文本的每一行拼接到同一行，并用加号分隔</span></span><br><span class="line">paste -sd+ test.txt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 计算数学表达式</span></span><br><span class="line">sum=`echo $&#123;expr&#125; | bc`</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 文本行数</span></span><br><span class="line">count=`cat scores.txt | wc -l`</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 保留两位小数，计算两数相除</span></span><br><span class="line">echo &quot;scale=2; $&#123;sum&#125; / $&#123;count&#125;&quot; | bc</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python3 test.py</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">score_file = <span class="string">&#x27;/home/admin/scores.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(score_file, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> scores_file:</span><br><span class="line">    lines = data = scores_file.read().splitlines()</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        score = line.split(<span class="string">&quot; &quot;</span>)[<span class="number">1</span>]</span><br><span class="line">        <span class="built_in">sum</span> += <span class="built_in">float</span>(score)</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%.2f&quot;</span> % (<span class="built_in">sum</span> / num))</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// go run test.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">scoreFile, _ := os.Open(<span class="string">&quot;/root/scores.txt&quot;</span>)</span><br><span class="line"><span class="keyword">defer</span> scoreFile.Close()</span><br><span class="line"></span><br><span class="line">scanner := bufio.NewScanner(scoreFile)</span><br><span class="line">scoreCount := <span class="number">0</span></span><br><span class="line">scoreSum := <span class="number">0.0</span></span><br><span class="line"><span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line">scoreStr := strings.Split(scanner.Text(), <span class="string">&quot; &quot;</span>)[<span class="number">1</span>]</span><br><span class="line">scoreFloat, _ := strconv.ParseFloat(scoreStr, <span class="number">32</span>)</span><br><span class="line">scoreSum += scoreFloat</span><br><span class="line">scoreCount++</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%.2f\n&quot;</span>, <span class="keyword">float32</span>(scoreSum)/<span class="keyword">float32</span>(scoreCount))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【postgresql】“Bucharest”-Connecting-to-Postgres"><a href="#【postgresql】“Bucharest”-Connecting-to-Postgres" class="headerlink" title="【postgresql】“Bucharest”: Connecting to Postgres"></a>【postgresql】<a href="https://sadservers.com/scenario/bucharest">“Bucharest”: Connecting to Postgres</a></h3><p><img src="/2024/01/17/sadserver-intro/09.png" alt="题目"></p><h4 id="题意-5"><a href="#题意-5" class="headerlink" title="题意"></a>题意</h4><p>本机启动了 postgresql 服务，但因为配置问题连接失败。需要修复 pgsql 配置并重启</p><h4 id="相关指令-5"><a href="#相关指令-5" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 指定密码、用户和 db 连接 pgsql</span></span><br><span class="line">PGPASSWORD=app1user psql -h 127.0.0.1 -d app1 -U app1user -c &#x27;\q&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 pgsql 进程和启动参数 (-e: 查看所有进程，-f: 列举所有进程信息)</span></span><br><span class="line">ps -ef | grep pgsql</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 pgsql 服务基础配置文件</span></span><br><span class="line">vim /etc/postgresql/13/main/postgresql.conf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 pgsql 登录身份和允许访问源地址的配置文件</span></span><br><span class="line">vim /etc/postgresql/13/main/pg_hba.conf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启 pgsql</span></span><br><span class="line">systemctl restart postgresql</span><br></pre></td></tr></table></figure><h3 id="【kubernetes】“Bilbao”-Basic-Kubernetes-Problems"><a href="#【kubernetes】“Bilbao”-Basic-Kubernetes-Problems" class="headerlink" title="【kubernetes】“Bilbao”: Basic Kubernetes Problems"></a>【kubernetes】<a href="https://sadservers.com/scenario/bilbao">“Bilbao”: Basic Kubernetes Problems</a></h3><p><img src="/2024/01/17/sadserver-intro/10.png" alt="题目"></p><h4 id="题意-6"><a href="#题意-6" class="headerlink" title="题意"></a>题意</h4><p>manifest.yaml 中定义了 nginx service，但启动失败了，需要通过 pod 的启动信息去解决</p><h4 id="相关指令-6"><a href="#相关指令-6" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 检查指令:</span> </span><br><span class="line">curl 10.43.216.196</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 nginx pod 状态</span></span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl describe pod nginx-deployment-67699598cc-zrj6f</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决 1 node(s) didn<span class="string">&#x27;t match Pod&#x27;</span>s node affinity/selector ...</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># node 添加 label</span></span></span><br><span class="line">kubectl label nodes node1 disk=ssd</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 删除 pod （触发重建）</span></span></span><br><span class="line">kubectl delete pod nginx-deployment-67699598cc-zrj6f</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决 1 Insufficient memory</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 减少 nginx 申请的内存资源</span></span></span><br><span class="line">sed -i &quot;s/memory:.*/memory: 500Mi/g&quot; manifest.yml</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 重载 manifest.yml</span></span></span><br><span class="line">kubectl apply -f manifest.yml</span><br></pre></td></tr></table></figure><!--## 查看kubectl get nodes -o json | jq '.items[].spec'## 移除kubectl taint nodes --all node.kubernetes.io/unreachable:NoSchedule-kubectl taint nodes i-02f8e6680f7d5e616 node.kubernetes.io/unreachable:NoSchedule-kubectl taint nodes i-02f8e6680f7d5e616 node.kubernetes.io/unreachable:NoExecute---><h3 id="【linux】“Apia”-Needle-in-a-Haystack"><a href="#【linux】“Apia”-Needle-in-a-Haystack" class="headerlink" title="【linux】“Apia”: Needle in a Haystack"></a>【linux】<a href="https://sadservers.com/scenario/apia">“Apia”: Needle in a Haystack</a></h3><p><img src="/2024/01/17/sadserver-intro/11.png" alt="题目"></p><h4 id="题意-7"><a href="#题意-7" class="headerlink" title="题意"></a>题意</h4><p>在 /home/admin/data 目录下有很多 txt 文件，其中一个和其他文件内容不一样，而且只是在一个段落中多了一个单词，找到这个单词</p><h4 id="相关指令-7"><a href="#相关指令-7" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 输出文本的 md5 值</span></span><br><span class="line">md5sum  /home/admin/data/file1.txt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 对比两个文本差异（段落级别）</span></span><br><span class="line">diff /home/admin/data/file1.txt /home/admin/data/file2.txt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 对比两个文本差异（单词级别）</span></span><br><span class="line">wdiff /home/admin/data/file1.txt /home/admin/data/file2.txt</span><br></pre></td></tr></table></figure><h2 id="中等"><a href="#中等" class="headerlink" title="中等"></a>中等</h2><h3 id="【postgresql】“Manhattan”-can’t-write-data-into-database"><a href="#【postgresql】“Manhattan”-can’t-write-data-into-database" class="headerlink" title="【postgresql】“Manhattan”: can’t write data into database."></a>【postgresql】<a href="https://sadservers.com/scenario/manhattan">“Manhattan”: can’t write data into database.</a></h3><p><img src="/2024/01/17/sadserver-intro/12.png" alt="题目"></p><h4 id="题意-8"><a href="#题意-8" class="headerlink" title="题意"></a>题意</h4><p>本机启动了 postgresql 服务，但执行 insert 会失败，找到原因并解决</p><h4 id="相关指令-8"><a href="#相关指令-8" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看 postgresql 日志</span></span><br><span class="line">tail -f /var/log/postgresql/postgresql-14-main.log</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启 postgresql</span></span><br><span class="line">systemctl restart postgresql</span><br></pre></td></tr></table></figure><h3 id="【推荐】【httpd、linux】“Tokyo”-can’t-serve-web-file"><a href="#【推荐】【httpd、linux】“Tokyo”-can’t-serve-web-file" class="headerlink" title="【推荐】【httpd、linux】“Tokyo”: can’t serve web file"></a>【推荐】【httpd、linux】<a href="https://sadservers.com/scenario/tokyo">“Tokyo”: can’t serve web file</a></h3><p><img src="/2024/01/17/sadserver-intro/13.png" alt="题目"></p><h4 id="题意-9"><a href="#题意-9" class="headerlink" title="题意"></a>题意</h4><p>本机启动了 apache2（即 <a href="https://askubuntu.com/a/248412">httpd</a>） 服务，但执行 curl 127.0.0.1:80 没有任何返回，确认具体原因</p><h4 id="相关指令-9"><a href="#相关指令-9" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看防火墙规则列表</span></span><br><span class="line">iptables -L --line-numbers</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除指定规则</span></span><br><span class="line">iptables -t filter --delete INPUT 1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 清空所有防火墙规则</span></span><br><span class="line">iptables -F</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 给文件添加所有用户可读权限</span></span><br><span class="line">chmod +r /var/www/html/index.html</span><br></pre></td></tr></table></figure><h3 id="【nginx】“Cape-Town”-Borked-Nginx"><a href="#【nginx】“Cape-Town”-Borked-Nginx" class="headerlink" title="【nginx】“Cape Town”: Borked Nginx"></a>【nginx】<a href="https://sadservers.com/scenario/capetown">“Cape Town”: Borked Nginx</a></h3><p><img src="/2024/01/17/sadserver-intro/14.png" alt="题目"></p><h4 id="题意-10"><a href="#题意-10" class="headerlink" title="题意"></a>题意</h4><p>本机安装了 nginx 但无法启动，检查启动失败原因，修复并启动</p><h4 id="相关指令-10"><a href="#相关指令-10" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 重启 nginx 服务</span></span><br><span class="line">systemctl restart nginx</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 nginx 启动日志</span></span><br><span class="line">journalctl -u nginx</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 nginx 启动错误日志</span></span><br><span class="line">tail -f /var/log/nginx/error.log</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 nginx 配置</span></span><br><span class="line">/etc/nginx/nginx.conf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 nginx systemd 服务管理配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 关键配置: LimitNOFILE</span></span></span><br><span class="line">vim /etc/systemd/system/nginx.service</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新加载配置并重启 nginx</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><h3 id="【docker】“Salta”-Docker-container-won’t-start"><a href="#【docker】“Salta”-Docker-container-won’t-start" class="headerlink" title="【docker】“Salta”: Docker container won’t start."></a>【docker】<a href="https://sadservers.com/scenario/salta">“Salta”: Docker container won’t start.</a></h3><p><img src="/2024/01/17/sadserver-intro/15.png" alt="题目"></p><h4 id="题意-11"><a href="#题意-11" class="headerlink" title="题意"></a>题意</h4><p>本机 /home/admin/app 目录下有一个支持容器化的 node 应用，并提供 Dockerfile 可以直接构建<br>服务主逻辑在 server.js 中<br>需要构建镜像后，启动该服务，并解决调用该服务接口遇到的问题</p><h4 id="相关指令-11"><a href="#相关指令-11" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 构建镜像</span></span><br><span class="line">docker build -t app .</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">docker run -d --name app -p 8888:8888 app</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查端口占用</span></span><br><span class="line">netstat -tunlp | grep 8888</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看容器日志</span></span><br><span class="line">docker logs dd231758183e</span><br></pre></td></tr></table></figure><h3 id="【linux】“Oaxaca”-Close-an-Open-File"><a href="#【linux】“Oaxaca”-Close-an-Open-File" class="headerlink" title="【linux】“Oaxaca”: Close an Open File"></a>【linux】<a href="https://sadservers.com/scenario/oaxaca">“Oaxaca”: Close an Open File</a></h3><p><img src="/2024/01/17/sadserver-intro/16.png" alt="题目"></p><h4 id="题意-12"><a href="#题意-12" class="headerlink" title="题意"></a>题意</h4><p>/home/admin/somefile 正在被一个进程占用，找到占用原因，并使得下次登录终端后，该文件不会再被进程占用</p><p>相关知识点: <a href="https://www.geeksforgeeks.org/exec-command-in-linux-with-examples/">exec 指令</a></p><h4 id="相关指令-12"><a href="#相关指令-12" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 找到占用文件的进程 ，并直接 <span class="built_in">kill</span></span></span><br><span class="line">lsof /home/admin/somefile | tail -2 | awk &#x27;&#123;print $2&#125;&#x27; | xargs kill -9</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 一个会导致 /tmp/test.txt 被bash进程占用的指令</span></span><br><span class="line">exec 77&gt; /tmp/test.txt</span><br></pre></td></tr></table></figure><h3 id="【nginx、gunicorn】“Melbourne”-WSGI-with-Gunicorn"><a href="#【nginx、gunicorn】“Melbourne”-WSGI-with-Gunicorn" class="headerlink" title="【nginx、gunicorn】“Melbourne”: WSGI with Gunicorn"></a>【nginx、gunicorn】<a href="https://sadservers.com/scenario/melbourne">“Melbourne”: WSGI with Gunicorn</a></h3><p><img src="/2024/01/17/sadserver-intro/17.png" alt="题目"></p><h4 id="题意-13"><a href="#题意-13" class="headerlink" title="题意"></a>题意</h4><p>本机运行了 nginx 和 <a href="https://docs.gunicorn.org/en/latest/install.html">gunicorn</a>（实现了 WSGI 协议的 HTTP 服务器，master-worker 架构）</p><p>正常情况下，通过 curl 调用服务的调用链: curl -&gt; nginx -&gt; gunicorn -&gt; wesi.py，其中 /home/admin/wesi.py 中定义了接口的响应方式为返回200状态码和字符串”Hello World”</p><p>但是通过 curl -i <a href="http://localhost/">http://localhost</a> 调用接口失败了，找到原因并通过修改配置解决</p><p>相关教程: <a href="https://docs.gunicorn.org/en/latest/deploy.html">Deploying Gunicorn</a><br>相关知识点: <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Length">http header: content-length</a></p><h4 id="相关指令-13"><a href="#相关指令-13" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看 nginx 错误日志</span></span><br><span class="line">tail -f /var/log/nginx/error.log</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查找 nginx 配置目录下带有指定关键字的配置文件</span></span><br><span class="line">find /etc/nginx -name &#x27;*&#x27; -type f | xargs grep &quot;gunicorn&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启 nginx</span></span><br><span class="line">systemctl restart nginx</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 gunicorn 配置</span></span><br><span class="line">vim /etc/systemd/system/gunicorn.service</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 wsgi 服务配置</span></span><br><span class="line">vim /home/admin/wsgi.py</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启 gunicorn</span></span><br><span class="line">systemctl restart gunicorn</span><br></pre></td></tr></table></figure><!--[WSGI](https://zh.wikipedia.org/zh-cn/Web%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BD%91%E5%85%B3%E6%8E%A5%E5%8F%A3): Web Server Gateway Interface, 为Python语言定义的Web服务器和Web应用程序或框架之间的一种简单而通用的接口[gunicorn](https://docs.gunicorn.org/en/stable/): 基于 WSGI 实现的http服务器，类似 httpd--><h3 id="【etcd、linux】“Lisbon”-etcd-SSL-cert-troubles"><a href="#【etcd、linux】“Lisbon”-etcd-SSL-cert-troubles" class="headerlink" title="【etcd、linux】“Lisbon”: etcd SSL cert troubles"></a>【etcd、linux】<a href="https://sadservers.com/scenario/lisbon">“Lisbon”: etcd SSL cert troubles</a></h3><p><img src="/2024/01/17/sadserver-intro/18.png" alt="题目"></p><h4 id="题意-14"><a href="#题意-14" class="headerlink" title="题意"></a>题意</h4><p>本机部署了 etcd 服务，正常情况下可通过 <code>etcdctl get foo</code> 或 <code>curl -i https://localhost:2379/v2/keys/foo</code> 获取配置，但目前访问失败，需要解决</p><h4 id="相关指令-14"><a href="#相关指令-14" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 通过 etcdctl 获取配置</span></span><br><span class="line">etcdctl get foo</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置系统时间</span></span><br><span class="line">date -s &#x27;2023-01-29 00:00:00&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 调用etcd接口</span></span><br><span class="line">curl -ik https://localhost:2379/v2/keys/foo</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看防火墙NAT类型的配置</span></span><br><span class="line">iptables -t nat -L</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 清空NAT类型防火墙规则</span></span><br><span class="line">iptables -t nat -F</span><br></pre></td></tr></table></figure><h3 id="【推荐】【linux】“Kihei”-Surely-Not-Another-Disk-Space-Scenario"><a href="#【推荐】【linux】“Kihei”-Surely-Not-Another-Disk-Space-Scenario" class="headerlink" title="【推荐】【linux】“Kihei”: Surely Not Another Disk Space Scenario"></a>【推荐】【linux】<a href="https://sadservers.com/scenario/kihei">“Kihei”: Surely Not Another Disk Space Scenario</a></h3><p><img src="/2024/01/17/sadserver-intro/19.png" alt="题目"></p><h4 id="题意-15"><a href="#题意-15" class="headerlink" title="题意"></a>题意</h4><p>当前路径的 kihei 程序会在 /home/admin/data 目录下创建一个 1.5G大小的文件，但因为磁盘空间不足，执行失败了，需要在不删除其他文件的情况下使得 kihei 能够正常执行</p><h4 id="相关指令-15"><a href="#相关指令-15" class="headerlink" title="相关指令"></a>相关指令</h4><p>本题是非常完整的磁盘挂载练手好题，可以结合挂盘相关的指令一起理解</p><p><a href="https://blog.csdn.net/MssGuo/article/details/120473476">参考: lvcreate 创建逻辑卷、vgcreate 创建卷组、pvcreate 创建物理卷、vgextend 扩容卷组、lv缩容</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看 kihei 进程的详细日志</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 注意: 这里的 kihei 可执行文件并不是来自开源项目...</span></span></span><br><span class="line">./kihei -v</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看本地磁盘使用情况和剩余空间</span></span><br><span class="line">df -h</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有磁盘</span></span><br><span class="line">lsblk</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建物理卷</span></span><br><span class="line">pvcreate /dev/nvme1n1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有物理卷</span></span><br><span class="line">pvs</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建卷组</span></span><br><span class="line">vgcreate vg1 /dev/nvme1n1 /dev/nvme2n1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有卷组</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建逻辑卷</span></span><br><span class="line">lvcreate -n lv1 -l 100%FREE vg1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看逻辑卷</span></span><br><span class="line">lvs</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 格式化卷，初始化文件系统</span></span><br><span class="line">mkfs -t ext4 /dev/vg1/lv1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 卷挂载，并设置目录权限</span></span><br><span class="line">mount /dev/vg1/lv1 /home/admin/data</span><br><span class="line">chown -R admin:root /home/admin/data</span><br></pre></td></tr></table></figure><h3 id="【linux】“Unimak-Island”-Fun-with-Mr-Jason"><a href="#【linux】“Unimak-Island”-Fun-with-Mr-Jason" class="headerlink" title="【linux】“Unimak Island”: Fun with Mr Jason"></a>【linux】<a href="https://sadservers.com/scenario/unimak">“Unimak Island”: Fun with Mr Jason</a></h3><p><img src="/2024/01/17/sadserver-intro/20.png" alt="题目"></p><h4 id="题意-16"><a href="#题意-16" class="headerlink" title="题意"></a>题意</h4><p>station_information.json 中包含若干个单车租赁站的信息，筛选其中 没有自动服务机（has_kiosk=false）且剩余单车超过30辆（capacity&gt;30）的租赁站，将它的id（station_id）写入答案文件中</p><h4 id="相关指令-16"><a href="#相关指令-16" class="headerlink" title="相关指令"></a>相关指令</h4><p>虽然题目提示本机有 <a href="https://github.com/jqlang/jq">jq</a> 、 <a href="https://github.com/tomnomnom/gron">gron</a> 和 <a href="https://github.com/simeji/jid">jid</a> 等工具，但后两者操作起来都不如同时包含解析和筛选器的 jq 方便，这里直接展示 jq 的几个基本指令，组合几个 filter ，就可以解答本题了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 获取数组长度</span></span><br><span class="line">echo &quot;[1,2,3,4,5]&quot; | jq length</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 过滤器</span></span><br><span class="line">echo &#x27;&#123;&quot;dates&quot;:[&#123;&quot;day&quot;:&quot;monday&quot;,&quot;emotion&quot;:&quot;happy&quot;&#125;,&#123;&quot;day&quot;:&quot;tuesday&quot;,&quot;emotion&quot;:&quot;crazy&quot;&#125;]&#125;&#x27; | jq -r &#x27;.dates[] | select(.emotion==&quot;happy&quot;)&#x27;</span><br></pre></td></tr></table></figure><h3 id="【python、go】“Ivujivik”-Parlez-vous-Francais"><a href="#【python、go】“Ivujivik”-Parlez-vous-Francais" class="headerlink" title="【python、go】“Ivujivik”: Parlez-vous Français?"></a>【python、go】<a href="https://sadservers.com/scenario/ivujivik">“Ivujivik”: Parlez-vous Français?</a></h3><p><img src="/2024/01/17/sadserver-intro/21.png" alt="题目"></p><h4 id="题意-17"><a href="#题意-17" class="headerlink" title="题意"></a>题意</h4><p>table_tableau11.csv 文件中记录了总统选举中，各个选区的投票情况信息，需要按题目的筛选条件得到对应的选区名称</p><p>省份,选区名称,选区编号,人口,选民,投票站,有效选票,有效选票百分比,被拒绝的选票 被拒绝的选票,被拒绝的选票百分比,总投票数,选民投票率,当选候选人</p><h4 id="相关指令-17"><a href="#相关指令-17" class="headerlink" title="相关指令"></a>相关指令</h4><p>本题主要考察通过各个语言/工具解析 csv 的方法，这里展示 python 和 go 的解答方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pandas</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line">max_reject = <span class="number">0</span></span><br><span class="line">answer = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;table_tableau11.csv&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    reader = csv.reader(f)</span><br><span class="line">    <span class="built_in">next</span>(reader) <span class="comment"># skip first line</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">        current_reject = <span class="built_in">int</span>(<span class="built_in">float</span>(row[<span class="number">8</span>]))</span><br><span class="line">        current_population = <span class="built_in">int</span>(row[<span class="number">3</span>])</span><br><span class="line">        <span class="keyword">if</span> current_reject &gt; max_reject:</span><br><span class="line">            max_reject = current_reject</span><br><span class="line">            <span class="keyword">if</span> current_population &lt; <span class="number">100000</span>:</span><br><span class="line">                answer = row[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;mysolution&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">f&quot;<span class="subst">&#123;answer&#125;</span>\n&quot;</span>)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/csv&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f, _ := os.Open(<span class="string">&quot;table_tableau11.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line">csvReader := csv.NewReader(f)</span><br><span class="line">csvReader.FieldsPerRecord = <span class="number">-1</span> <span class="comment">// ignore fields per record</span></span><br><span class="line">records, _ := csvReader.ReadAll()</span><br><span class="line"></span><br><span class="line">answer := <span class="string">&quot;&quot;</span></span><br><span class="line">maxReject := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _, currentRecord := <span class="keyword">range</span> records[<span class="number">1</span>:] &#123;</span><br><span class="line">currentReject, _ := strconv.Atoi(currentRecord[<span class="number">8</span>])</span><br><span class="line">currentPopulation, _ := strconv.Atoi(currentRecord[<span class="number">3</span>])</span><br><span class="line"><span class="keyword">if</span> currentReject &gt; maxReject &#123;</span><br><span class="line">maxReject = currentReject</span><br><span class="line"><span class="keyword">if</span> currentPopulation &lt; <span class="number">100000</span> &#123;</span><br><span class="line">answer = currentRecord[<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ioutil.WriteFile(<span class="string">&quot;mysolution&quot;</span>, []<span class="keyword">byte</span>(answer + <span class="string">&quot;\n&quot;</span>), <span class="number">0644</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【linux】“Paris”-Where-is-my-webserver"><a href="#【linux】“Paris”-Where-is-my-webserver" class="headerlink" title="【linux】“Paris”: Where is my webserver?"></a>【linux】<a href="https://sadservers.com/scenario/paris">“Paris”: Where is my webserver?</a></h3><p><img src="/2024/01/17/sadserver-intro/22.png" alt="题目"></p><h4 id="题意-18"><a href="#题意-18" class="headerlink" title="题意"></a>题意</h4><p>本题没有提示应该比较难做出来，因为问题相关的代码甚至都看不到，所以不是很推荐，主要考察对 user-agent header 的了解</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/User-Agent">user-agent</a>: 表示客户端类型，默认为空，浏览器访问时将会自动填充</p><p>这里访问 5000 端口启动的服务端会对 user-agent 进行校验，如果为空将不会返回数据，需要指定任意的 user-agent 再调用 5000 端口，拿到答案需要的密码</p><h4 id="相关指令-18"><a href="#相关指令-18" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加 user-agent 调用接口</span></span><br><span class="line">curl --user-agent &quot;hhh&quot; http://localhost:5000</span><br><span class="line">curl -H &#x27;User-Agent: hhh&#x27; http://localhost:5000</span><br><span class="line">curl -A &#x27;hhh&#x27; http://localhost:5000</span><br></pre></td></tr></table></figure><h3 id="【kubernetes】“Buenos-Aires”-Kubernetes-Pod-Crashing"><a href="#【kubernetes】“Buenos-Aires”-Kubernetes-Pod-Crashing" class="headerlink" title="【kubernetes】“Buenos Aires”: Kubernetes Pod Crashing"></a>【kubernetes】<a href="https://sadservers.com/scenario/buenos-aires">“Buenos Aires”: Kubernetes Pod Crashing</a></h3><p><img src="/2024/01/17/sadserver-intro/23.png" alt="题目"></p><h4 id="题意-19"><a href="#题意-19" class="headerlink" title="题意"></a>题意</h4><p>本机部署了 k8s ，其中名为 logshipper 的 pod 启动失败了，需要确认失败原因</p><p>本题主要考察 k8s 的 clusterrole 对应的权限类型</p><h4 id="相关指令-19"><a href="#相关指令-19" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看所有 pod 的 label</span></span><br><span class="line">kubectl get pod --show-labels</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看指定 label 对应的 pod 信息和状态</span></span><br><span class="line">kubectl describe pod -l app=logshipper</span><br><span class="line">kubectl describe pod logshipper-597f84bf4f-6ssjq</span><br><span class="line">kubectl describe deployment logshipper</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 pod 日志（提示权限不足）</span></span><br><span class="line">kubectl logs logshipper-597f84bf4f-6ssjq --follow</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 logshipper pod 绑定的 serviceAccount 对应的 rolebinding 和 clusterrolebinding</span></span><br><span class="line">kubectl get rolebinding,clusterrolebinding --all-namespaces -o jsonpath=&#x27;&#123;range .items[?(@.subjects[0].name==&quot;logshipper-sa&quot;)]&#125;[&#123;.roleRef.kind&#125;,&#123;.roleRef.name&#125;]&#123;end&#125;&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看指定 clusterrole</span></span><br><span class="line">kubectl describe ClusterRole logshipper-cluster-role</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑 clusterrole 权限</span></span><br><span class="line">kubectl edit ClusterRole logshipper-cluster-role</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除（触发自动拉起新的pod）</span></span><br><span class="line">kubectl delete pod logshipper-597f84bf4f-6ssjq</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取服务状态</span></span><br><span class="line">kubectl get pods -l app=logshipper --no-headers -o json | jq -r &#x27;.items[] | &quot;\(.status.containerStatuses[0].ready)&quot;&#x27;</span><br></pre></td></tr></table></figure><h3 id="【haproxy、docker】“Tarifa”-Between-Two-Seas"><a href="#【haproxy、docker】“Tarifa”-Between-Two-Seas" class="headerlink" title="【haproxy、docker】“Tarifa”: Between Two Seas"></a>【haproxy、docker】<a href="https://sadservers.com/scenario/tarifa">“Tarifa”: Between Two Seas</a></h3><p><img src="/2024/01/17/sadserver-intro/24.png" alt="题目"></p><h4 id="题意-20"><a href="#题意-20" class="headerlink" title="题意"></a>题意</h4><p>本机通过 docker compose 启动了一个 haproxy 和两个 nginx。因为 haproxy 的配置（haproxy.cfg）策略是对两个 nginx 节点进行轮询（roundrobin）访问，因此正常情况下，调用 localhost:5000 会依次返回  “nginx_0” 和 “nginx_1”<br>但目前调用只返回了 “nginx_0”，需要找到原因</p><h4 id="相关指令-20"><a href="#相关指令-20" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 调用 haproxy</span></span><br><span class="line">curl localhost:5000</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 haproxy pod 日志</span></span><br><span class="line">docker logs c79c9eb25143</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 haproxy 配置</span></span><br><span class="line">vim haproxy.cfg</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 nginx 配置</span></span><br><span class="line">vim custom-nginx_0.conf</span><br><span class="line">vim custom-nginx_1.conf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 docker compose 服务定义</span></span><br><span class="line">vim docker-compose.yml</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启 docker-compose 服务组</span></span><br><span class="line">docker compose down</span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><h3 id="【推荐】【sqlite】“Marrakech”-Word-Histogram"><a href="#【推荐】【sqlite】“Marrakech”-Word-Histogram" class="headerlink" title="【推荐】【sqlite】“Marrakech”: Word Histogram"></a>【推荐】【sqlite】<a href="https://sadservers.com/scenario/marrakech">“Marrakech”: Word Histogram</a></h3><p><img src="/2024/01/17/sadserver-intro/25.png" alt="题目"></p><h4 id="题意-21"><a href="#题意-21" class="headerlink" title="题意"></a>题意</h4><p>frankestein.txt 文本中有一段文章，找到其中出现次数排第二多的单词<br>常见的单词分隔符为: .,:; ，且单词需忽略大小写</p><h4 id="相关指令-21"><a href="#相关指令-21" class="headerlink" title="相关指令"></a>相关指令</h4><p>这里通过 sqlite3 来解决本题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 所有单词分隔后，转成全大写并按换行符分隔写入新文件</span></span><br><span class="line">cat frankestein.txt | tr &#x27;.&#x27; &#x27;\n&#x27; | tr &#x27;,&#x27; &#x27;\n&#x27; | tr &#x27;:&#x27; &#x27;\n&#x27; | tr &#x27;;&#x27; &#x27;\n&#x27; | tr &#x27; &#x27; &#x27;\n&#x27; | tr &#x27;&quot;&#x27; &#x27;\n&#x27; | sed -r &#x27;/^\s*$/d&#x27; | tr &#x27;a-z&#x27; &#x27;A-Z&#x27; &gt; frankestein_new.txt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 写入文件头（作为 sqlite 加载的列名）</span></span><br><span class="line">sed -i &#x27;1iword&#x27; frankestein_new.txt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sqlite: 导入文本到words表</span></span><br><span class="line">.import frankestein_new.txt words</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sql: 出现次数排第二的单词</span></span><br><span class="line">SELECT a.word, a.count_word FROM (SELECT word, count(word) AS count_word FROM words GROUP BY word) AS a ORDER BY a.count_word DESC LIMIT 1 OFFSET 1;</span><br></pre></td></tr></table></figure><h3 id="【mysql】“Rosario”-Restore-a-MySQL-database"><a href="#【mysql】“Rosario”-Restore-a-MySQL-database" class="headerlink" title="【mysql】“Rosario”: Restore a MySQL database"></a>【mysql】<a href="https://sadservers.com/scenario/rosario">“Rosario”: Restore a MySQL database</a></h3><p><img src="/2024/01/17/sadserver-intro/26.png" alt="题目"></p><p>本机启动了 <a href="https://github.com/MariaDB/server">mariadb</a> ，需要在 main 数据库中执行 backup.sql 中的语句，但题目没有提供数据库登录密码</p><p>本题主要考察 mysql/mariadb 如何通过免密模式启动，参考 <a href="https://dev.mysql.com/doc/refman/8.4/en/resetting-permissions.html">B.3.3.2 How to Reset the Root Password</a></p><h4 id="相关指令-22"><a href="#相关指令-22" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看/修改 mariadb 启动配置</span></span><br><span class="line">vim /usr/lib/systemd/system/mariadb.service</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加systemctl启动服务的环境变量</span></span><br><span class="line">[Service]</span><br><span class="line">Environment=&quot;MYSQLD_OPTS=&#x27;--skip-grant-tables&#x27;&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启 mariadb</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">service mariadb restart</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 免密登录</span></span><br><span class="line">mysql</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修正 backup.sql 语法问题</span></span><br><span class="line">sed -i &#x27;s#?$#;#g&#x27; /home/admin/backup.sql</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行 backup.sql</span></span><br><span class="line">use main;</span><br><span class="line">source /home/admin/backup.sql;</span><br><span class="line"></span><br><span class="line">mysql -Dmain &lt; /home/admin/backup.sql</span><br></pre></td></tr></table></figure><h3 id="【mysql】“Abaokoro”-Restore-MySQL-Databases-Spooked-by-a-Ghost"><a href="#【mysql】“Abaokoro”-Restore-MySQL-Databases-Spooked-by-a-Ghost" class="headerlink" title="【mysql】“Abaokoro”: Restore MySQL Databases Spooked by a Ghost"></a>【mysql】<a href="https://sadservers.com/scenario/abaokoro">“Abaokoro”: Restore MySQL Databases Spooked by a Ghost</a></h3><p><img src="/2024/01/17/sadserver-intro/27.png" alt="题目"></p><h4 id="题意-22"><a href="#题意-22" class="headerlink" title="题意"></a>题意</h4><p>本机启动了 mariadb ，需要将 dbs_to_restore.zip 中的三个 sql 文件分别导入 first 、 second 和 third 三个数据库中</p><h4 id="相关指令-23"><a href="#相关指令-23" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 检查磁盘占用</span></span><br><span class="line">du -h --max-depth=1 /var</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">tar -xzvf dbs_to_restore.tar.gz </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 导入三个数据库（注：导入时间较长）</span></span><br><span class="line">mysql -e &quot;create database first&quot;</span><br><span class="line">mysql -Dfirst &lt; first.sql</span><br><span class="line"></span><br><span class="line">mysql -e &quot;create database second&quot;</span><br><span class="line">mysql -Dsecond &lt; second.sql</span><br><span class="line"></span><br><span class="line">mysql -e &quot;create database third&quot;</span><br><span class="line">mysql -Dthird &lt; third.sql</span><br></pre></td></tr></table></figure><h3 id="【k8s、helm】“Poznan”-Helm-Chart-Issue-in-Kubernetes"><a href="#【k8s、helm】“Poznan”-Helm-Chart-Issue-in-Kubernetes" class="headerlink" title="【k8s、helm】“Poznań”: Helm Chart Issue in Kubernetes"></a>【k8s、helm】<a href="https://sadservers.com/scenario/poznan">“Poznań”: Helm Chart Issue in Kubernetes</a></h3><p><img src="/2024/01/17/sadserver-intro/28.png" alt="题目"></p><p>本机通过 web_chart 目录定义的 nginx chart 启动了一个 nginx pod，期望是调用任何一个 nginx 的 80 端口都能返回 configmap.yaml 中定义的 “Welcome SadServers” 页面</p><p>但现在调用返回的是 nginx 默认的页面，configmap 配的页面并没有生效。需要使之生效，还需要将 nginx 的副本数修改为 3</p><p>本题主要考察 helm 的基本使用，以及 k8s configmap 如何注入到 pod 中，参考:<br><a href="https://stackoverflow.com/questions/71058097/how-do-i-attach-a-configmap-to-a-deployment-in-kubernetes/71058264#71058264">How do I attach a configmap to a deployment in Kubernetes?</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 获取 nginx pod 对应的 ip 并调用 nginx 服务</span></span><br><span class="line">pod_ip=`kubectl get pods -n default -o jsonpath=&#x27;&#123;.items[0].status.podIP&#125;&#x27;`</span><br><span class="line">curl $&#123;pod_ip&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 deployment</span></span><br><span class="line">kubectl describe deployment web-chart-nginx</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改 chart values（包含副本数配置）</span></span><br><span class="line">helm get values web-chart --all</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重装 web-chart</span></span><br><span class="line">helm uninstall web-chart</span><br><span class="line">helm install web-chart web_chart/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或: 更新 chart</span></span><br><span class="line">helm upgrade web-chart ./web_chart --values ./web_chart/values.yaml</span><br></pre></td></tr></table></figure><p>修改后的 deployment:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">(省略)</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> &#123;&#123; <span class="string">.Chart.Name</span> &#125;&#125;</span><br><span class="line">          <span class="attr">image:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; .Values.image.repository &#125;&#125;</span>:<span class="template-variable">&#123;&#123; .Values.image.tag &#125;&#125;</span>&quot;</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> &#123;&#123; <span class="string">.Values.image.pullPolicy</span> &#125;&#125;</span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html/</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">nginx-html</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-html</span></span><br><span class="line">        <span class="attr">configMap:</span></span><br><span class="line">          <span class="attr">name:</span> &#123;&#123; <span class="string">.Release.Name</span> &#125;&#125;<span class="string">-cm-index-html</span></span><br><span class="line">          <span class="attr">items:</span>              </span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">index.html</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">index.html</span></span><br></pre></td></tr></table></figure><h3 id="【linux】“Manado”-How-much-do-you-press"><a href="#【linux】“Manado”-How-much-do-you-press" class="headerlink" title="【linux】“Manado”: How much do you press?"></a>【linux】<a href="https://sadservers.com/scenario/manado">“Manado”: How much do you press?</a></h3><p><img src="/2024/01/17/sadserver-intro/29.png" alt="题目"></p><h4 id="题意-23"><a href="#题意-23" class="headerlink" title="题意"></a>题意</h4><p>通过本机提供的 gzip、xz、lzip、tar 等工具，将 35147 字节大小的 names 文件压缩成不到 9400 字节，并将压缩文件放到 solution 目录下</p><p>可以在<strong>不删除</strong>任何行的前提下对文件进行修改</p><h4 id="相关指令-24"><a href="#相关指令-24" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> gzip 压缩和解压</span></span><br><span class="line">gzip -v9 names</span><br><span class="line">gunzip names.gz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> xz</span></span><br><span class="line">xz names</span><br><span class="line">xz -d names.xz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> lzip</span></span><br><span class="line">tar --use-compress-program=lbzip2 -cvf names.tar.bz2 names</span><br><span class="line">tar --use-compress-program=lbzip2 -xvf names.tar.bz2</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> lz4</span></span><br><span class="line">lz4 names</span><br><span class="line">lz4 -d names.lz4</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> lzip</span></span><br><span class="line">lzip --best names</span><br><span class="line">lzip -d names.lz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> lzop</span></span><br><span class="line">lzop -9 names</span><br><span class="line">lzop -d names.lz.lzo</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> zstd</span></span><br><span class="line">zstd -19 names</span><br><span class="line">zstd -d names.zst</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 文件内容排序</span></span><br><span class="line">sort names &gt; names_new</span><br></pre></td></tr></table></figure><h3 id="【docker、golang】“Warsaw”-Prometheus-can’t-scrape-the-webserver"><a href="#【docker、golang】“Warsaw”-Prometheus-can’t-scrape-the-webserver" class="headerlink" title="【docker、golang】“Warsaw”: Prometheus can’t scrape the webserver"></a>【docker、golang】<a href="https://sadservers.com/scenario/warsaw">“Warsaw”: Prometheus can’t scrape the webserver</a></h3><p><img src="/2024/01/17/sadserver-intro/30.png" alt="题目"></p><h4 id="题意-24"><a href="#题意-24" class="headerlink" title="题意"></a>题意</h4><p>app 目录下是一个通过 gorilla/mux 框架搭建的 web 服务，并通过 promhttp 暴露 /metrics 接口</p><p>但是目前直接调用 <a href="http://localhost:9000/metrics">http://localhost:9000/metrics</a> 接口将失败，需要解决</p><h4 id="相关指令-25"><a href="#相关指令-25" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 调用 metrics 接口</span></span><br><span class="line">curl http://localhost:9000/metrics</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启 docker compose 服务</span></span><br><span class="line">docker compose down --volumes</span><br><span class="line">docker compose up -d</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 重新构建镜像再启动</span></span></span><br><span class="line">docker compose up --build -d</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 app 的启动逻辑</span></span><br><span class="line">vim app/main.go</span><br></pre></td></tr></table></figure><h3 id="“Moyogalpa”-Security-Snag-The-Trials-of-Mary-and-John"><a href="#“Moyogalpa”-Security-Snag-The-Trials-of-Mary-and-John" class="headerlink" title="“Moyogalpa”: Security Snag. The Trials of Mary and John"></a><a href="https://sadservers.com/scenario/moyogalpa">“Moyogalpa”: Security Snag. The Trials of Mary and John</a></h3><p><img src="/2024/01/17/sadserver-intro/31.png" alt="题目"></p><h4 id="题意-25"><a href="#题意-25" class="headerlink" title="题意"></a>题意</h4><p>本地有一个通过 systemctl 启动的 web 服务，虽然它可以运行但访问其接口会失败，需要修复证书和权限相关的问题，以及防火墙 apparmor 的配置问题</p><p><a href="https://wsxk.github.io/apparmor%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/">apparmor 的使用方式参考</a></p><h4 id="相关指令-26"><a href="#相关指令-26" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看服务定义</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 一个二进制文件，指定了静态文件路径为 /home/webapp/static-files, 证书文件为 /home/webapp/pki/server.crt</span></span></span><br><span class="line">cat /etc/systemd/system/webapp.service</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启 webapp</span></span><br><span class="line">systemctl restart webapp</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决 webapp 无法 su 的问题: 替换 webapp 的登录 shell</span></span><br><span class="line">vim /etc/passwd</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 手动启动 webapp</span></span><br><span class="line">export APP_STATIC_DIR=/home/webapp/static-files</span><br><span class="line">export APP_CERT=/home/webapp/pki/server.crt</span><br><span class="line">export APP_KEY=/home/webapp/pki/server.pem</span><br><span class="line">su webapp -c &quot;/usr/local/bin/webapp&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修复证书权限问题</span></span><br><span class="line">chown -R webapp:webapp /home/webapp/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加 hosts</span></span><br><span class="line">echo &quot;127.0.0.1 webapp&quot; &gt;&gt; /etc/hosts</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查指令</span></span><br><span class="line">curl https://webapp:7000/users.html</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修复 SSL certificate problem: unable to get <span class="built_in">local</span> issuer certificate 的问题</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 参考: https://stackoverflow.com/questions/24611640/curl-60-ssl-certificate-problem-unable-to-get-local-issuer-certificate</span></span></span><br><span class="line">cp /home/webapp/pki/CA.crt /usr/local/share/ca-certificates</span><br><span class="line">chmod 644 /usr/local/share/ca-certificates/CA.crt</span><br><span class="line">update-ca-certificates</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决 open /home/webapp/static-files/users.html: permission denied 的问题</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 在防火墙配置中，添加 /home/webapp/static-files/ r 和 /home/webapp/static-files/* r</span></span></span><br><span class="line">vim /etc/apparmor.d/usr.local.bin.webapp</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 更新配置到内核中</span></span></span><br><span class="line">apparmor_parser -r /etc/apparmor.d/usr.local.bin.webapp</span><br></pre></td></tr></table></figure><!--[使用 AppArmor 限制容器对资源的访问](https://kubernetes.io/zh-cn/docs/tutorials/security/apparmor/)[AppArmor相关各脚本和服务解析（2）](https://blog.csdn.net/phmatthaus/article/details/130863424)[How do you add a certificate authority (CA) to Ubuntu?](https://superuser.com/questions/437330/how-do-you-add-a-certificate-authority-ca-to-ubuntu)--><h3 id="【postgresql】“Helsingor”-The-first-walls-of-postgres-physical-replication"><a href="#【postgresql】“Helsingor”-The-first-walls-of-postgres-physical-replication" class="headerlink" title="【postgresql】“Helsingør”: The first walls of postgres physical replication"></a>【postgresql】<a href="https://sadservers.com/scenario/helsingor">“Helsingør”: The first walls of postgres physical replication</a></h3><p><img src="/2024/01/17/sadserver-intro/32.png" alt="题目"></p><h4 id="题意-26"><a href="#题意-26" class="headerlink" title="题意"></a>题意</h4><p>本地通过 docker compose 启动了 postgresql，agent/check.sh 也就是检查答案的脚本中，将会先确认备库和主库的同步是否正常。但是目前备库启动失败了，需要找到原因并解决</p><p>扩展: <a href="https://stackoverflow.com/questions/8466223/reuse-a-hash-in-yaml/9197237#9197237">yaml 中复用内容的写法（&amp;）</a></p><h4 id="相关指令-27"><a href="#相关指令-27" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看节点状态</span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看日志</span></span><br><span class="line">docker logs 98e1b8d4a341</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启 compose</span></span><br><span class="line">docker compose down --volumes</span><br><span class="line">docker compose up -d</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 强制重建</span></span></span><br><span class="line">docker compose up -d --force-recreate</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改配置</span></span><br><span class="line">vim postgres/replica/postgres.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 批量修复配置</span></span></span><br><span class="line">sed -i &quot;s/max_connections = 80/max_connections = 100/g&quot; postgres/replica/postgres.conf</span><br><span class="line">sed -i &quot;s/max_worker_processes = 4/max_worker_processes = 8/g&quot; postgres/replica/postgres.conf</span><br><span class="line">sed -i &quot;s/max_wal_senders = 5/max_wal_senders = 10/g&quot; postgres/replica/postgres.conf</span><br><span class="line">sed -i &quot;s/max_locks_per_transaction = 32/max_locks_per_transaction = 64/g&quot; postgres/replica/postgres.conf</span><br></pre></td></tr></table></figure><!--# 查看从库数据docker compose exec postgres-db-replica psql -U helsingor -d helsingor -tc "select person_id from users order by person_id desc limit 1;"# docker compose exec postgres-db-master psql -U helsingor -d helsingor -tc "insert into users (first_name, last_name, age, city, os) values ('Will', 'Smith', '55', 'Philadelphia', 'MacOS')"docker compose exec postgres-db-replica psql -U helsingor -d helsingor -tc "select person_id from users order by person_id desc limit 1;"--><h3 id="【WSGI】“Bekasi”-Supervisor-is-still-around"><a href="#【WSGI】“Bekasi”-Supervisor-is-still-around" class="headerlink" title="【WSGI】“Bekasi”: Supervisor is still around"></a>【WSGI】<a href="https://sadservers.com/scenario/bekasi">“Bekasi”: Supervisor is still around</a></h3><p><img src="/2024/01/17/sadserver-intro/33.png" alt="题目"></p><h4 id="题意-27"><a href="#题意-27" class="headerlink" title="题意"></a>题意</h4><p>本地通过 uwsgi 启动了一个 https 服务，但通过 curl -k <a href="https://bekasi/">https://bekasi</a> 调用失败</p><p>本题思路是先确认 uwsgi 的部署方式，再确认如何修改它的部署配置，最后重启</p><h4 id="相关指令-28"><a href="#相关指令-28" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 调用服务</span></span><br><span class="line">curl -k https://bekasi</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 uwsgi 进程</span></span><br><span class="line">ps -ef | grep uwsgi</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看后台逻辑</span></span><br><span class="line">cat bekasi/bekasi.py</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 修改 supervisor 启动 uwsgi 配置</span></span></span><br><span class="line">vim /etc/supervisor/conf.d/uwsgi.conf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重载配置并重启服务</span></span><br><span class="line">sudo supervisorctl reload</span><br></pre></td></tr></table></figure><!--cat /etc/supervisor/conf.d/uwsgi.confcat /usr/lib/systemd/system/supervisor.servicesystemctl restart supervisor# vim bekasi/bekasi.inienv             = BEKASI_USER=adminenv             = BEKASI_SERVER=bekasi.sadservers.com# vim /etc/supervisor/conf.d/uwsgi.confenvironment=BEKASI_USER=admin,BEKASI_SERVER=bekasi.sadservers.com# 重启 supervisorsystemctl restart supervisor# 修改 uwsgi 后台服务配置vim bekasi/bekasi.ini# （会被 supervisor 自动拉起）ps -ef | grep "uwsgi" | grep -v grep | awk '{print $2}' | xargs kill -9--><h3 id="【nginx】“Depok”-Nginx-with-Brotli"><a href="#【nginx】“Depok”-Nginx-with-Brotli" class="headerlink" title="【nginx】“Depok”: Nginx with Brotli"></a>【nginx】<a href="https://sadservers.com/scenario/depok">“Depok”: Nginx with Brotli</a></h3><p><img src="/2024/01/17/sadserver-intro/34.png" alt="题目"></p><h4 id="题意-28"><a href="#题意-28" class="headerlink" title="题意"></a>题意</h4><p><a href="https://github.com/google/ngx_brotli">brotli</a> 是 是 Google 在 2015 年 9 月推出的一种压缩算法，使用通用的 LZ77 无损压缩算法、Huffman 编码和二阶上下文建模（2nd order context modelling）的特定组合，旨在进一步提高压缩比</p><p>部署在本地的 nginx 服务目前还不支持 brotli 压缩算法，需要通过 brotli 源码安装插件</p><p>本题主要考察 nginx 插件的安装方法</p><p>参考: <a href="https://juejin.cn/post/7031471867609546759">CentOS 8 安装并加载 Nginx 模组 ngx_brotli 然后启用 brotli 压缩</a></p><p><a href="https://ubuntu.com/server/docs/how-to-use-nginx-modules">How to use nginx modules</a></p><h4 id="相关指令-29"><a href="#相关指令-29" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 调用 nginx 并指定编码为 br</span></span><br><span class="line">curl -H &quot;Accept-Encoding: br&quot; -I http://localhost</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译 brotli 插件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 步骤参考官方仓库 https://github.com/google/ngx_brotli</span></span></span><br><span class="line">cd /home/admin/ngx_brotli/deps/brotli</span><br><span class="line">mkdir out</span><br><span class="line">cd out</span><br><span class="line">cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DCMAKE_C_FLAGS=&quot;-Ofast -m64 -march=native -mtune=native -flto -funroll-loops -ffunction-sections -fdata-sections -Wl,--gc-sections&quot; -DCMAKE_CXX_FLAGS=&quot;-Ofast -m64 -march=native -mtune=native -flto -funroll-loops -ffunction-sections -fdata-sections -Wl,--gc-sections&quot; -DCMAKE_INSTALL_PREFIX=./installed ..</span><br><span class="line">cmake --build . --config Release --target brotlienc</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新编译 nginx 并链接 brotli</span></span><br><span class="line">cd /home/admin/nginx</span><br><span class="line">./configure --with-compat --add-dynamic-module=../ngx_brotli</span><br><span class="line">make modules</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝编译后产生的链接文件</span></span><br><span class="line">cp objs/ngx_http_brotli_filter_module.so /usr/lib/nginx/modules/</span><br><span class="line">cp objs/ngx_http_brotli_static_module.so /usr/lib/nginx/modules/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># vim /etc/nginx/modules-available/50-ngx-http-brotli.conf</span></span></span><br><span class="line">load_module modules/ngx_http_brotli_filter_module.so;</span><br><span class="line">load_module modules/ngx_http_brotli_static_module.so;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启 brotli 插件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># vim /etc/nginx/sites-enabled/default</span></span></span><br><span class="line">server &#123;</span><br><span class="line">brotli on;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重载 nginx 配置</span></span><br><span class="line">sudo systemctl reload nginx</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启 nginx</span></span><br><span class="line">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure><!-- 参考:[http响应Header：Content-Encoding=br怎么办？](https://blog.csdn.net/lrcxl/article/details/128416117)--><h3 id="【linux】“Tukaani”-XZ-LZMA-Library-Compromised"><a href="#【linux】“Tukaani”-XZ-LZMA-Library-Compromised" class="headerlink" title="【linux】“Tukaani”: XZ LZMA Library Compromised"></a>【linux】<a href="https://sadservers.com/scenario/tukaani">“Tukaani”: XZ LZMA Library Compromised</a></h3><p><img src="/2024/01/17/sadserver-intro/35.png" alt="题目"></p><h4 id="题意-29"><a href="#题意-29" class="headerlink" title="题意"></a>题意</h4><p>liblzma 是一个用于数据压缩的库，提供对 LZMA（Lempel-Ziv-Markov chain algorithm）和 XZ 压缩格式的支持</p><p>正常情况下本地服务需要加载的是 /usr/lib/x86_64-linux-gnu/liblzma.so.5.2.5，但通过 sudo lsof | grep liblzma.so.5 可以看到很多进程都加载了 /opt/.trash/liblzma.so.5，需要解决这个问题</p><p>本题主要考察预加载库的设置（LD_PRELOAD）</p><h4 id="相关指令-30"><a href="#相关指令-30" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看 liblzma 相关进程</span></span><br><span class="line">lsof | grep liblzma.so.5</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除无效库</span></span><br><span class="line">rm /opt/.trash/liblzma.so.5</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有动态链接库之前预加载的库配置</span></span><br><span class="line">vim /etc/ld.so.preload</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启节点</span></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h2 id="困难"><a href="#困难" class="headerlink" title="困难"></a>困难</h2><p>提醒: 困难的题目似乎登录节点后默认在根目录，需要记得切换到 /home/admin 才能看到题目提供的文件</p><h3 id="【linux】“Jakarta”-it’s-always-DNS"><a href="#【linux】“Jakarta”-it’s-always-DNS" class="headerlink" title="【linux】“Jakarta”: it’s always DNS."></a>【linux】<a href="https://sadservers.com/scenario/jakarta">“Jakarta”: it’s always DNS.</a></h3><p><img src="/2024/01/17/sadserver-intro/36.png" alt="题目"></p><h4 id="题意-30"><a href="#题意-30" class="headerlink" title="题意"></a>题意</h4><p>本机无法 ping 通 google.com，直接 ping 返回的是 Name or service not known，</p><p>本题是以前 sadserver 的实验题，所以虽然放在困难部分，但只要修复 /etc/nsswitch.conf 配置即可解决</p><p><a href="https://www.cnblogs.com/emilyyoucan/articles/8118173.html">参考-Linux系统解析域名的先后顺序files（/etc/hosts）OR dns（/etc/resolv.conf）</a></p><h4 id="相关指令-31"><a href="#相关指令-31" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看并修复域名解析优先级配置</span></span><br><span class="line">vim /etc/nsswitch.conf</span><br><span class="line">sed -i &quot;s/hosts:.*/hosts:          files dns/g&quot; /etc/nsswitch.conf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查指令</span></span><br><span class="line">ping google.com</span><br></pre></td></tr></table></figure><h3 id="【wordpress、docker】“Bern”-Docker-web-container-can’t-connect-to-db-container"><a href="#【wordpress、docker】“Bern”-Docker-web-container-can’t-connect-to-db-container" class="headerlink" title="【wordpress、docker】“Bern”: Docker web container can’t connect to db container."></a>【wordpress、docker】<a href="https://sadservers.com/scenario/bern">“Bern”: Docker web container can’t connect to db container.</a></h3><p><img src="/2024/01/17/sadserver-intro/37.png" alt="题目"></p><h4 id="题意-31"><a href="#题意-31" class="headerlink" title="题意"></a>题意</h4><p>本地通过 docker 启动了 <a href="https://wordpress.com/zh-cn">wordpress</a> 和 mariadb 两个容器，mariadb 数据库状态正常，但 wordpress 服务无法访问 mariadb，需要解决这个问题</p><h4 id="相关指令-32"><a href="#相关指令-32" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看 wordpress 接口返回结果</span></span><br><span class="line">curl -s localhost:80 |tail -4</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查 wordpress 容器访问域名 <span class="string">&quot;mysql&quot;</span> 的结果</span></span><br><span class="line">docker exec wordpress mysqladmin -h mysql -u root -ppassword --connect-timeout 2 ping</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 wordpress 容器的详细信息（ 主要看环境变量 Env ）</span></span><br><span class="line">docker inspect 6ffb084b515c</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 wordpress 容器中设置的连接数据库相关的环境变量</span></span><br><span class="line">docker exec wordpress env | grep WORDPRESS_DB_</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 wordpress 配置文件中，和连接数据库相关的环境变量</span></span><br><span class="line">grep WORDPRESS_DB_ /home/admin/html/wp-config.php</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除容器</span></span><br><span class="line">docker rm 6ffb084b515c</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动新的 设置了域名映射的 wordpress 容器</span></span><br><span class="line">docker run -it -p 80:80 -e WORDPRESS_DB_PASSWORD=password -e WORDPRESS_DB_USER=root --add-host mysql:172.17.0.1 --name wordpress -d wordpress:sad</span><br></pre></td></tr></table></figure><!--# 查看重启脚本cat /usr/local/bin/docker-entrypoint.sh# 重启 wordpressps -ef | grep 'apache2' | grep -v grep | awk '{print $2}' | xargs --no-run-if-empty kill -9/usr/local/bin/docker-entrypoint.sh apache2-foreground# 设置 wordpress 数据库配置相关的环境变量## export WORDPRESS_DB_PASSWORD=password## export WORDPRESS_DB_USER=rootexport WORDPRESS_DB_HOST=172.17.0.1(容器连接宿主机的地址)# 修改 wordpress 配置文件vim ./wp-config.php## 172.17.0.1: 容器连接宿主机的地址## sed -i "s/'WORDPRESS_DB_HOST', 'mysql'/'WORDPRESS_DB_HOST', '172.17.0.1'/g" wp-config.php# hosts 中设置域名和ip映射echo "172.17.0.1 mysql" >> /etc/hosts# 重启容器docker restart 6ffb084b515c--><h3 id="【推荐】【linux】“Karakorum”-WTFIT-–-What-The-Fun-Is-This"><a href="#【推荐】【linux】“Karakorum”-WTFIT-–-What-The-Fun-Is-This" class="headerlink" title="【推荐】【linux】“Karakorum”: WTFIT – What The Fun Is This?"></a>【推荐】【linux】<a href="https://sadservers.com/scenario/karakorum">“Karakorum”: WTFIT – What The Fun Is This?</a></h3><p><img src="/2024/01/17/sadserver-intro/38.png" alt="题目"></p><h4 id="题意-32"><a href="#题意-32" class="headerlink" title="题意"></a>题意</h4><p>/home/admin/wtfit 文件是一个需要连接某个地址才能启动的服务。但首先它因为没有可执行权限而无法执行，其次它实际执行也有报错，需要给它添加可执行权限，并解决运行文件使得其能够正常启动</p><h4 id="相关指令-33"><a href="#相关指令-33" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> chmod 添加可执行权限</span></span><br><span class="line">chmod +x /home/admin/wtfit</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过 perl 脚本调用 chmod</span></span><br><span class="line">perl -e &#x27;chmod 0755, &quot;/usr/bin/chmod&quot;&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过 ld-linux （动态链接器） 调用 chmod</span></span><br><span class="line">/lib64/ld-linux-x86-64.so.2 /usr/bin/chmod +x /usr/bin/chmod</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行二进制文件，并跟踪进程堆栈</span></span><br><span class="line">strace /home/admin/wtfit</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过 python 快速启动一个监听端口 7777 http 服务端</span></span><br><span class="line">python3 -m http.server 7777 &amp;</span><br></pre></td></tr></table></figure><h3 id="【kubernetes】“Singara”-Docker-and-Kubernetes-web-app-not-working"><a href="#【kubernetes】“Singara”-Docker-and-Kubernetes-web-app-not-working" class="headerlink" title="【kubernetes】“Singara”: Docker and Kubernetes web app not working."></a>【kubernetes】<a href="https://sadservers.com/scenario/singara">“Singara”: Docker and Kubernetes web app not working.</a></h3><p><img src="/2024/01/17/sadserver-intro/39.png" alt="题目"></p><h4 id="题意-33"><a href="#题意-33" class="headerlink" title="题意"></a>题意</h4><p>本地通过 <a href="https://github.com/k3s-io/k3s">k3s</a> 启动了一个轻量级 kubernetes 集群，并在 /home/admin/deployment.yml 中定义了 webapp 这个 web 服务，但是容器启动有问题，通过 curl -i localhost:8888 无法调通，需要解决</p><h4 id="相关指令-34"><a href="#相关指令-34" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 获取所有 pod</span></span><br><span class="line">kubectl get pod -A</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取 pod 的描述信息</span></span><br><span class="line">kubectl describe pod webapp-deployment-666b67994b-5sffz -n web</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动 register 镜像仓库</span></span><br><span class="line">docker run -d -p 5000:5000 registry:2</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交镜像 webapp 到本地镜像仓库</span></span><br><span class="line">docker tag webapp localhost:5000/webapp</span><br><span class="line">docker push localhost:5000/webapp</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改 deployment 并重新启动</span></span><br><span class="line">kubectl delete deployment webapp-deployment -n web</span><br><span class="line">vim /home/admin/deployment.yml</span><br><span class="line">kubectl apply -f /home/admin/deployment.yml</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 开放端口</span></span><br><span class="line">kubectl port-forward deployments/webapp-deployment 8888 -n web &amp; </span><br></pre></td></tr></table></figure><h3 id="【postgresql】“Hong-Kong”-can’t-write-data-into-database"><a href="#【postgresql】“Hong-Kong”-can’t-write-data-into-database" class="headerlink" title="【postgresql】“Hong-Kong”: can’t write data into database."></a>【postgresql】<a href="https://sadservers.com/scenario/hongkong">“Hong-Kong”: can’t write data into database.</a></h3><p><img src="/2024/01/17/sadserver-intro/40.png" alt="题目"></p><h4 id="题意-34"><a href="#题意-34" class="headerlink" title="题意"></a>题意</h4><p>本地启动了 postgresql 但无法正常连接和插入数据，需要从 pg 的存储目录配置去分析原因</p><h4 id="相关指令-35"><a href="#相关指令-35" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 检查指令: 向 pg 中插入一条数据</span></span><br><span class="line">sudo -u postgres psql -c &quot;insert into persons(name) values (&#x27;jane smith&#x27;);&quot; -d dt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 手动启动 pg server 并确认报错</span></span><br><span class="line">pg_ctlcluster 14 main restart -m fast</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看配置中的存储目录</span></span><br><span class="line">cat /etc/postgresql/14/main/postgresql.conf | grep data_directory</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建数据目录并初始化</span></span><br><span class="line">mkdir -p /opt/pgdata</span><br><span class="line">chown -R postgres:postgres /opt/pgdata</span><br><span class="line">su postgres -c &quot;/usr/lib/postgresql/14/bin/initdb -D /opt/pgdata/main&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启 pgsql</span></span><br><span class="line">systemctl restart postgresql</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从日志确认启动启动是否正常</span></span><br><span class="line">tail -f /var/log/postgresql/postgresql-14-main.log</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建库表</span></span><br><span class="line">sudo -u postgres psql -c &quot;create database dt&quot;</span><br><span class="line">sudo -u postgres psql -c &quot;CREATE TABLE persons(name varchar(100))&quot; -d dt</span><br></pre></td></tr></table></figure><h3 id="【推荐】【linux】“Pokhara”-SSH-and-other-sshenanigans"><a href="#【推荐】【linux】“Pokhara”-SSH-and-other-sshenanigans" class="headerlink" title="【推荐】【linux】“Pokhara”: SSH and other sshenanigans"></a>【推荐】【linux】<a href="https://sadservers.com/scenario/pokhara">“Pokhara”: SSH and other sshenanigans</a></h3><p><img src="/2024/01/17/sadserver-intro/41.png" alt="题目"></p><h4 id="题意-35"><a href="#题意-35" class="headerlink" title="题意"></a>题意</h4><p>本机启动了 sshd，且 client 用户下已经设置了 ssh key ， 期望是可以通过 ssh client@localhost 免密访问本机，但是目前会失败，找到账号和 ssh 相关的问题并解决</p><p>注: /home/client/.ssh/authorized_keys 中已经添加了公钥</p><p>本题涉及面很广，包括 ssh 配置、linux 用户配置、用户可用系统资源配置等，但整体都是围绕 su client 和 ssh client@localhost 失败来解决的，建议实际解题时，通过这两个指令执行的报错一步步解决</p><h4 id="相关指令-36"><a href="#相关指令-36" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 切换 client 用户</span></span><br><span class="line">su client</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决 <span class="string">&quot;Your account has expired; please contact your system administrator.&quot;</span> 问题</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 查看 client 用户的过期时间</span></span></span><br><span class="line">chage -l client</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 设置 client 用户过期时间</span></span></span><br><span class="line">chage -E 2024-12-31 client</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决 <span class="string">&quot;su: failed to execute /usr/sbin/nologin: Resource temporarily unavailable&quot;</span> 问题</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 查看用户登录信息 （登录脚本）</span></span></span><br><span class="line">lslogins client</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或: cat /etc/passwd | grep client</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置用户登录 shell 为 /bin/bash</span></span><br><span class="line">usermod --shell /bin/bash client</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或: sed -i <span class="string">&quot;s#/home/client:/usr/sbin/nologin#/home/client:/bin/bash#g&quot;</span> /etc/passwd</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查指令: ssh 到 client 用户并执行 <span class="built_in">pwd</span></span></span><br><span class="line">ssh -v client@localhost &quot;pwd&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 解决 &quot;su: failed to execute /usr/sbin/nologin: Resource temporarily unavailable&quot; 问题</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># https://access.redhat.com/solutions/30316</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 查看文件描述符配置 （需要修改）</span></span></span><br><span class="line">vim /etc/security/limits.conf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决 ssh client 问题</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># https://askubuntu.com/a/343217</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># root 用户下生成ssh密钥对，并把公钥写入 client 的 authorized_keys 中</span></span></span><br><span class="line">ssh-keygen</span><br><span class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; /home/client/.ssh/authorized_keys</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 清空 known_hosts</span></span></span><br><span class="line">echo &quot;&quot; &gt; /home/client/.ssh/known_hosts</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修正私钥文件权限</span></span><br><span class="line">chmod 600 /home/client/.ssh/*</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除 ssh 错误配置并重启 sshd</span></span><br><span class="line">rm /etc/ssh/sshd_config.d/sad.conf</span><br><span class="line">systemctl restart sshd</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 最后，切回 admin 用户并执行 ssh，使得 known hosts 被刷新</span></span><br><span class="line">sudo -u client ssh client@localhost &#x27;pwd&#x27;</span><br></pre></td></tr></table></figure><h3 id="【linux】“Roseau”-Hack-a-Web-Server"><a href="#【linux】“Roseau”-Hack-a-Web-Server" class="headerlink" title="【linux】“Roseau”: Hack a Web Server"></a>【linux】<a href="https://sadservers.com/scenario/roseau">“Roseau”: Hack a Web Server</a></h3><p><img src="/2024/01/17/sadserver-intro/42.png" alt="题目"></p><h4 id="题意-36"><a href="#题意-36" class="headerlink" title="题意"></a>题意</h4><p>在本机的 apache web 服务器上存有一个密码文件，通过 zip 方式加密压缩。这个压缩文件通过 admin 用户无法直接访问，需要调用 apache 接口拿到，然而 apache 接口也是需要密码（配置: AuthUserFile）。因此需要通过密码破解工具 john 分别破解 apache 的密码 以及 压缩文件</p><p>本题主要是介绍暴力破解工具 <a href="https://github.com/openwall/john">john</a> 的使用。它的原理简单来说是通过 预先准备的词典、哈希字典，对特定加密方式进行特定的暴力破解</p><p><a href="https://zhuanlan.zhihu.com/p/395718068">参考-使用John the ripper破解密码</a></p><h4 id="相关指令-37"><a href="#相关指令-37" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看 httpd 配置，包括根路径和认证方式</span></span><br><span class="line">cat /etc/apache2/sites-enabled/000-default.conf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 apache 根路径下的压缩文件</span></span><br><span class="line">ls -l /var/www/html</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 破解 httpd 密码</span></span><br><span class="line">/home/admin/john/run/john /etc/apache2/.htpasswd</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载 webfile 文件</span></span><br><span class="line">curl localhost/webfile -u &quot;carlos:(这里替换成httpd密码)&quot; --output secret</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解密 secret （格式: zip） 密码</span></span><br><span class="line">/home/admin/john/run/zip2john secret &gt; zip.hash</span><br><span class="line">/home/admin/john/run/john zip.hash</span><br></pre></td></tr></table></figure><!--curl localhost/webfile -u "carlos:chalet" --output secretunzip -p andes--><h3 id="【java、linux】“Belo-Horizonte”-A-Java-Enigma"><a href="#【java、linux】“Belo-Horizonte”-A-Java-Enigma" class="headerlink" title="【java、linux】“Belo-Horizonte”: A Java Enigma"></a>【java、linux】<a href="https://sadservers.com/scenario/belo-horizonte">“Belo-Horizonte”: A Java Enigma</a></h3><p><img src="/2024/01/17/sadserver-intro/43.png" alt="题目"></p><h4 id="题意-37"><a href="#题意-37" class="headerlink" title="题意"></a>题意</h4><p>Sad.class 是一段 java 程序，成功执行后，会打印一段题目需要的密码，但它目前是无法执行的，需要通过反编译等方法解决</p><p><a href="https://blog.csdn.net/yu20190429/article/details/109050769">参考: 使用fallocate命令创建swap分区</a></p><h4 id="相关指令-38"><a href="#相关指令-38" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 运行 class</span></span><br><span class="line">java Sad.class</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 /usr/bin/java 指向的实际的文件</span></span><br><span class="line">readlink -f /usr/bin/java</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看本机安装的其他版本 java</span></span><br><span class="line">ls -l /usr/lib/jvm | grep java</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将 /usr/bin/java 指向新的地址</span></span><br><span class="line">sudo rm /usr/bin/java</span><br><span class="line">sudo ln -s /usr/lib/jvm/java-1.17.0-openjdk-amd64/bin/java /usr/bin/java</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 反编译 Sad.class</span></span><br><span class="line">javap -c -l Sad.class</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重命名</span></span><br><span class="line">mv Sad.class VerySad.class</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看本地内存（总剩余内存只有 200m 左右，不足以运行进程）</span></span><br><span class="line">free -m</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看本地磁盘（可以看到至少有4G空间）</span></span><br><span class="line">df -h</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 以本地磁盘申请交换空间</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 申请1G空间</span></span></span><br><span class="line">sudo fallocate -l 1G /swapfile</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 设置文件权限为600</span></span></span><br><span class="line">sudo chmod 600 /swapfile</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 将文件设置为交换空间</span></span></span><br><span class="line">sudo mkswap /swapfile</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 启用交换文件</span></span></span><br><span class="line">sudo swapon /swapfile</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 查看交换空间</span></span></span><br><span class="line">sudo swapon --show</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 再次查看内存</span></span></span><br><span class="line">free -m</span><br></pre></td></tr></table></figure><h3 id="【rabbitmq、docker】“Chennai”-Pull-a-Rabbit-from-a-Hat"><a href="#【rabbitmq、docker】“Chennai”-Pull-a-Rabbit-from-a-Hat" class="headerlink" title="【rabbitmq、docker】“Chennai”: Pull a Rabbit from a Hat"></a>【rabbitmq、docker】<a href="https://sadservers.com/scenario/chennai">“Chennai”: Pull a Rabbit from a Hat</a></h3><p><img src="/2024/01/17/sadserver-intro/44.png" alt="题目"></p><h4 id="题意-38"><a href="#题意-38" class="headerlink" title="题意"></a>题意</h4><p>在本地的 rabbitmq-cluster-docker-master 目录下，提供了启动 rabbitmq 三节点集群的 compose 仓库（参考这个 <a href="https://github.com/serkodev/rabbitmq-cluster-docker">serkodev/rabbitmq-cluster-docker</a> ），需要正常启动集群，并先后运行 <code>python3 ~/producer.py hello-lwc</code> 和 <code>python3 ~/consumer.py</code>，完成一个完整的生产和消费过程</p><p>注意: 虽然 consumer.py 和 producer.py 中确实有一些连接参数不太一致，但题目要求不能修改这两个代码文件，否则校验答案会失败，因此只能通过设置环境变量的方式来解决</p><h4 id="相关指令-39"><a href="#相关指令-39" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 重启 rabbitmq 集群</span></span><br><span class="line">docker compose down --volumes</span><br><span class="line">docker compose up -d</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改启动脚本最后一段，tail 之前创建一个空日志文件，解决 tail 执行失败导致卡住的问题</span></span><br><span class="line">touch /var/log/rabbitmq/empty.log</span><br><span class="line">vim cluster-entrypoint.sh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 .env 文件（ compose 默认使用的环境变量 ），并将其修改为 consumer.py 中写死的用户名和密码</span></span><br><span class="line">cat ./.env</span><br><span class="line">export RABBITMQ_DEFAULT_USER=username</span><br><span class="line">export RABBITMQ_DEFAULT_PASS=password</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置环境变量并触发生产者</span></span><br><span class="line">export RMQ_QUEUE=hello</span><br><span class="line">export RMQ_USER=username</span><br><span class="line">export RMQ_PASSWORD=password</span><br><span class="line">python3 ~/producer.py hello-lwc</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 触发消费者</span></span><br><span class="line">python3 ~/consumer.py</span><br></pre></td></tr></table></figure><!--# 添加用户docker exec rabbitmq-cluster-docker-master-rabbitmq1-1 rabbitmqctl add_user username passworddocker exec rabbitmq-cluster-docker-master-rabbitmq1-1 rabbitmqctl set_permissions -p / username ".*" ".*" ".*"docker exec rabbitmq-cluster-docker-master-rabbitmq1-1 ls -l /var/log/rabbitmq/docker exec rabbitmq-cluster-docker-master-rabbitmq1-1 find / -name 'rabbitmq.conf'log.dir = /var/log/rabbitmq--><h3 id="【git、linux】“Monaco”-Disappearing-Trick"><a href="#【git、linux】“Monaco”-Disappearing-Trick" class="headerlink" title="【git、linux】“Monaco”: Disappearing Trick"></a>【git、linux】<a href="https://sadservers.com/scenario/monaco">“Monaco”: Disappearing Trick</a></h3><p><img src="/2024/01/17/sadserver-intro/45.png" alt="题目"></p><h4 id="题意-39"><a href="#题意-39" class="headerlink" title="题意"></a>题意</h4><p>本地 5000 端口上启动了一个 web 服务，通过 post 方法指定密码调用它的接口后，会返回一个密钥，需要把这个密钥写入 mysolution 文件中</p><p>根据提示，当前路径是一个代码工作路径，“那么”（虽然感觉这个推理有点牵强）可以推测是一个 git 路径，但是本地并没有代码，可以通过 git 指令恢复 webserver 的代码，确认其需要的密码是在哪个环境变量中定义的，并在已启动的 webserver 进程中，找到对应的环境变量</p><h4 id="相关指令-40"><a href="#相关指令-40" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 恢复 git 项目（即：重新拉取代码）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 显示目前文件差异</span></span></span><br><span class="line">git status</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 恢复指定文件</span></span></span><br><span class="line">git restore webserver_v1.py</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 或: 恢复当前路径下的所有文件</span></span></span><br><span class="line">git restore .</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 webserver 逻辑</span></span><br><span class="line">cat webserver_v1.py</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查找 webserver_v1.py 配置的密码相关的环境变量，在已启动的 webserver 服务中定义的值</span></span><br><span class="line">ps -ef | grep webserver.py | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27; | xargs -I &#123;&#125; bash -c &quot;cat /proc/&#123;&#125;/environ&quot; | tr &#x27;\000&#x27; &#x27;\n&#x27; | grep &quot;(环境变量名)&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 访问 webserver 并指定密码，并将得到的 secret 写入 mysolution 文件中</span></span><br><span class="line">secret=`curl -X POST localhost:5000 --data-raw &quot;password=(上一步得到的密码)&quot; | sed &#x27;s/.* //g&#x27;`</span><br><span class="line">echo &quot;$secret&quot; &gt; ~/mysolution</span><br></pre></td></tr></table></figure><h3 id="【docker】“Florence”-Database-Migration-Hell"><a href="#【docker】“Florence”-Database-Migration-Hell" class="headerlink" title="【docker】“Florence”: Database Migration Hell"></a>【docker】<a href="https://sadservers.com/scenario/florence">“Florence”: Database Migration Hell</a></h3><p><img src="/2024/01/17/sadserver-intro/46.png" alt="题目"></p><h4 id="题意-40"><a href="#题意-40" class="headerlink" title="题意"></a>题意</h4><p>/home/admin/app/docker-compose.yml 中定义了一个 nginx + nodejs + postgresql 的后台服务，其中 pgsql 作为数据库；api 服务进行数据库访问用户的初始化，以及提供接口；api_aggregator 对 pgsql 进行访问权限验证；nginx 服务提供代理和 https 接口。正常的启动和初始化顺序为: pgsql -&gt; d</p><p>现在这些服务的启动和访问有问题，需要解决</p><h4 id="相关指令-41"><a href="#相关指令-41" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看 compose 定义</span></span><br><span class="line">cat ~/app/docker-compose.yml</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看并修改 postgresql Dockerfile，以解决 postgresql 容器日志中的 <span class="string">&quot;initdb: cannot be run as root&quot;</span> 问题</span></span><br><span class="line">vim ~/app/postgresql/Dockerfile</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启容器并重新构建镜像</span></span><br><span class="line">docker compose down --volumes</span><br><span class="line">docker compose up --build -d</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加 解决 api_aggregator 连接 pg 失败的问题</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 第14行添加内容</span></span></span><br><span class="line">sed -i &quot;14iecho \&quot;host all api_aggregator 0.0.0.0/0 md5\&quot; &gt;&gt; /var/lib/postgresql/data/pg_hba.conf&quot; ~/app/postgresql/entrypoint.sh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决 api_aggregator 容器日志提示连接 pgsql 失败问题</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 查看 app 服务启动时对 pgsql 的 migrations 逻辑(go-pg/migrations.NewCollection.DiscoverSQLMigrations</span></span></span><br><span class="line">cat ~/app/api/pkg/db/db.go</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 查看 api_aggregator 服务所用的账号和密码</span></span></span><br><span class="line">cat ~/app/docker-compose.yml | grep DATABASE_URL</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 计算密码的 md5 值</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 注意计算方式: 密码和用户名一起计算，参考源码 https://github.com/postgres/postgres/blob/REL_17_STABLE/src/interfaces/libpq/fe-auth.c#L732</span></span></span><br><span class="line">echo -n (上一步得到的密码)(上一步得到的用户名) | md5sum | awk &#x27;&#123;print $1&#125;&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 创建 api_aggregator 访问需要的用户</span></span></span><br><span class="line">sed -i &quot;s/CREATE ROLE api_aggregator .*/CREATE ROLE api_aggregator LOGIN PASSWORD &#x27;(上一步计算得到的md5值)&#x27;;/g&quot; ~/app/api/migrations/1_users.up.sql</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># api 服务中添加适当 sleep ，防止执行 migration 时 pgsql 还未启动导致报错</span></span></span><br><span class="line">sed -i &quot;10i\&quot;time\&quot;&quot; ~/app/api/server.go</span><br><span class="line">sed -i &quot;14itime.Sleep(10 * time.Second)&quot; ~/app/api/server.go</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># api_aggregator 服务中添加适当 sleep，原因同上</span></span></span><br><span class="line">sed -i &quot;s#CMD node.*#CMD sleep 10; node /usr/src/app/index.js#g&quot; ~/app/api_aggregator/Dockerfile</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 注: 截止到这一步，重启容器后4个容器应该状态都是正常的了</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将 sadserver.local 域名映射到本地(<span class="keyword">for</span> nginx)</span></span><br><span class="line">echo &quot;127.0.0.1 sadserver.local&quot; &gt;&gt; /etc/hosts</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新生成证书，解决证书过期问题: curl: (60) SSL certificate problem: certificate has expired</span></span><br><span class="line">openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/certs/sadserver.key -out /etc/nginx/certs/sadserver.crt -subj &quot;/C=CN/ST=SZ/L=NS/O=Internet/OU=Company/CN=sadserver.local&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启 nginx</span></span><br><span class="line">systemctl restart nginx</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证接口访问</span></span><br><span class="line">curl --cacert /etc/nginx/certs/sadserver.crt https://sadserver.local</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最近看了IT狂人这部剧，刚好想到，IT人平时的工作可能很杂，这里搞一点开发，那里做一点运维，甚至还没有程序那样有逻辑，但从外面来看，IT人确实是在做很多事情的，只是他们好像在一个锁上的礼物盒那样，不打开就不知道里面有什么</p><p>这部剧，和 sadserver 这个解题平台，都像是打开这个盒子的钥匙</p><!--整理完题目之余，就以一首适合夜晚的歌曲作为结束吧《little girl》--><!--不是所有 linux 指令都能经常用到，但没有一个指令是没有用的--><!--作者温馨提醒: 做完一道题之后最好及时关闭服务器，可以帮他省钱<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo shutdown -h now</span><br></pre></td></tr></table></figure><p>更新: 现在做完一道题后，只要 check 通过了，会自动关闭服务器。。</p><p>–&gt;</p><!------ 当前: 后续将这篇文章在 推 发，@ 一下，有点意思。。。有机会翻译成英文maybe I can translate it to english, when i am free...--><!--今天的听会歌: 此刻写本文在听的歌，也是身边枪迷给我的礼物--><!--后续发现的新题目: https://sadservers.com/scenario/luc-->]]></content>
    
    
    <summary type="html">sadserver 刷题记录</summary>
    
    
    
    <category term="操作系统" scheme="http://smiecj.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="linux" scheme="http://smiecj.github.io/tags/linux/"/>
    
    <category term="操作系统" scheme="http://smiecj.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="life" scheme="http://smiecj.github.io/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>互联网之100问</title>
    <link href="http://smiecj.github.io/2023/12/06/program-100-qas/"/>
    <id>http://smiecj.github.io/2023/12/06/program-100-qas/</id>
    <published>2023-12-05T16:00:00.000Z</published>
    <updated>2024-02-04T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/xGI0vGgaZhY0T9BS64U60A">本文公众号</a></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近看了一个娱乐节目，一位歌手接受主持人的100个问题采访。快问快答的模式，很快就看完了，大部分问题也都比较平常，感觉换作其他行业的人来回答也会很有意思</p><p>但是跳出娱乐圈，这种节目似乎在普通人身上看得很少，各行各业的打工人，考虑升学或求职的应届生，面临升学压力的初高中生，都有自己的压力</p><p>作为深处互联网行业的一份子，又是临近年底，我也深深感觉工作节奏一点都停不下来。而我们这行，总是在工作需求和学习充电中疲于奔波，给自己按下暂停键已经成了一种奢侈。我还能在工作之余接受这样的采访，之前是想都不敢想的</p><p>而就在一个再平常不过的周五，突然冒出的想法：既然没有节目，没有主持人，那就自己当这个主持人呗。工作稍微停一停，头脑风暴个100个问题出来，再转换角色，以放松的心情来回答这些问题，看看我现在在做什么，周围的人在做什么，平时又有什么有趣的事情之类的</p><p>这样的自问自答，好像也能很有趣，这就是本文的来源了</p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><h3 id="平时工作内容是什么"><a href="#平时工作内容是什么" class="headerlink" title="平时工作内容是什么"></a>平时工作内容是什么</h3><p>固定事情: 接老板派的活，tapd 上写写方案，动手写代码，本地做单元测试，登录容器平台发布<br>每周事项: 开周会，需求排期会，检查服务的监控情况<br>空闲时候: 设计、开发自己想做的项目</p><h3 id="工作节奏是什么样的"><a href="#工作节奏是什么样的" class="headerlink" title="工作节奏是什么样的"></a>工作节奏是什么样的</h3><p>最忙的时候根本停不下来，开不完的会，写不完的需求，回复不完的问题<br>可能两周左右才能有一天可以稍微划划水，但是开源社区不会划水，总有新东西等着去学</p><h3 id="手头的事真的做得完吗"><a href="#手头的事真的做得完吗" class="headerlink" title="手头的事真的做得完吗"></a>手头的事真的做得完吗</h3><p>当然做不完，手机的待办事项已经很久没看了。还有一堆书看不完，一堆语言新特性看不完，时不时就觉得自己是个fw</p><h3 id="年度目标一般能完成多少"><a href="#年度目标一般能完成多少" class="headerlink" title="年度目标一般能完成多少"></a>年度目标一般能完成多少</h3><p>正常的部分80%，吹牛的部分20%</p><h3 id="工作用的聊天软件是什么"><a href="#工作用的聊天软件是什么" class="headerlink" title="工作用的聊天软件是什么"></a>工作用的聊天软件是什么</h3><p>企业微信</p><h3 id="聊天置顶的都是哪些群"><a href="#聊天置顶的都是哪些群" class="headerlink" title="聊天置顶的都是哪些群"></a>聊天置顶的都是哪些群</h3><p>生产环境告警群。。</p><h3 id="工作中会接触到哪些角色"><a href="#工作中会接触到哪些角色" class="headerlink" title="工作中会接触到哪些角色"></a>工作中会接触到哪些角色</h3><p>老板（主管、组长，PL）、产品经理（PM）、其他开发小伙伴、测试、运维、安全</p><h3 id="哪个角色最好相处"><a href="#哪个角色最好相处" class="headerlink" title="哪个角色最好相处"></a>哪个角色最好相处</h3><p>测试，因为现在自己就是测试</p><h3 id="工作上最讨厌的事项是什么"><a href="#工作上最讨厌的事项是什么" class="headerlink" title="工作上最讨厌的事项是什么"></a>工作上最讨厌的事项是什么</h3><p>开一个小时的会议，自己发言只要5分钟，其他事情完全没关系</p><p>本来简简单单通过文档就能沟通清楚的事情，却要浪费大家的时间</p><h3 id="最难搞定的需求是什么样的"><a href="#最难搞定的需求是什么样的" class="headerlink" title="最难搞定的需求是什么样的"></a>最难搞定的需求是什么样的</h3><p>上层调用我服务的同事: 诶，这个接口加个参数透传过来，赶紧点，今晚就要。什么？你这个参数也要从别的地方来吗？我不管，你怎么写是你的事，我只管要数据，你赶紧搞别摸鱼了</p><p>（好像也不一定最难搞定，但是一定最浪费心情）</p><h3 id="见过的最复杂的系统"><a href="#见过的最复杂的系统" class="headerlink" title="见过的最复杂的系统"></a>见过的最复杂的系统</h3><p>需要10个人以上维护，而且没人说得清系统整体架构</p><p>最后大概率逃不了被新系统替换的命运</p><h3 id="什么事很重要，但又很容易忽略的"><a href="#什么事很重要，但又很容易忽略的" class="headerlink" title="什么事很重要，但又很容易忽略的"></a>什么事很重要，但又很容易忽略的</h3><p>代码检视</p><h3 id="一年大概写多少代码"><a href="#一年大概写多少代码" class="headerlink" title="一年大概写多少代码"></a>一年大概写多少代码</h3><p>去年写得不算多，甚至大部分还是提交到 github 的，大概就3w</p><p>但对大厂人来说，一年写个 8-10w 还是很正常（平均一天400行，很可观了）</p><h3 id="一天写多少行代码"><a href="#一天写多少行代码" class="headerlink" title="一天写多少行代码"></a>一天写多少行代码</h3><p>状态好的话一天写个1k行，开发一个小功能，开会和杂事多的时候也可能一行都写不了</p><h3 id="理想的工作环境"><a href="#理想的工作环境" class="headerlink" title="理想的工作环境"></a>理想的工作环境</h3><p>一张床，一个桌，一台 mac，窗外面向海风，屋后花园种菜，快慢生活的完美结合，无敌</p><h3 id="现在的工作环境"><a href="#现在的工作环境" class="headerlink" title="现在的工作环境"></a>现在的工作环境</h3><p>网吧位</p><p>看起来比网吧环境好，但公司配的电脑可比网吧差得远了</p><h3 id="推荐的学习和工作方法"><a href="#推荐的学习和工作方法" class="headerlink" title="推荐的学习和工作方法"></a>推荐的学习和工作方法</h3><p>三件套: 番茄钟 + 免打扰模式 + todo list</p><h3 id="你的工作签名是什么"><a href="#你的工作签名是什么" class="headerlink" title="你的工作签名是什么"></a>你的工作签名是什么</h3><p>“10:00-16:00 专心编程，请勿打扰”（ 然而现实情况是，稍微晚回信息，用户一个电话就打过来了 :) ）</p><h2 id="日常"><a href="#日常" class="headerlink" title="日常"></a>日常</h2><h3 id="除了程序员，想个词形容自己"><a href="#除了程序员，想个词形容自己" class="headerlink" title="除了程序员，想个词形容自己"></a>除了程序员，想个词形容自己</h3><p>代码的搬运工，简称搬砖的，哪个工地有活就去哪里搬砖，没项目了也就没饭吃了</p><h3 id="看到自己写的服务有-bug-第一反应是什么"><a href="#看到自己写的服务有-bug-第一反应是什么" class="headerlink" title="看到自己写的服务有 bug 第一反应是什么"></a>看到自己写的服务有 bug 第一反应是什么</h3><p>先别急，都在我的控制范围之中</p><h3 id="一天的工作状态变化"><a href="#一天的工作状态变化" class="headerlink" title="一天的工作状态变化"></a>一天的工作状态变化</h3><p>上午: 9点半多到公司，写点代码找找状态，差不多就该吃饭了，算是一天中最轻松的时候<br>下午: 2-4点状态最佳，赶紧多写点代码，中间被用户找，能推就往后推点<br>4-6点: 这段时间专门做杂事，疲惫感逐渐起来<br>而这时候一旦来个线上问题，或是和同事讨论方案有分歧，心情确实是容易爆炸<br>晚上: 加班的话，人可能还在敲键盘，意识早已在九霄云外了</p><h3 id="一天下来全身最累的地方"><a href="#一天下来全身最累的地方" class="headerlink" title="一天下来全身最累的地方"></a>一天下来全身最累的地方</h3><p>眼睛，肩膀，脑子</p><h3 id="在日常中会不会有什么“职业病”"><a href="#在日常中会不会有什么“职业病”" class="headerlink" title="在日常中会不会有什么“职业病”"></a>在日常中会不会有什么“职业病”</h3><p>去买水果，脑海里全是这种“伪代码”：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">如果 (有🍉) &#123;</span><br><span class="line">    买半个🍉</span><br><span class="line">&#125; 如果 (有🍓) &#123;</span><br><span class="line">    买一盒🍓</span><br><span class="line">&#125; 否则 &#123;</span><br><span class="line">    买🍎</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有什么计划，第一反应是先在手机提醒事项中记起来，脑子反而懒得记了</p><p>备份强迫症: 经常会提醒自己什么笔记、代码要备份到云上，莫名担心电脑硬盘坏了丢数据</p><h3 id="你每天最不会忘记的事是什么"><a href="#你每天最不会忘记的事是什么" class="headerlink" title="你每天最不会忘记的事是什么"></a>你每天最不会忘记的事是什么</h3><p>看所有公众号的更新、各种平台打卡（比如虎牙直播）、写点日记</p><!--是不是应该有更贴近生活的呢？--><h3 id="支撑你上班的原动力"><a href="#支撑你上班的原动力" class="headerlink" title="支撑你上班的原动力"></a>支撑你上班的原动力</h3><p>听歌</p><h3 id="每天最真实的感觉是什么"><a href="#每天最真实的感觉是什么" class="headerlink" title="每天最真实的感觉是什么"></a>每天最真实的感觉是什么</h3><p>一直在忙，但是下班前都想不清这一天到底做了什么</p><h3 id="最不真实的感觉是什么"><a href="#最不真实的感觉是什么" class="headerlink" title="最不真实的感觉是什么"></a>最不真实的感觉是什么</h3><p>需求竟然做完了？</p><h3 id="中午同事们一般怎么吃"><a href="#中午同事们一般怎么吃" class="headerlink" title="中午同事们一般怎么吃"></a>中午同事们一般怎么吃</h3><p>外卖，饭堂和自己带饭</p><h3 id="午休一般能睡多久"><a href="#午休一般能睡多久" class="headerlink" title="午休一般能睡多久"></a>午休一般能睡多久</h3><p>只够睡半个小时，不过也是支撑下午到晚上的半个小时，不睡真的不行</p><h3 id="下午茶一般吃什么"><a href="#下午茶一般吃什么" class="headerlink" title="下午茶一般吃什么"></a>下午茶一般吃什么</h3><p>奶茶，偶尔会点个垃圾食品</p><h3 id="办公位大家一般会放什么东西"><a href="#办公位大家一般会放什么东西" class="headerlink" title="办公位大家一般会放什么东西"></a>办公位大家一般会放什么东西</h3><p>用来提神的（茶罐、咖啡）、收线器、厚厚一摞书，消毒水</p><h3 id="最近看到办公位上特别的东西"><a href="#最近看到办公位上特别的东西" class="headerlink" title="最近看到办公位上特别的东西"></a>最近看到办公位上特别的东西</h3><p>戴着圣诞帽的小黄鸭，加湿器，热水壶</p><h3 id="还有什么比较特别的工位"><a href="#还有什么比较特别的工位" class="headerlink" title="还有什么比较特别的工位"></a>还有什么比较特别的工位</h3><p>搞ui的工位都有 imac</p><p>面前的工位隔板上贴自己小孩照片</p><p>放几个仙人球</p><p>磊着好多业界经典书籍</p><h3 id="买过最多的东西"><a href="#买过最多的东西" class="headerlink" title="买过最多的东西"></a>买过最多的东西</h3><p>数据线，起码两位数</p><h3 id="最想要的设备"><a href="#最想要的设备" class="headerlink" title="最想要的设备"></a>最想要的设备</h3><p>好一点的音响和显示器</p><h3 id="什么样的键盘敲着舒服"><a href="#什么样的键盘敲着舒服" class="headerlink" title="什么样的键盘敲着舒服"></a>什么样的键盘敲着舒服</h3><p>Mac那种键程短，又很有反馈感的就很好</p><p>有时灵感来了，敲得飞起，有种放飞自我的感觉</p><h3 id="最近发现什么有意思的事"><a href="#最近发现什么有意思的事" class="headerlink" title="最近发现什么有意思的事"></a>最近发现什么有意思的事</h3><p>寒潮到来，让电脑多跑点服务，键盘可以暖手</p><p>跟一些同事聊天，他们的情绪波动曲线和股市波动曲线高度吻合</p><p>下班去一家点过外卖的猪脚饭，老板还送了一份咸菜，疲惫感顿时消失一半，看来外卖还是不如到店吃</p><h3 id="什么能给自己带来爽感"><a href="#什么能给自己带来爽感" class="headerlink" title="什么能给自己带来爽感"></a>什么能给自己带来爽感</h3><p>查一个问题，浏览器密密麻麻地打开了十几个网页，解决之后一连串地按 ctrl+w 关掉</p><h3 id="上班累了有什么摸鱼方式"><a href="#上班累了有什么摸鱼方式" class="headerlink" title="上班累了有什么摸鱼方式"></a>上班累了有什么摸鱼方式</h3><p>吃点零食，刷刷论坛</p><h3 id="有什么经验牢记在心"><a href="#有什么经验牢记在心" class="headerlink" title="有什么经验牢记在心"></a>有什么经验牢记在心</h3><p>执行rm千万不要顺手就接上rf</p><p>下班前半小时不要操作任何线上服务</p><p>手动测试变更了什么配置，要记得复原回去</p><p>用 nohup 启动的后台进程要知道什么时候会停止</p><h3 id="测试和你之间最常说的话"><a href="#测试和你之间最常说的话" class="headerlink" title="测试和你之间最常说的话"></a>测试和你之间最常说的话</h3><p>测试: 快看，这个参数调接口报错了</p><p>我: 你这个参数传的不合理啊，业务不可能这么传的</p><p>测试: 我哪知道，反正就是报错了，你得解决</p><h3 id="开发小伙伴和你之间最常说的话"><a href="#开发小伙伴和你之间最常说的话" class="headerlink" title="开发小伙伴和你之间最常说的话"></a>开发小伙伴和你之间最常说的话</h3><p>前端: 我这边展示需要这个信息，你加个接口吧</p><p>其他后端同学: 什么时候可以联调啊</p><h3 id="上班路上有什么有意思的事情做"><a href="#上班路上有什么有意思的事情做" class="headerlink" title="上班路上有什么有意思的事情做"></a>上班路上有什么有意思的事情做</h3><p>看看地铁上有谁不玩手机​</p><h3 id="下班路上有什么有意思的事情可以做"><a href="#下班路上有什么有意思的事情可以做" class="headerlink" title="下班路上有什么有意思的事情可以做"></a>下班路上有什么有意思的事情可以做</h3><p>出地铁了看看小吃摆摊有没有新开什么好吃的</p><!--通勤路上讨厌的人地铁已经很拥挤了，还非要看手机，把手机硬怼别人面前--><h3 id="下班后的团建一般干嘛"><a href="#下班后的团建一般干嘛" class="headerlink" title="下班后的团建一般干嘛"></a>下班后的团建一般干嘛</h3><p>烧烤，喝酒，唱K</p><h3 id="下班到家了最想做什么"><a href="#下班到家了最想做什么" class="headerlink" title="下班到家了最想做什么"></a>下班到家了最想做什么</h3><p>赶紧吃完就睡，每天都能睡够八个小时，可惜做不到</p><h3 id="工作后对你帮助最大的人"><a href="#工作后对你帮助最大的人" class="headerlink" title="工作后对你帮助最大的人"></a>工作后对你帮助最大的人</h3><p>两个以前的同事，跟他们聊项目，聊八股文，吐槽现状，总是会很有意思</p><h3 id="最近什么事是比较自豪的"><a href="#最近什么事是比较自豪的" class="headerlink" title="最近什么事是比较自豪的"></a>最近什么事是比较自豪的</h3><p>无事度过2023</p><h3 id="如果家人来深圳，你会带他们去你的公司逛吗"><a href="#如果家人来深圳，你会带他们去你的公司逛吗" class="headerlink" title="如果家人来深圳，你会带他们去你的公司逛吗"></a>如果家人来深圳，你会带他们去你的公司逛吗</h3><p>不会，写字楼有什么好看的</p><h3 id="一周里哪一天最特别"><a href="#一周里哪一天最特别" class="headerlink" title="一周里哪一天最特别"></a>一周里哪一天最特别</h3><p>还得是周五。不管工作有没有做完，团建也好，到市区逛街也好，早点回家也罢，这一天总是对下班生活有所期待</p><h3 id="周末有什么放松方式"><a href="#周末有什么放松方式" class="headerlink" title="周末有什么放松方式"></a>周末有什么放松方式</h3><p>困了睡觉，饿了做饭，想再放松点就打打cs，想过充实点就写写自己的项目​，或者出门逛逛​</p><h3 id="最讨厌职场中什么样的人"><a href="#最讨厌职场中什么样的人" class="headerlink" title="最讨厌职场中什么样的人"></a>最讨厌职场中什么样的人</h3><p>领导的舔狗，甩锅的高手，晚上群里吼，揽功他最猛</p><h3 id="看到某某大厂又给员工加薪的新闻是什么反应"><a href="#看到某某大厂又给员工加薪的新闻是什么反应" class="headerlink" title="看到某某大厂又给员工加薪的新闻是什么反应"></a>看到某某大厂又给员工加薪的新闻是什么反应</h3><p>当然是选择没看到，麻痹自己啦</p><h3 id="最近想吐槽的"><a href="#最近想吐槽的" class="headerlink" title="最近想吐槽的"></a>最近想吐槽的</h3><p>无聊的时候看了一张业务表的结构，有170多列，而且很多冗余字段，难以想象业务的sql写起来会是什么样子</p><p>最近安全部门对我们开始提各种要求，什么这个数据权限要管控，那个数据要加密，想起了几年前被安全的需求支配的日子</p><h3 id="最讨厌的词"><a href="#最讨厌的词" class="headerlink" title="最讨厌的词"></a>最讨厌的词</h3><p>狼性: “能不能学一下xx公司，他们的员工都是有狼性的”，为什么就不能先好好做个人呢</p><p>抓手: 以xx为抓手，总是觉得领导说到这个词是反而很空虚的表现，仿佛没有了这个xx抓手团队就不知道干嘛一样</p><h3 id="压力满分是100分，给自己一天的状态打个分"><a href="#压力满分是100分，给自己一天的状态打个分" class="headerlink" title="压力满分是100分，给自己一天的状态打个分"></a>压力满分是100分，给自己一天的状态打个分</h3><p>上午50，下午80，晚上70</p><p>你问什么时候才能低于20分，我估计得等到退休那天吧</p><h3 id="最羡慕什么样的人"><a href="#最羡慕什么样的人" class="headerlink" title="最羡慕什么样的人"></a>最羡慕什么样的人</h3><p>特有料（全栈工程师），特好睡，特能卷（永远充满能量）</p><h3 id="什么时候会感到失望"><a href="#什么时候会感到失望" class="headerlink" title="什么时候会感到失望"></a>什么时候会感到失望</h3><p>需求尽力去做了，但最后用户说不是我真正想要的样子</p><h3 id="最开心的时候是什么样"><a href="#最开心的时候是什么样" class="headerlink" title="最开心的时候是什么样"></a>最开心的时候是什么样</h3><p>得到用户的夸赞</p><h3 id="用歌名形容你一天的工作"><a href="#用歌名形容你一天的工作" class="headerlink" title="用歌名形容你一天的工作"></a>用歌名形容你一天的工作</h3><p>到工位先来杯《爷爷泡的茶》<br>突然来个会要处理紧急需求，心里吐槽的同时默默地把企微签名设置成了《我很忙》<br>被分配了个大需求，感叹《我不配》，不知道加多少班才能搞完<br>特别是晚上加班熬夜的时候，感觉灵魂都在《千里之外》<br>每天忙忙碌碌，时不时想回老家，只想一边闻《稻香》一边听《夜曲》</p><h2 id="技术和学习"><a href="#技术和学习" class="headerlink" title="技术和学习"></a>技术和学习</h2><h3 id="用代码形容自己的一天"><a href="#用代码形容自己的一天" class="headerlink" title="用代码形容自己的一天"></a>用代码形容自己的一天</h3><p>wakeup(7:30)<br>eat(breakfest)<br>subway(home -&gt; company)<br>meeting(daily progress)<br>coding(1 hour)<br>eat(lunch)<br>sleep(30 minutes)<br>coding(2 hour)<br>relax(10 minutes)<br>reply(users)<br>fix(bugs)<br>coding(1 hour)<br>list(what I do today)<br>eat(dinner)<br>subway(company -&gt; home)<br>coding(self project)<br>sleep</p><h3 id="工作后你掌握的第一个技能是什么"><a href="#工作后你掌握的第一个技能是什么" class="headerlink" title="工作后你掌握的第一个技能是什么"></a>工作后你掌握的第一个技能是什么</h3><p>写curd接口</p><h3 id="工作后接触的第一个项目是什么"><a href="#工作后接触的第一个项目是什么" class="headerlink" title="工作后接触的第一个项目是什么"></a>工作后接触的第一个项目是什么</h3><p>也是印象最深的: mysql 主备自动切换</p><h3 id="最近掌握的技能是什么"><a href="#最近掌握的技能是什么" class="headerlink" title="最近掌握的技能是什么"></a>最近掌握的技能是什么</h3><p>使用 ffmpeg 对音乐文件做一些处理，比如转格式，加元数据等</p><h3 id="平时用的最多的linux指令是什么"><a href="#平时用的最多的linux指令是什么" class="headerlink" title="平时用的最多的linux指令是什么"></a>平时用的最多的linux指令是什么</h3><p>ll, cd, find, vim, nohup, grep, sed</p><h3 id="平时用的最多的脚本-sql"><a href="#平时用的最多的脚本-sql" class="headerlink" title="平时用的最多的脚本/sql"></a>平时用的最多的脚本/sql</h3><p>脚本: 编译服务: go build, mvn package…</p><p>sql: 看看集群每天跑了多少任务: select count…</p><h3 id="最近做的很有意义的一件事"><a href="#最近做的很有意义的一件事" class="headerlink" title="最近做的很有意义的一件事"></a>最近做的很有意义的一件事</h3><p>树莓派真正用起来了</p><h3 id="用得最多的设计模式"><a href="#用得最多的设计模式" class="headerlink" title="用得最多的设计模式"></a>用得最多的设计模式</h3><p>单例，感觉它很能给开发者安全感</p><p>最近因为要写对接多种数据库的接口，用工厂模式也挺多的</p><h3 id="觉得最有意义的词"><a href="#觉得最有意义的词" class="headerlink" title="觉得最有意义的词"></a>觉得最有意义的词</h3><p>重构，有一种“否定旧的想法，用新的思维重造项目”的意味，也是贯穿程序员生涯始终的事情</p><h3 id="相比毕业时，用到技术栈最大的变化"><a href="#相比毕业时，用到技术栈最大的变化" class="headerlink" title="相比毕业时，用到技术栈最大的变化"></a>相比毕业时，用到技术栈最大的变化</h3><p>容器生态的流行。已经是万物（服务）皆可容器化的时代了</p><h3 id="你觉得你和自己写的代码之间是什么关系"><a href="#你觉得你和自己写的代码之间是什么关系" class="headerlink" title="你觉得你和自己写的代码之间是什么关系"></a>你觉得你和自己写的代码之间是什么关系</h3><p>以前写出来的代码（服务），写完老是不听话，有时还要闹脾气，就好像完全不认识一样</p><p>现在终于算是能写出帮自己干活的“小伙伴”了</p><h3 id="曾经有哪些误解"><a href="#曾经有哪些误解" class="headerlink" title="曾经有哪些误解"></a>曾经有哪些误解</h3><p>后台开发不用管测试（起码要写单元测试）</p><p>运维的技术含量不高（天天跟设备和底层打交道）</p><p>搞业务比搞平台事情多多了（业务的忙是一阵一阵的，平台要做好是持续性的）</p><p>小公司远没有大厂卷（有人的地方就有江湖）</p><p>996是吓唬人的（</p><h3 id="这些年开发工具的变化"><a href="#这些年开发工具的变化" class="headerlink" title="这些年开发工具的变化"></a>这些年开发工具的变化</h3><p>IDE: 从eclipse到IDEA、vscode<br>调试环境: 从本地到开发服务器或容器<br>服务升级方式: 从手动传包，和运维沟通，到直接登录devops平台操作<br>沟通方式: 从本地文档和会议，到在线文档<br>查询资料的方式: 从搜索引擎变成了gpt（趋势）</p><h3 id="平时电脑上用到比较重要的工具"><a href="#平时电脑上用到比较重要的工具" class="headerlink" title="平时电脑上用到比较重要的工具"></a>平时电脑上用到比较重要的工具</h3><p>粘贴板历史，提醒事项，onenote</p><h3 id="最好的语言是什么"><a href="#最好的语言是什么" class="headerlink" title="最好的语言是什么"></a>最好的语言是什么</h3><p>没有最好只有最适合</p><p>对我而言是 go，平时写工具，写微服务多一点，用go写确实很方便</p><h3 id="除了专业技术外练就的技巧"><a href="#除了专业技术外练就的技巧" class="headerlink" title="除了专业技术外练就的技巧"></a>除了专业技术外练就的技巧</h3><p>盲打，处理数据小能手</p><h3 id="接下来的一年想提高的地方"><a href="#接下来的一年想提高的地方" class="headerlink" title="接下来的一年想提高的地方"></a>接下来的一年想提高的地方</h3><p>英语再练好一点，现在看文章的速度还是有点慢</p><h3 id="接下来最想学的技术"><a href="#接下来最想学的技术" class="headerlink" title="接下来最想学的技术"></a>接下来最想学的技术</h3><p>客户端开发</p><h2 id="就业环境"><a href="#就业环境" class="headerlink" title="就业环境"></a>就业环境</h2><h3 id="这两年的形式，对行业影响大吗"><a href="#这两年的形式，对行业影响大吗" class="headerlink" title="这两年的形式，对行业影响大吗"></a>这两年的形式，对行业影响大吗</h3><p>虽然整体相比其他行业，可能还算好的，但明显已没有几年前疯狂“扩张”的趋势，各种“降本增效”以及它带来的后果已经很明显了，去年上热搜的故障可不少，裁员更不用多说</p><h3 id="现在行业对我们员工的期望是什么样的"><a href="#现在行业对我们员工的期望是什么样的" class="headerlink" title="现在行业对我们员工的期望是什么样的"></a>现在行业对我们员工的期望是什么样的</h3><p>一个人，担当开发测试两个角色，负责三个项目，每周开四次会，五天工作日持续输出，周六偶尔加加班，一年做出7项重点成就，在社区分享8篇博客，每天干活到9点，最后，做到以上所有，十全十美</p><!--如果你是应届生，那首先要能多加班，最好一周熟悉一个项目马上开发，毕竟不给自己点压力怎么成长呢？相信你一定行如果你是社招生，那先来接手三个旧服务吧。开发它的小伙伴没留下什么文档吗？那就加班看代码，把业务逻辑全部钻清楚呗。即使它们每天的状态都是摇摇欲坠，在线上每天给你报数不清的bug，也没事，这些项目的重构也是交给你的如果你是组内大头兵，那你最好能接住，领导给你分配一个调研性的需求，要求你一个月搞出来，没思路怎么办呢，--><!--如果你是一名应届生，那么对你的要求就是能“充满活力”地加班，要能很好地接住导师分给你的需求，偶尔写个小bug，毕竟谁都是这么过来的嘛，不加班如果你通过社招到了一个如果你是组内大头兵如果你是项目经理，那么你要能建立足够微信--><h3 id="相比刚毕业那会，行业氛围最大的变化"><a href="#相比刚毕业那会，行业氛围最大的变化" class="headerlink" title="相比刚毕业那会，行业氛围最大的变化"></a>相比刚毕业那会，行业氛围最大的变化</h3><p>大家都变得现实，不谈理想了</p><h2 id="行业观察"><a href="#行业观察" class="headerlink" title="行业观察"></a>行业观察</h2><h3 id="这一年接触最多的行业热词有哪些"><a href="#这一年接触最多的行业热词有哪些" class="headerlink" title="这一年接触最多的行业热词有哪些"></a>这一年接触最多的行业热词有哪些</h3><p>行业: 毋庸置疑的 chatgpt</p><p>语言: rust(这几年的后起之秀都很猛)</p><p>前后端: 低代码</p><p>数据: 数据安全</p><p>资源: 降本增效，资源裁撤</p><h3 id="简单的话形容云计算、云服务、云存储的云"><a href="#简单的话形容云计算、云服务、云存储的云" class="headerlink" title="简单的话形容云计算、云服务、云存储的云"></a>简单的话形容云计算、云服务、云存储的云</h3><p>就和云一样，你不需要实实在在接触到它，稍一留意就能感受到它的存在</p><h3 id="简单的话形容大数据"><a href="#简单的话形容大数据" class="headerlink" title="简单的话形容大数据"></a>简单的话形容大数据</h3><p>好比茶具，普通点的有办公室、饭店用的茶壶，高端点的有一整套的茶壶、杯子和茶几</p><p>它们当然都能泡茶，但是高端的茶具自然可以泡更高端的茶，泡出的也更有味</p><h3 id="怎么看待降本增效"><a href="#怎么看待降本增效" class="headerlink" title="怎么看待降本增效"></a>怎么看待降本增效</h3><!--本身肯定有风险，人少了，出了问题就可能找不到人来解决；机器资源减少了，服务在高峰期出故障的概率也会变高。但对公司来说，确实还是能迅速节省成本，所以都乐此不疲--><p>还是那句话，没影响的怎么都感觉不到，但压在个人身上就是座大山</p><h3 id="现在app的更新给你的感受"><a href="#现在app的更新给你的感受" class="headerlink" title="现在app的更新给你的感受"></a>现在app的更新给你的感受</h3><p>现在好多app的新功能，目的已经不是“满足我的需求”，给我的感觉也不再是“这个功能好有用”。而是不停地在首页新增各种内容板块，一打开，仿佛都在争着向你大声说“快来看我！这个内容你一定喜欢！”、“这个视频你不喜欢吗，那就翻下一个，一定更好玩！”、“不看你就out咯“…</p><h3 id="这几年一直很热门的技术"><a href="#这几年一直很热门的技术" class="headerlink" title="这几年一直很热门的技术"></a>这几年一直很热门的技术</h3><p>数据库，一直很重要，也一直有更快，更好用的数据库项目出来</p><h3 id="未来看好的方向"><a href="#未来看好的方向" class="headerlink" title="未来看好的方向"></a>未来看好的方向</h3><p>低代码</p><p>它代表的不只是通过拼接积木一般的方式写代码，而是所有逻辑，所有数据都形成了统一的规范。大家都按照这个规范，去用低代码提供的组件实现功能，就能减少不必要的争执，提高效率</p><h3 id="你认为行业中比较特别的技术人"><a href="#你认为行业中比较特别的技术人" class="headerlink" title="你认为行业中比较特别的技术人"></a>你认为行业中比较特别的技术人</h3><p>阮一峰，坚持每周五发技术周刊，而且很有干货</p><h3 id="这几年对我们生活影响最大的产品"><a href="#这几年对我们生活影响最大的产品" class="headerlink" title="这几年对我们生活影响最大的产品"></a>这几年对我们生活影响最大的产品</h3><p>毫无疑问是短视频，改变了主流媒体，改变了大家获取信息的主要方式</p><h3 id="互联网行业的意义是什么"><a href="#互联网行业的意义是什么" class="headerlink" title="互联网行业的意义是什么"></a>互联网行业的意义是什么</h3><p>有时候挺迷茫: 看起来互联网人所做的事很前沿，支撑一切线上的服务，线上的所有服务、app又确实是和现实关联着的，但回想自己每天做的事，又感觉好多都没什么意义，跟现实关系也不大</p><h2 id="最后想说说的"><a href="#最后想说说的" class="headerlink" title="最后想说说的"></a>最后想说说的</h2><h3 id="评选一个属于你的23年年度汉字"><a href="#评选一个属于你的23年年度汉字" class="headerlink" title="评选一个属于你的23年年度汉字"></a>评选一个属于你的23年年度汉字</h3><p>苟（卷、熬也行）</p><h3 id="经历过的项目中有什么事感到遗憾的"><a href="#经历过的项目中有什么事感到遗憾的" class="headerlink" title="经历过的项目中有什么事感到遗憾的"></a>经历过的项目中有什么事感到遗憾的</h3><p>之前的一个项目组，做的事挺有前景，组员之间说话也都很有意思，也有大牛能hold住一整套架构，最后却因为各种原因散了</p><h3 id="如果有时光机，想穿越到哪个时间"><a href="#如果有时光机，想穿越到哪个时间" class="headerlink" title="如果有时光机，想穿越到哪个时间"></a>如果有时光机，想穿越到哪个时间</h3><p>刚工作的第一个项目，最初的4个人，把当时做的服务再好好的重构一遍</p><h3 id="虚拟世界和现实世界分得清楚不"><a href="#虚拟世界和现实世界分得清楚不" class="headerlink" title="虚拟世界和现实世界分得清楚不"></a>虚拟世界和现实世界分得清楚不</h3><p>分不清，甚至有时觉得虚拟世界更真实，现实世界也不过就是一个大型程序嘛，每个人都在尽力完成早就编好的逻辑。可能各个小功能有bug，但最后都会有人去修补它们，我们也是无数bug修补工程师的其中之一</p><h3 id="什么时候会感到迷茫"><a href="#什么时候会感到迷茫" class="headerlink" title="什么时候会感到迷茫"></a>什么时候会感到迷茫</h3><p>学新东西的时候就特别容易迷茫</p><p>一方面要补的基础知识太多，操作系统、网络、数据库、数据结构、算法，真正解决问题的时候就得靠这些知识</p><p>另一方面，开源社区在日新月异地更新，我们在工作中所用的框架，服务，工具 各种东西，可能每个月都有大版本更新，还得抽点时间去了解</p><p>就是这种每天都在忙，每天也都有新东西要学节奏，偶尔真的会有无力感，不知道学到何时才是尽头</p><h3 id="如果生活节奏可以慢下来，最想做什么"><a href="#如果生活节奏可以慢下来，最想做什么" class="headerlink" title="如果生活节奏可以慢下来，最想做什么"></a>如果生活节奏可以慢下来，最想做什么</h3><p>用旁观者的角度看这座打工之城，在通勤高峰期，站在换乘中心的地铁站，又或是坐在前往市区的公交上，​看那与自己无关的人潮涌动，感受这座城市的血液和心跳</p><h3 id="哪天不做程序员了可以干嘛呢"><a href="#哪天不做程序员了可以干嘛呢" class="headerlink" title="哪天不做程序员了可以干嘛呢"></a>哪天不做程序员了可以干嘛呢</h3><p>其实还没有认真想过，除了做司机送外卖这些老生常谈的“归宿”，希望能再提升一下撇脚的日语，找个字幕组混口饭吃吧</p><h3 id="有什么想对刚入行的年轻人说的"><a href="#有什么想对刚入行的年轻人说的" class="headerlink" title="有什么想对刚入行的年轻人说的"></a>有什么想对刚入行的年轻人说的</h3><p>技术确实能创造价值，但也是建立在量变到质变的基础之上。所以该卷还得卷，反卷鸡汤听听就好了，吃饭的本事还是得练好的</p><p>其次就是培养点爱好，现在大家过得都不容易，总要有办法找点乐子</p><!--身处信息时代，你觉得这个时代更好了吗工具确实在进步: 通讯软件代替了电话和写信，手机代替了mp3 mp4，人和人之间的交流成本更低了，但人与人的关系，社会发生的所有事背后，依然是人性所驱。人性会随着时代改变吗，我认为不会--><h3 id="今年希望做点什么呢"><a href="#今年希望做点什么呢" class="headerlink" title="今年希望做点什么呢"></a>今年希望做点什么呢</h3><p>基于开源项目、且已经有大体规划的一个需求，已经开始做了。对自己而言挺重要的，希望到年底能把功能完善到真正用起来的程度吧</p>]]></content>
    
    
    <summary type="html">一个程序员的小小心声</summary>
    
    
    
    <category term="生活" scheme="http://smiecj.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="互联网" scheme="http://smiecj.github.io/categories/%E7%94%9F%E6%B4%BB/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
    <category term="生活" scheme="http://smiecj.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="互联网" scheme="http://smiecj.github.io/tags/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    <category term="职业" scheme="http://smiecj.github.io/tags/%E8%81%8C%E4%B8%9A/"/>
    
    <category term="创作" scheme="http://smiecj.github.io/tags/%E5%88%9B%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>mongodb数据同步到hive</title>
    <link href="http://smiecj.github.io/2023/10/31/emr-mongo-to-hive/"/>
    <id>http://smiecj.github.io/2023/10/31/emr-mongo-to-hive/</id>
    <published>2023-10-30T16:00:00.000Z</published>
    <updated>2023-11-08T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/xiaoliizi/article/details/134313303">本文csdn地址</a></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>用户需求: 需要将 mongodb 的数据同步到 hive 表，共 2 亿+条数据，总数据量约 30G</p><p>查阅一些博客后，了解到同步方法有以下几种</p><ul><li><p>手动+离线</p><p>对于比较小的数据，可以先通过 <strong>mongoexport</strong> 将数据导出到本地 json 文件，再将 json 直接上传到 hdfs，创建 hive 表关联到这个文件即可</p><p>这种方式非常简单直接，但需要两次 读取到写入 的过程，而且如果 mongodb 中的数据很大，需要先导到本地的方式将会导致本地磁盘占用升高，不是很适合</p><p>参考: <a href="https://www.cnblogs.com/beststrive/p/14187383.html">Mongoexport同步数据到Hive</a></p></li><li><p>工具+离线</p><p>通过 datax / seatunnel 之类的数据同步服务，数据在内存中完成同步</p><p><a href="https://github.com/alibaba/DataX/blob/master/mongodbreader/doc/mongodbreader.md">datax-mongodbreader</a></p><p><a href="https://github.com/alibaba/DataX/blob/master/hdfswriter/doc/hdfswriter.md">datax-hdfswriter</a></p><p><a href="https://seatunnel.apache.org/docs/2.3.3/connector-v2/source/MongoDB">seatunnel-connector-mongo</a></p><p><a href="https://seatunnel.apache.org/docs/2.3.3/connector-v2/sink/Hive/">seatunnel-connector-hive</a></p></li><li><p>实时</p><p>mongodb 在 3.6 版本支持了 change streamer，支持在客户端监听数据变更，实现实时更新</p><p>但这个同步逻辑需要依赖单独的程序去完成，这次用户需求也只要一次性的全量更新，不涉及增量更新，因此这一块就不具体看了</p><p><a href="https://cloud.tencent.com/developer/article/1711794">MongoDB Change Stream之一——上手及初体验原创</a></p></li></ul><h2 id="通过-datax-同步数据"><a href="#通过-datax-同步数据" class="headerlink" title="通过 datax 同步数据"></a>通过 datax 同步数据</h2><h3 id="任务定义"><a href="#任务定义" class="headerlink" title="任务定义"></a>任务定义</h3><p>json 配置文件参考官方文档进行适配即可</p><p>注意: hdfswriter 的 defaultFS 如果指定的是集群地址，比如 hdfs://cluster_name，可能会遇到解析不了的问题，需要把 hdfs 的配置文件打入到 hdfswriter-0.0.1-SNAPSHOT.jar 包中去</p><p><a href="https://github.com/alibaba/DataX/issues/197#issuecomment-436843464">参考issue</a></p><p><a href="https://stackoverflow.com/a/2591548">jar 打包指令参考</a></p><p>datax 任务定义:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;job&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;content&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;reader&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;mongodbreader&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;parameter&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;address&quot;</span>: [</span><br><span class="line">              <span class="string">&quot;host1:27017&quot;</span>,</span><br><span class="line">              <span class="string">&quot;host2:27017&quot;</span>,</span><br><span class="line">              <span class="string">&quot;host3:27017&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;collectionName&quot;</span>: <span class="string">&quot;collection_name&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;column&quot;</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">&quot;index&quot;</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;id&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span></span><br><span class="line">              &#125;,</span><br><span class="line">              ...</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;dbName&quot;</span>: <span class="string">&quot;db&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;userName&quot;</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;userPassword&quot;</span>: <span class="string">&quot;password&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;writer&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;hdfswriter&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;parameter&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;column&quot;</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;id&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span></span><br><span class="line">              &#125;</span><br><span class="line">              ...</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;compress&quot;</span>: <span class="string">&quot;SNAPPY&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;defaultFS&quot;</span>: <span class="string">&quot;hdfs://cluster_name&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;fieldDelimiter&quot;</span>: <span class="string">&quot;\u0001&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;fileName&quot;</span>: <span class="string">&quot;$table&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;fileType&quot;</span>: <span class="string">&quot;orc&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;/user/hive/warehouse/db_name.db/table_name&quot;</span>, <span class="comment">// hdfs 路径需要先创建好</span></span><br><span class="line">            <span class="attr">&quot;writeMode&quot;</span>: <span class="string">&quot;truncate&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;setting&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;speed&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;channel&quot;</span>: <span class="string">&quot;2&quot;</span> <span class="comment">// 任务并行度，可根据实际情况调大</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>启动任务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python bin/datax.py tmp/mongo_to_hive.json</span><br></pre></td></tr></table></figure><p>等待同步完成后，查看 hdfs 对应表路径的数据，可以看到生成的 txt 文件</p><p>然后创建 hive 表关联这个路径即可</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> table_name</span><br><span class="line">(</span><br><span class="line">    id string,</span><br><span class="line">    ...</span><br><span class="line">)</span><br><span class="line">COMMENT <span class="string">&#x27;同步表&#x27;</span></span><br><span class="line"><span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\t&#x27;</span> LINES TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">STORED <span class="keyword">AS</span> ORC <span class="comment">-- 和 datax 任务中的 fileType 对应</span></span><br><span class="line">LOCATION <span class="string">&#x27;/user/hive/warehouse/db_name.db/table_name&#x27;</span>; <span class="comment">-- 和 path 对应</span></span><br></pre></td></tr></table></figure><h2 id="通过-seatunnel-同步数据"><a href="#通过-seatunnel-同步数据" class="headerlink" title="通过 seatunnel 同步数据"></a>通过 seatunnel 同步数据</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>不同于 datax，seatunnel 的安装过程稍微复杂点，而且和 hive 相关的ja包需要手动导入，因此在这里特别说明</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载 seatunnel 后，需要先安装插件（即各个connector）</span></span><br><span class="line">sh bin/install-plugin.sh 2.3.3</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载 hive 2.3.9 版本 （主要是为了拿到 jar 包，也可以从 maven 仓库单独下载下面的每个 jar 包）</span></span><br><span class="line">wget https://downloads.apache.org/hive/hive-2.3.9/apache-hive-2.3.9-bin.tar.gz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压后，把以下 jar 包拷贝到 seatunnel 的 lib 下</span></span><br><span class="line"></span><br><span class="line">seatunnel_home=/opt/modules/seatunnel</span><br><span class="line"></span><br><span class="line">cd /opt/modules/apache-hive-2.3.9-bin/lib</span><br><span class="line"></span><br><span class="line">cp hive-metastore-2.3.9.jar $&#123;seatunnel_home&#125;/lib</span><br><span class="line"></span><br><span class="line">cp hive-common-2.3.9.jar $&#123;seatunnel_home&#125;/lib</span><br><span class="line"></span><br><span class="line">cp hive-exec-2.3.9.jar $&#123;seatunnel_home&#125;/lib</span><br><span class="line"></span><br><span class="line">cp libthrift-0.9.3.jar $&#123;seatunnel_home&#125;/lib</span><br><span class="line"></span><br><span class="line">cp libfb303-0.9.3.jar $&#123;seatunnel_home&#125;/lib</span><br></pre></td></tr></table></figure><h3 id="任务定义-1"><a href="#任务定义-1" class="headerlink" title="任务定义"></a>任务定义</h3><p>配置示例如下:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">env &#123;</span><br><span class="line">  <span class="attr">execution.parallelism</span> = <span class="number">1</span></span><br><span class="line">  <span class="attr">job.mode</span> = <span class="string">&quot;BATCH&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">source &#123;</span><br><span class="line">  MongoDB &#123;</span><br><span class="line">    <span class="attr">uri</span> = <span class="string">&quot;mongodb://user:password@host1,host2,host3&quot;</span></span><br><span class="line">    <span class="attr">database</span> = <span class="string">&quot;db&quot;</span></span><br><span class="line">    <span class="attr">collection</span> = <span class="string">&quot;collection&quot;</span></span><br><span class="line">    <span class="attr">schema</span> = &#123;</span><br><span class="line">      fields &#123;</span><br><span class="line">            <span class="attr">id</span> = string</span><br><span class="line">            <span class="attr">create_time</span> = string</span><br><span class="line">            <span class="attr">update_time</span> = string</span><br><span class="line">            <span class="attr">name</span> = string</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">sink &#123;</span><br><span class="line">  Hive &#123;</span><br><span class="line">    <span class="attr">table_name</span> = <span class="string">&quot;db.table&quot;</span></span><br><span class="line">    <span class="attr">metastore_uri</span> = <span class="string">&quot;thrift://metastore_host:9083&quot;</span></span><br><span class="line">    <span class="attr">hdfs_site_path</span> = <span class="string">&quot;/etc/hadoop/conf/hdfs-site.xml&quot;</span> <span class="comment"># 和 datax 的问题类似，添加 hdfs 配置用于解析 hdfs 集群地址</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3><p>执行任务:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/seatunnel.sh --config mongo_to_hive.conf -e local&quot;</span><br></pre></td></tr></table></figure><p>目前还存在 空值无法转换的问题，报错: <strong>Unable to convert to &lt;STRING&gt; from nullable value null</strong>，需要等待社区解决</p><p>相关 issue: <a href="https://github.com/apache/seatunnel/issues/5340">[Bug] [MongoDB-CDC] 数据中有字段值为 Null 直接异常. #5340</a></p><h3 id="和-datax-的对比"><a href="#和-datax-的对比" class="headerlink" title="和 datax 的对比"></a>和 datax 的对比</h3><ul><li><p>配置: 都是 hive reader 和 mongo writer 的两部分数据源配置方式</p></li><li><p>写入方式: 都是把数据写入到 hdfs 路径，hive 表需要用户自己创建</p><p>seatunnel 的 hive connector 也是先从 hive 中读取 location，拿到 hdfs 的路径，参考: HiveSinkAggregatedCommitter 继承了 FileSinkAggregatedCommitter, HiveSink 继承了 BaseHdfsFileSink</p></li><li><p>运行环境: datax 只能本地运行，seatunnel 支持 local、flink、spark 等运行模式</p></li></ul><!-- 扩展: airbyte 同步方式 -->]]></content>
    
    
    <summary type="html">一次用户数据的处理过程</summary>
    
    
    
    <category term="大数据" scheme="http://smiecj.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="大数据" scheme="http://smiecj.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    <category term="hive" scheme="http://smiecj.github.io/tags/hive/"/>
    
    <category term="mongo" scheme="http://smiecj.github.io/tags/mongo/"/>
    
  </entry>
  
  <entry>
    <title>go 语言介绍</title>
    <link href="http://smiecj.github.io/2023/10/23/golang-origin/"/>
    <id>http://smiecj.github.io/2023/10/23/golang-origin/</id>
    <published>2023-10-22T16:00:00.000Z</published>
    <updated>2023-11-01T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/xiaoliizi/article/details/134160923">本文 csdn</a></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>一直有在零散的时间用go写点代码，正好借着最近比较有时间写东西的契机，给这个看着年轻，实际也已经发展10几年，并在当下众多开发领域都有不可忽视作用的语言做个介绍吧</p><h1 id="golang-的起点"><a href="#golang-的起点" class="headerlink" title="golang 的起点"></a>golang 的起点</h1><p>golang 的诞生可以说是时代造就了它，它也成就了研发工具、云原生和高性能服务开发百花齐放的时代</p><p>本节主要参考文章:</p><p><a href="https://go.dev/talks/2012/splash.article">Go at Google: Language Design in the Service of Software Engineering</a><br><a href="https://jaycechant.info/2020/translation-language-design-in-the-service-of-software-engineering">翻译-Google 里的 Go 语言：服务于软件工程的语言设计</a></p><p><a href="https://blog.csdn.net/EDDYCJY/article/details/122551805">煎鱼-为什么要开发 Go 这门新语言？</a></p><h2 id="开发痛点"><a href="#开发痛点" class="headerlink" title="开发痛点"></a>开发痛点</h2><ul><li>当时谷歌使用的语言：C++、Java 和 Python ，已经不适用于计算层面的需求，对于多核处理、大规模计算 和 web应用编程层面，遇到的问题都只能绕过，而不是直接解决</li></ul><p>ced by multicore processors, networked systems, massive computation clusters, and the web programming model </p><ul><li><p>软件规模：千万行代码，数千程序员共同维护（言外之意就是效率太低了，语言和开发者两个层面）</p></li><li><p>编译时间太长，几分钟到几小时都有（特别讲了 C++ #include 在编译上的消耗: <a href="https://go.dev/talks/2012/splash.article#TOC_5.">Dependencies in C and C++</a>）</p></li><li><p>依赖混乱，跨语言构建麻烦</p></li><li><p>难以编写自动化工具</p></li></ul><p>译者注: 结合原文之后的内容来看，最主要的两类问题就是 大规模的 C++ 项目编译时间长，以及多种语言维护成本高的问题</p><h2 id="发明者"><a href="#发明者" class="headerlink" title="发明者"></a>发明者</h2><p><a href="https://en.wikipedia.org/wiki/Robert_Griesemer">Robert Griesemer</a>: 参与过谷歌 V8 引擎的开发，<a href="https://en.wikipedia.org/wiki/Sawzall_(programming_language)">Sawzall 语言</a>（谷歌内部用的日志分级打印库，之后被 go 的日志库替代）、JVM 和 <a href="https://en.wikipedia.org/wiki/Strongtalk">strongtalk</a> 系统（用于类型检查，现在<a href="https://blog.csdn.net/iteye_14991/article/details/81522227">不维护了</a>）</p><p><a href="https://en.wikipedia.org/wiki/Rob_Pike">Rob Pike</a>：Unix 开发者之一，为 Unix 编写过终端，后续编写过 sam、acme 文本编辑器，再之后和 Ken Thompson 一起创造了 UTF-8</p><p><a href="https://en.wikipedia.org/wiki/Ken_Thompson">Ken Thompson</a>: Unix 开发者之一，B语言（C语言的前身）的发明者，后面 <a href="https://en.wikipedia.org/wiki/Dennis_Ritchie">Dennis Ritchie</a> 基于 B 语言又开发了 C语言。1983 年 Ken 和 Dennis 一同获得了<a href="https://zh.wikipedia.org/wiki/%E5%9B%BE%E7%81%B5%E5%A5%96">图灵奖</a></p><p>扩展: <a href="https://polarisxu.studygolang.com/posts/talk/go-celebrity-rsc">Russ Cox</a>，你可以在 golang 的很多 issue 中看到他的身影，他也是go代码<a href="https://github.com/golang/go/graphs/contributors">提交</a>次数最多的</p><p><img src="/2023/10/23/golang-origin/golang-commits.png" alt="golang commits"></p><p>推荐阅读: 图灵奖历届得主、<a href="https://changelog.com/gotime/77">golang talk</a></p><h2 id="吉祥物"><a href="#吉祥物" class="headerlink" title="吉祥物"></a>吉祥物</h2><p>名字: Gopher（囊地鼠）</p><p>由 Rob Pike 的妻子 Renee French 创作，官网甚至还有<a href="https://go.dev/doc/gopher/modelsheet.jpg">细节描述</a>呢</p><p><img src="/2023/10/23/golang-origin/gopher02.jpeg" alt="gopher"></p><p><img src="/2023/10/23/golang-origin/gopher03.jpeg" alt="gopher 特点"></p><h2 id="go-是什么样的语言"><a href="#go-是什么样的语言" class="headerlink" title="go 是什么样的语言"></a>go 是什么样的语言</h2><p>为了解决前面说的问题，go 必须有下面的特点:</p><ul><li>高效率、可扩展、满足生产力需求</li><li>必须有可扩展性，对于代码量多、依赖多、开发者多的大型项目 必须能很好运作</li><li>自带 GC，并在对象内存申请、释放空间上进行优化，保证GC尽量不影响业务运行</li><li>符合C的编程习惯，让程序员能丝滑切换（如: 静态类型对象）</li><li>必须足够现代化，在多核处理、网络、web 应用开发上需要更加方便，也要支持更多新特性，如内置的并发编程方案</li></ul><h2 id="时间和版本"><a href="#时间和版本" class="headerlink" title="时间和版本"></a>时间和版本</h2><p><a href="https://endoflife.date/go">golang 版本来源</a>: 从 1.10 到最新</p><p><img src="/2023/10/23/golang-origin/golang-versions.png" alt="golang versions"></p><h1 id="go-语言特点"><a href="#go-语言特点" class="headerlink" title="go 语言特点"></a>go 语言特点</h1><p>本节中，笔者将结合自己平时开发过程中使用到的 go 比较核心的特性进行基本介绍，这些也是 go 和其他编程语言最不同的地方，包括 基本语法、基本指令、函数、关键字、基本类型、打包方式等</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul><li><strong>通过大括号划分代码块</strong>，保证大项目下依旧结构清晰</li><li><strong>不需要分号</strong>，虽然加了也不会报错</li><li><strong>不需要小括号</strong>，比如在 if a &lt; b 判断语句、for 循环中的判断，都不需要</li><li><strong>未使用的 import / 局部变量将报错</strong>，保证编译不会引入多余的代码，提升编译效率</li></ul><h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><ul><li><strong>go build</strong>: 统一的打包语句</li><li>编译后生成<strong>一个可执行文件</strong></li></ul><h2 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h2><ul><li><strong>pprof</strong>: 自带性能指标库，可通过火焰图、命令行查看堆栈情况、堆大小、各协程调用耗时等</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li>接口不需要显式说明继承，只要实现了接口的方法即算是继承</li><li>接口可以通过 <strong>指针接收器（pointer receiver）</strong> 或 <strong>值接收器（value receiver）</strong>实现，分别适合 setter 和 getter 的实现，大对象的方法也适合用 指针接收器 避免频繁拷贝（参考: <a href="https://go.dev/doc/faq#methods_on_values_or_pointers">什么时候适合用什么接收器？</a>）</li><li>方法可以作为对象传递，可以作为 map 的 value、声明匿名方法、定义闭包（闭包常用于定义配置方法，如 <a href="https://github.com/trpc-group/trpc-go/blob/v1.0.1/trpc.go#L68C53-L68C59">trpc 的 server.Opts</a> 及其具体实现方法）</li><li><strong>不支持重载</strong>，用开发必须增加少量代码的代价换来了 代码可读性和编译性能（一些<a href="https://github.com/golang/go/issues/21659">讨论</a>）</li><li><strong>建议使用组合（composition），而不是继承（inheritance）</strong>（对比: java 类在多次继承后，要找到只在基类实现的方法的源代码，需要跳很多次才能找到，相反，组合的结构就很清晰，只有一层）</li></ul><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><ul><li><strong>没有异常机制</strong>，通过 error + 函数返回值 直接返回报错，在外部及时处理错误（也促使开发者封装好会出现 error 的代码块，减少主函数的层级）</li><li>通过 <strong>panic + recover</strong> 机制捕获协程中发生的严重错误（如空指针）</li></ul><h2 id="基本类型和关键字"><a href="#基本类型和关键字" class="headerlink" title="基本类型和关键字"></a>基本类型和关键字</h2><ul><li><strong>切片（slice）和数组（array）</strong>: 切片包含数组、长度（len）和容量（cap）</li><li><strong>map</strong>: 非协程安全的 map（slice 也是非协程安全的，go 设计上就是让 channel 成为唯一的协程间通信对象）</li><li><strong>defer:</strong> 常用于释放资源、panic 处理</li><li><strong>make</strong>: 申请切片、map 和 channel 的空间</li><li><strong>init 方法</strong>: 被引用的时候，包内的所有 init 方法会自动执行。单个包内的 init 方法执行顺序按 文件名字段序 -&gt; 方法从上到下 的顺序执行，<a href="https://go.dev/ref/spec#Package_initialization">参考</a></li><li><strong>声明对象的方式</strong>: 通过 <strong>var</strong> 指定对象名称和类型，或直接 <strong>a := 1</strong>，编译器自动识别字段类型</li><li><strong>const</strong>: 声明常量</li><li><strong>iota</strong>: 枚举，只能是数值</li><li><strong>空白标识符</strong>: 下划线(_)，可用于忽略返回值，迭代 slice 或者 map 时忽略 下标/key，以及 init import（只执行包的 init 方法，不需要显式调用包的资源，如: import _ “net/http/pprof”）</li><li><strong>select case</strong>: 多个 Channel 同时读取方式</li><li><strong>总共只有[25个关键字]</strong>(<a href="https://articles.wesionary.team/know-about-25-keywords-in-go-eca109855d4d)%EF%BC%8C%E7%9B%B8%E6%AF%94">https://articles.wesionary.team/know-about-25-keywords-in-go-eca109855d4d)，相比</a>: C99 有 37 个，C++11 有 84 个</li></ul><h2 id="原生库和方法"><a href="#原生库和方法" class="headerlink" title="原生库和方法"></a>原生库和方法</h2><ul><li><strong>time</strong>: 时间，方法有 time.Parse, time.Now, time.DateTime（常量 2006-01-02 15:04:05）等</li><li><strong>io.ReadAll</strong>: 数据流</li><li><strong>bytes.Buffer</strong>: 字符串缓冲</li><li><strong>strings、maps、slices</strong>: 集合类型的工具方法，如 strings.ReplaceAll、maps.Clone、slices.Sort 等</li><li><strong>regexp</strong>: 正则</li><li><strong>net/http</strong>: http 核心库</li><li><strong>sort</strong>: 1.19 之前的数组排序库</li><li><strong>log/slog</strong>: 1.21 新增的日志库，支持等级和格式化打印</li><li><strong>sync</strong>: 协程之间同步、状态共享的相关组件库。<strong>Mutex</strong>: 锁；<strong>Once</strong>: 只执行一次；<strong>WaitGroup</strong>: 等待n个协程执行；<strong>Pool</strong>: 协程间复用对象；<strong>Cond</strong>: 等待和唤醒</li></ul><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><ul><li><strong>reflect.TypeOf</strong>: 获取对象的具体<strong>类型</strong></li><li><strong>reflect.Kind</strong>: 获取对象的<strong>类别</strong>（和类型的区别: 具体值或指针的类别为 interface / pointer，类型可以拿到具体的 struct或接口类型）</li><li><strong>reflect.ValueOf</strong>: 获取对象的具体值</li><li><strong>struct tag</strong>: 标注 struct 内属性的附加信息，一般用于 json序列化、yaml 内容解析、orm 字段映射等场景</li></ul><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><ul><li><strong>协程（Routine）</strong>: 用户层的“线程”，通过 <strong>go func()</strong> 开启并发</li><li><strong>管道（Channel）</strong>: 协程间的通信方式</li><li><strong>上下文（Context）</strong>: 协程间传递数据、父协程控制子协程状态的媒介</li></ul><h2 id="运行时（Runtime）"><a href="#运行时（Runtime）" class="headerlink" title="运行时（Runtime）"></a>运行时（Runtime）</h2><ul><li><strong>GPM</strong>: Go 进程的核心，协程（Goroutine）、处理器（Processor）、系统线程（Machine）</li><li><strong>GC</strong>: 三色标记法、混合写屏障等</li></ul><h2 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h2><ul><li><strong>从 git 路径引用依赖</strong>，没有“官方仓库”的说法，去中心化的设计</li><li>以 git tag 或者 commit id 作为版本标识</li><li>对象和方法是否对外可见，通过首字母大小写来标识，大写为开放，简单明了</li></ul><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li><strong>gofmt、goformat、staticcheck</strong>: 代码格式化</li><li><strong>test、bench、fuzz</strong>: 普通测试、并发测试、混沌测试</li><li><strong>doc</strong>: 文档，go 的文档可在源码中通过注释编写，并自动生成</li></ul><p>以上就是自己常接触的原生库了，可以从 <a href="https://github.com/golang/go/tree/master/src">go源码的src目录</a> 更多的实现细节</p><!--## Sync- Mutex- Once- WaitGroup- Pool- Cond## package & import- from git tag / latest- import git path（ repo decentralized, can be same name ）- name case indicate visiable- not allow circle import## tools- gofmt / goformat / staticcheck- test / bench / fuzz- doc- gopls--><h1 id="自己写的和go有关的博客"><a href="#自己写的和go有关的博客" class="headerlink" title="自己写的和go有关的博客"></a>自己写的和go有关的博客</h1><p><a href="https://blog.csdn.net/xiaoliizi/article/details/133747191">golang 编程规范查漏补缺</a></p><p><a href="https://blog.csdn.net/xiaoliizi/article/details/107568024">golang-使用 go test 输出单元测试覆盖率</a></p><p><a href="https://blog.csdn.net/xiaoliizi/article/details/111768852">golang-单元测试和mock框架的介绍和推荐</a></p><p><a href="https://blog.csdn.net/xiaoliizi/article/details/111461690">golang-使用 godoc 工具编写代码注释</a></p><p><a href="https://blog.csdn.net/xiaoliizi/article/details/113177952">golang-文章翻译-go高效编程</a></p><p><a href="https://blog.csdn.net/xiaoliizi/article/details/118873747">golang-文章翻译-go常见的10种错误</a></p><p><a href="https://mp.weixin.qq.com/s/H6QUS0CtW_qUBSdXTK8E_w">vscode 使用技巧（vscode+go插件的开发环境）</a></p><h1 id="go-学习方法总结"><a href="#go-学习方法总结" class="headerlink" title="go 学习方法总结"></a>go 学习方法总结</h1><h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><p>Go 的官网其实是最好的学习资料，教程、博客、社区动态都有，绝对适合作为入门资料的第一位</p><p>下面说明官网中右上角各个栏目的内容</p><p><img src="/2023/10/23/golang-origin/go.dev.png" alt="go官网"></p><h3 id="为什么使用-Go（Why-Go）"><a href="#为什么使用-Go（Why-Go）" class="headerlink" title="为什么使用 Go（Why Go）"></a>为什么使用 Go（Why Go）</h3><p>大体就是 Go 在一些通用领域的使用场景，以及在大厂的使用情况</p><p>Case Studies: 大厂的使用场景，如 Google、CloudFare、Meta、Netflix 等</p><p>Use Cases: 在云服务、网络通信、命令行工具、网页/客户端应用 和 运维和可持续开发（DevOps、SRE）领域的应用<br>每一个领域下都有比较流行的开源项目的推荐</p><p>Security: 如何提升自己工程的安全性，如通过 <a href="https://go.dev/doc/tutorial/govulncheck">govulncheck</a> 检查项目存在哪些已知漏洞</p><h3 id="Learn"><a href="#Learn" class="headerlink" title="Learn"></a>Learn</h3><p>非常适合上手的 <a href="https://go.dev/tour">go tour</a>，几乎覆盖了 go，可以说练习完所有示例就会写 go 代码了</p><h3 id="Docs"><a href="#Docs" class="headerlink" title="Docs"></a>Docs</h3><p><a href="https://go.dev/doc">所有官方文章</a>: 可以挑讲原理的文章看，如 Using and understanding Go 中的 <a href="https://go.dev/doc/gc-guide">A Guide to the Go Garbage Collector</a> 以及 References 中的 <a href="https://go.dev/ref/mem">The Go Memory Model</a></p><p><a href="https://go.dev/doc/effective_go">Effective Go</a>: 上手之后，进一步了解 go 编程风格的必读文章</p><p><a href="https://pkg.go.dev/std">std</a>: 标准库文档</p><p><a href="https://go.dev/doc/faq">faq</a>: 囊括了从其他语言迁到 go 语言的常见问题，也体现了 go 的设计思想</p><h3 id="社区"><a href="#社区" class="headerlink" title="社区"></a>社区</h3><p><a href="https://go.dev/blog">blog</a>: go 博客，社区新动态</p><h2 id="开源项目和代码推荐"><a href="#开源项目和代码推荐" class="headerlink" title="开源项目和代码推荐"></a>开源项目和代码推荐</h2><h3 id="go"><a href="#go" class="headerlink" title="go"></a>go</h3><p>go 本身的源码就很好阅读，也和 go 本身语法比较简洁有关。如果你想了解 go 的基础库的原理，大可不用搜一堆博客，一点点地消化别人的总结，读go源码就是最好的学习go原理的方法<br>包括: sync, runtime, context, reflect，这些都是 go 的核心库</p><h3 id="web-应用"><a href="#web-应用" class="headerlink" title="web 应用"></a>web 应用</h3><p>开发后台必须要掌握的就是 web 框架，当然不同公司对它的定制化也会不同，如果想从简单的入手，使用官方推荐的 gin 就行。想参考大厂实际用的，可参考国内开发者开源的 web 框架（功能比较全），如字节的 hertz、go-zero、goframe 等</p><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p>gorm: 数据库 orm 库<br>redis: redigo<br>kafka: sarama</p><h3 id="云原生和监控"><a href="#云原生和监控" class="headerlink" title="云原生和监控"></a>云原生和监控</h3><p>如 Kubernetes、Istio、Prometheus、Grafana 等，也能接触到当下比较流行的项目</p><h3 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h3><p>以往我们需要用工具进行文档格式转换、爬虫、文件批量下载等场景，可能会主要以 python 项目作参考，因为它语法简单，执行方便，你需要的只是一个 python 环境</p><p>现在，拥有类似特性的 go 让我们多了一个选项，同样的需求，也可以看 go 社区有没有现成的方案。甚至 go 只需要编译好的可执行文件，更加方便</p><p>具体用哪个工具因需求而异，可以参考<a href="https://github.com/shockerli/go-awesome">别人的整理</a>，其中 <a href="https://github.com/shockerli/go-awesome?tab=readme-ov-file#%E7%BB%88%E7%AB%AF%E5%B7%A5%E5%85%B7">终端工具</a>、<a href="https://github.com/shockerli/go-awesome?tab=readme-ov-file#%E7%BD%91%E7%BB%9C">网络工具</a> 都有不错的项目参考，这里列几个可能比较常用的:</p><p><a href="https://github.com/gohugoio/hugo">hugo</a>: 博客网站生成，类似 hexo</p><p><a href="https://github.com/gobuffalo/buffalo">buffalo</a>: 快速生成 web 项目</p><p><a href="https://github.com/charmbracelet/vhs">vhs</a>: 终端录制</p><p><a href="https://github.com/Code-Hex/pget">pget</a>: 并发下载</p><p><a href="https://github.com/fsnotify/fsnotify">fsnotify</a>: 系统文件监听</p><p><a href="https://github.com/iawia002/lux">lux</a>: 网站视频下载工具（不能下载需要登录才能下的超高画质）</p><p><a href="https://github.com/golang-migrate/migrate">migrate</a>: 跨不同类型数据库迁移</p><h2 id="博客推荐"><a href="#博客推荐" class="headerlink" title="博客推荐"></a>博客推荐</h2><p>golang 在国内大厂实践还是比较多的，因此国内开发者写的博客也不会缺少。本着技术的学习方法来说，这里推荐两个博主 分别对应前沿动态，和深度剖析原理</p><p><a href="https://blog.csdn.net/EDDYCJY?type=blog">煎鱼</a>: go 语言开发者，对 go 社区动态、新版本特性的跟踪比较及时，类似的博主还有 <a href="https://polarisxu.studygolang.com/">polarisxu</a></p><p><a href="https://draveness.me/golang">go语言设计与实现</a>: go 原理和设计思想，这个博客对技术的思考方式值得应用到所有技术的学习上: 从为什么这么设计的问题基础上，去理解技术实现细节</p>]]></content>
    
    
    <summary type="html">关于 go 的起源，特点以及学习建议</summary>
    
    
    
    <category term="编程语言" scheme="http://smiecj.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="golang" scheme="http://smiecj.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/golang/"/>
    
    
    <category term="golang" scheme="http://smiecj.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>树莓派搭建开发环境</title>
    <link href="http://smiecj.github.io/2023/10/15/rasp-dev/"/>
    <id>http://smiecj.github.io/2023/10/15/rasp-dev/</id>
    <published>2023-10-14T16:00:00.000Z</published>
    <updated>2023-11-26T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/sg8bsfQe3YK72_d3Ss8vyw">本文公众号</a></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>自从上次心血来潮给树莓派装完系统，一直没想好怎么具体使用它的场景，它就这样默默地躺在抽屉吃灰了一年</p><p>再次想起它，是一个周日的下午：收到之前在腾讯云买的云服务器快过期的提醒，一个4核8G内存的ubuntu，平时主要用它作为开发机，在本地电脑性能不够的时候，辅助 <strong>调试代码</strong>，以及 <strong>编译服务</strong> ，还是非常顺滑的</p><p>但随后登录控制台，一看续期的价格，同样性能比去年要贵个200多（去年 388，今年 646），横向对比了国内几个云厂商价格也都差不多，索性放弃续期了，想着有没有其他办法整个独立的开发环境呢？</p><p>让家里台式机一直跑着是种方法，windows 的 wsl 已经非常完善，完全可以当 linux 开发机用了</p><p>不过目前自己要跑的服务，也用不上台式机的性能，还有没有<strong>更轻量</strong>运行的方式呢？</p><p>这不就正好，终于可以重新唤醒尘封已久的树莓派咯。虽然4U4G的性能说不上绰绰有余，但就跑几个服务来说还是足够的</p><!--毕竟 windows 后台还要跑一堆其他东西，空闲时候比linux系统更耗电--><h2 id="本文内容"><a href="#本文内容" class="headerlink" title="本文内容"></a>本文内容</h2><ul><li><p>搭建开发环境（docker、各开发语言、code server）</p></li><li><p>文件服务器（samba）</p></li><li><p>监控（prometheus + grafana + node exporter）</p></li><li><p>远程桌面连接</p></li><li><p>智能开关</p></li><li><p>后续展望</p></li></ul><h2 id="系统准备"><a href="#系统准备" class="headerlink" title="系统准备"></a>系统准备</h2><p>我的树莓派上安装的是 ubuntu 22，通过 <a href="https://www.raspberrypi.com/news/raspberry-pi-imager-imaging-utility">raspberry pi imager</a>（官方刷系统工具）刷入系统并安装，具体的安装可以参考去年写的<a href="https://mp.weixin.qq.com/s/N6fEJuDNg5vYKcbl5x_7KA">博客</a></p><h2 id="安装开发环境"><a href="#安装开发环境" class="headerlink" title="安装开发环境"></a>安装开发环境</h2><p>笔者比较熟悉的开发模式: docker + 各语言开发环境 + <a href="https://mp.weixin.qq.com/s/H6QUS0CtW_qUBSdXTK8E_w">vscode</a>，在树莓派上原样进行安装</p><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><p>安装 docker 的目的主要是能快速启动与主机环境隔离的容器，并进行服务编译。特别是编译 C++ 服务的时候，centos、ubuntu 这类的系统镜像自带的 gcc、glibc 版本往往不足要求，需要升级，但 <a href="https://zh.wikipedia.org/wiki/GNU_C%E5%87%BD%E5%BC%8F%E5%BA%AB">glibc</a> 的升级稍有操作不慎，又会对系统本身造成影响，所以还是建议在容器中编译相关服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用阿里源安装 docker</span></span><br><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line">sh get-docker.sh --mirror Aliyun</span><br></pre></td></tr></table></figure><p>安装后查看版本:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ docker -v</span><br><span class="line">Docker version 24.0.7, build afdd53b</span><br></pre></td></tr></table></figure><p>关于在国内拉取容器镜像下载加速方式: 对不同的镜像仓库，如 <a href="https://hub.docker.com/search?image_filter=official">docker hub 官方镜像</a>、registry.k8s.io（kubernetes 相关服务的镜像仓库，旧域名是 <a href="https://kubernetes.io/blog/2022/11/28/registry-k8s-io-faster-cheaper-ga">k8s.gcr.io</a>）、quay.io（红帽镜像仓库）等，使用的仓库代理地址各有不同</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 原拉取镜像方式</span></span><br><span class="line">docker pull mysql:8.0.31</span><br><span class="line">docker pull registry.k8s.io/kube-apiserver:v1.17.3</span><br><span class="line">docker pull quay.io/dexidp/dex:v2.28.1</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用镜像仓库代理拉取方式</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># docker hub 官方镜像: 设置中科大镜像加速器</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 参考: https://mirrors.ustc.edu.cn/help/dockerhub.html</span></span></span><br><span class="line">tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 重启docker 后再拉取</span></span></span><br><span class="line">docker pull mysql:8.0.31</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># registry.k8s.io</span></span></span><br><span class="line">docker pull registry.aliyuncs.com/google_containers/kube-apiserver:v1.17.3</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># quay</span></span></span><br><span class="line">docker pull quay.mirrors.ustc.edu.cn/dexidp/dex:v2.28.1</span><br></pre></td></tr></table></figure><h3 id="各个语言的开发环境"><a href="#各个语言的开发环境" class="headerlink" title="各个语言的开发环境"></a>各个语言的开发环境</h3><p>关于各种开发语言如何安装环境，网上教程一大把，过程无外乎是下载和解压安装包、环境变量配置和下载源配置，熟悉了操作也快，但每次重装系统，或者基于一个基础镜像安装开发环境，都需要重新操作一遍还是挺麻烦的</p><p>笔者把常用语言和服务的安装脚本整理在 <a href="https://github.com/smiecj/shell-tools">shell-tools</a> 这个仓库了，可以直接一行指令帮我安装，还可以指定需要安装的版本</p><p>比如安装 go、java、python 和 nodejs:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> go_version: 指定版本，默认版本在 Makefile.vars.version 中定义</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> NET=CN: go 安装包将从国内源加速下载，并在安装后设置 GOPROXY 为 goproxy.cn</span></span><br><span class="line">NET=CN go_version=1.21.4 make golang</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将安装 jdk1.8 (默认开发环境 JAVA_HOME)、jdk17（vscode java 插件使用）、maven、gradle</span></span><br><span class="line">NET=CN make java</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将安装 conda、python 3.12</span></span><br><span class="line">NET=CN python3_version=3.12 make python3</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将安装 nodejs 18.16.1</span></span><br><span class="line">NET=CN nodejs_version=v18.16.1 make nodejs</span><br></pre></td></tr></table></figure><p>升级 gcc、glibc，也可以使用这个脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 升级 gcc 到 12.3.0</span></span><br><span class="line">NET=CN gcc_version=12.3.0 make gcc</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 升级 glibc 到 2.35</span></span><br><span class="line">NET=CN glibc_version=2.35 make glibc</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> glibc 的默认安装地址为 /usr/<span class="built_in">local</span>，因此使用前需要设置环境变量，把 /usr/<span class="built_in">local</span>/lib 放到前面</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 参考: https://unix.stackexchange.com/a/67783</span></span></span><br><span class="line">export LD_LIBRARY_PATH=/usr/local/lib:/usr/local/lib64:/lib</span><br></pre></td></tr></table></figure><h3 id="code-server"><a href="#code-server" class="headerlink" title="code server"></a>code server</h3><p>关于 vscode 之前写过常用插件的介绍，远程开发模式下，本地装 vscode，通过 remote ssh 连接到远端服务器，再安装各个开发语言的插件，体验还是很丝滑的</p><p><img src="/2023/10/15/rasp-dev/01.png" alt="local architecture"></p><p>架构如<a href="https://code.visualstudio.com/docs/remote/faq#_how-do-the-remote-development-extensions-work">上图</a>: 本地运行 vscode 的前端UI框架，后台服务器自动运行 vscode server，负责具体项目和具体开发语言的插件的运行，并提供 debugger、terminal 等功能</p><p>更进一步，我们还可以直接在远端服务器安装 <a href="https://coder.com/docs/code-server/latest">code server</a>，它是 vscode 的在线版，相当于UI服务也在服务器上运行，直接通过浏览器就能打开了</p><p><img src="/2023/10/15/rasp-dev/code-server-architecture.png" alt="local and remote architecture"></p><p>vscode 和 code server 的对比如<a href="https://insujang.github.io/2019-11-10/code-server">上图</a>，区别就是 nodejs（即 UI）也是运行在服务器上的，本机只需打开浏览器即可</p><p>code server 在树莓派的安装和配置方式如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 通过 shell-tools 安装 code server 4.19.0</span></span><br><span class="line">code_server_version=4.19.0 make code-server</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置: /opt/modules/code-server-4.18.0-linux-arm64/config.yaml</span></span><br><span class="line">bind-addr: 0.0.0.0:8080</span><br><span class="line">auth: password</span><br><span class="line">password: codeserver</span><br><span class="line">cert: false</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">nohup /opt/modules/code-server-4.19.0-linux-arm64/bin/code-server --config /opt/modules/code-server-4.19.0-linux-arm64/config.yaml &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>之后打开 http://树莓派内网ip:8080 就能开始愉快地享受网页版 vscode 了</p><p><img src="/2023/10/15/rasp-dev/05.png" alt="code server 效果"></p><p>扩展: 如果你想把 code server 提供给小伙伴们一起使用，配置就比较麻烦了，需要加一层 <a href="https://coder.com/docs/code-server/latest/guide#external-authentication">oauth proxy</a> 或其他代理，以支持多用户登录。 <a href="https://github.com/jupyterhub/jupyter-server-proxy">jupyterhub</a> 也是一种选择，后续有机会可以写写具体怎么做</p><!--### minikube后续: 测试 jupyter--><h2 id="文件服务器"><a href="#文件服务器" class="headerlink" title="文件服务器"></a>文件服务器</h2><p>除了用于开发，树莓派作为常驻 linux 主机，还可以安装 samba 并作为文件服务器，视频、音乐等媒体统一放到一块硬盘上，作为本地的媒体库</p><h3 id="samba"><a href="#samba" class="headerlink" title="samba"></a>samba</h3><p>samba 服务对应的 <a href="https://baike.baidu.com/item/samba/455025">SMB</a>（Server Message Block） 是一种在局域网中共享文件的协议，直接说下它在linux系统的安装方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装 samba，并添加 samba 的访问用户（注意和系统用户不同）</span></span><br><span class="line">apt -y install samba samba-common-bin</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加用于登录 samba 的用户: pi, 并设置密码</span></span><br><span class="line">smbpasswd -a pi</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 激活用户</span></span><br><span class="line">smbpasswd -e pi</span><br></pre></td></tr></table></figure><p>安装后，在 /etc/samba/smb.conf 中配置开放访问的目录</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># vim /etc/samba/smb.conf</span></span><br><span class="line"></span><br><span class="line"><span class="section">[music]</span></span><br><span class="line"><span class="attr">path</span> = /data/music</span><br><span class="line"><span class="attr">writeable</span>=<span class="literal">Yes</span></span><br><span class="line">valid <span class="attr">users</span> = pi</span><br><span class="line">create <span class="attr">mask</span>=<span class="number">0777</span></span><br><span class="line">directory <span class="attr">mask</span>=<span class="number">0777</span></span><br><span class="line"><span class="attr">public</span>=<span class="literal">yes</span></span><br><span class="line"><span class="attr">browseable</span>=<span class="literal">yes</span></span><br></pre></td></tr></table></figure><h3 id="挂载机械硬盘"><a href="#挂载机械硬盘" class="headerlink" title="挂载机械硬盘"></a>挂载机械硬盘</h3><p>在尝试把之前买的机械硬盘（作为媒体数据盘）挂载到树莓派的时候，遇上了一点小问题: 硬盘格式已经是 NTFS 并且放了一些数据了，但linux 系统无法直接读取，需要安装 <a href="https://zh.wikipedia.org/wiki/NTFS-3G">ntfs-3g</a> 驱动才行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt -y install ntfs-3g</span><br></pre></td></tr></table></figure><p>并在 /etc/fstab 中设置开机自动挂盘，参考</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/dev/sdb1       /data/music   ntfs-3g defaults,nofail,uid=1000,gid=1000,umask=0007,x-systemd.device-timeout=5         0       0</span><br></pre></td></tr></table></figure><h2 id="远程桌面"><a href="#远程桌面" class="headerlink" title="远程桌面"></a>远程桌面</h2><p>对 linux 系统来说，平时开发写写代码敲敲指令，是不太需要访问桌面的。不过有时想体验 linux 版的应用（QQ），还是可以装个远程桌面来体验一下</p><p>常见的远程桌面协议是 xrdp 和 vnc，这里我们通过 xrdp 来配置:</p><!--[参考-Installing an XRDP Server on Ubuntu 20.04](https://www.shells.com/l/en-US/tutorial/Installing-an-XRDP-Server-on-Ubuntu-20-04)[xrdp](https://github.com/neutrinolabs/xrdp): 远程桌面协议（RDP）的一种开源实现[xfce](https://zh.wikipedia.org/zh-cn/Xfce): 一个轻量的 unix 桌面版[lxde](https://zh.wikipedia.org/wiki/LXDE): 一种轻量而快速的桌面环境--><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装 xrdp</span></span><br><span class="line">apt -y install xrdp</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 lxde cinnamon 桌面</span></span><br><span class="line">apt -y install lxde cinnamon-desktop-environment</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> xsession 在用户登录桌面系统后被执行，可用于定制化桌面</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 参考: https://unix.stackexchange.com/a/47426</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用 cinnamon 作为桌面</span></span><br><span class="line">echo cinnamon &gt; ~/.xsession</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 修改 /etc/xrdp/startwm.sh 并在 &quot;fi&quot; 和 “test -x” 中间加3行</span></span></span><br><span class="line">unset DBUS_SESSION_BUS_ADDRESS</span><br><span class="line">unset XDG_RUNTIME_DIR</span><br><span class="line">startlxde</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动 xrdp</span></span><br><span class="line">systemctl start xrdp</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或: /etc/init.d/xrdp restart</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 开机自启动</span></span><br><span class="line">systemctl enable xrdp</span><br></pre></td></tr></table></figure><p>xrdp 的端口 3389 可以在 /etc/xrdp/xrdp.ini 配置中查看和修改</p><p>然后通过 microsoft remote desktop 连接:</p><p><img src="/2023/10/15/rasp-dev/06.png" alt="桌面"></p><p>非常简洁的桌面</p><p>然后我们可以安装新版适配了 linux 的 QQ，从<a href="https://im.qq.com/linuxqq/index.shtml">官网</a>下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载</span></span><br><span class="line">wget https://dldir1.qq.com/qqfile/qq/QQNT/2355235c/linuxqq_3.1.1-11223_arm64.deb</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line">dpkg -i linuxqq_3.1.1-11223_arm64.deb</span><br></pre></td></tr></table></figure><!--参考: https://cloud.tencent.com/developer/article/2301512--><h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><p>到这一步，我们给树莓派装的开发环境算是基本弄好了，可以愉快地在上面构建镜像、运行服务，不过摸着那微微发烫的 cpu，担心也随之而来: 是不是有个好看的面板，能直接看到当前树莓派的状态，做个监控更好呢？</p><p>那就话不多说，开始整看板吧</p><h3 id="获取树莓派的性能指标"><a href="#获取树莓派的性能指标" class="headerlink" title="获取树莓派的性能指标"></a>获取树莓派的性能指标</h3><!--[Parsing the GPU temperature outputs](https://www.cyberciti.biz/faq/linux-find-out-raspberry-pi-gpu-and-arm-cpu-temperature-command/)--><p>先来看看命令行获取树莓派 cpu 的温度的方式:</p><p><a href="https://blog.csdn.net/lakeheart879/article/details/77336393">参考-使用 vcgencmd 指令查看 Raspberry Pi 的 CPU 溫度、運行速度與電壓等資訊</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vcgencmd measure_temp | grep  -o -E &#x27;[[:digit:]].*&#x27;</span><br></pre></td></tr></table></figure><p><img src="/2023/10/15/rasp-dev/07.png" alt="cpu 温度"></p><p>vcgencmd 指令是基于树莓派的内核 <a href="https://github.com/raspberrypi/firmware">firmware</a> 自带的指令，能拿到关于系统资源和硬件状态相关信息，如时钟频率、电压、内存等</p><p>但通过指令获取参数的方式，采集起来需要额外写脚本，相比 exporter 的方式来说还是不太方便，那么有没有原生的 exporter 可以直接拿到温度数据呢？</p><h3 id="node-exporter"><a href="#node-exporter" class="headerlink" title="node exporter"></a>node exporter</h3><p>前面说的系统指令只是粗略看看 cpu 的指标，要想持续监控，还得通过 prometheus 采集、exporter 提供系统指标的机制，把相关指标提前暴露出来</p><p><a href="https://github.com/prometheus/node_exporter">node exporter</a> 是提供系统相关监控指标的服务，在树莓派上部署它的 arm 版本后，可通过 <strong>node_thermal_zone_temp</strong> 指标获取温度，数据来源是系统文件 /sys/class/thermal/thermal_zone0/temp 即由系统直接提供的 cpu 温度数据</p><h3 id="部署-prometheus、node-exporter-和-grafana"><a href="#部署-prometheus、node-exporter-和-grafana" class="headerlink" title="部署 prometheus、node exporter 和 grafana"></a>部署 prometheus、node exporter 和 grafana</h3><p>继续使用 shell-tools 工具一键安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装 prometheus 和 node exporter</span></span><br><span class="line">prometheus_version=2.45.0 node_exporter_version=1.6.1 NET=CN make prometheus</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 grafana</span></span><br><span class="line">grafana_version=10.2.0 NET=CN make grafana</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">/opt/modules/prometheus/prometheus --web.enable-lifecycle --config.file=/opt/modules/prometheus/prometheus.yml --web.listen-address=:3001</span><br><span class="line"></span><br><span class="line">/opt/modules/grafana/bin/grafana-server --homepath /opt/modules/grafana --config /opt/modules/grafana/conf/custom.ini</span><br><span class="line"></span><br><span class="line">/opt/modules/node_exporter/node_exporter --web.listen-address=&quot;:9100&quot;</span><br></pre></td></tr></table></figure><p>安装后，在 prometheus 配置文件中添加 node exporter 的本地地址即可开始采集指标</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /opt/modules/prometheus/prometheus.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&quot;node_exporter&quot;</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&quot;localhost:9100&quot;</span>] <span class="comment"># node exporter 地址</span></span><br></pre></td></tr></table></figure><h3 id="prometheus-对接-grafana"><a href="#prometheus-对接-grafana" class="headerlink" title="prometheus 对接 grafana"></a>prometheus 对接 grafana</h3><p>采集到指标后，关键的一步就是用“酷炫”的grafana看板展示出来，让我们能及时看到系统状态</p><p>node exporter 的官方的看板是 <a href="https://grafana.com/grafana/dashboards/1860-node-exporter-full">node exporter full</a>，分类非常详细，导入看板的 json 文件，并添加 prometheus 数据源（localhost:3001）即可</p><p><img src="/2023/10/15/rasp-dev/10.png" alt="导入看板"></p><p><img src="/2023/10/15/rasp-dev/11.png" alt="选择 prometheus 数据源"></p><p><img src="/2023/10/15/rasp-dev/04.png" alt="看板效果"></p><!--嵌入式Linux下获取CPU温度方法https://blog.csdn.net/qq_20553613/article/details/107703442--><h2 id="开机服务自动启动"><a href="#开机服务自动启动" class="headerlink" title="开机服务自动启动"></a>开机服务自动启动</h2><p>前面我们给树莓派已经安装了一系列服务，那么有时候树莓派要重启，我们会想让这些服务也在系统重启后自动启动。docker 这种通过 systemctl 管理的服务，直接执行 systemctl enable docker 就可以了，手动安装的 code server 、prometheus，应该怎么配置呢？</p><p>方法也有很多种，常见的有: rc.local、init.d、crontab @reboot 等方法，它们执行的时机各有不同</p><p><a href="https://shumeipai.nxez.com/2023/05/13/run-a-program-on-your-raspberry-pi-at-startup.html">参考-在树莓派上设置应用程序开机启动的五种方法</a></p><h3 id="什么时候触发执行"><a href="#什么时候触发执行" class="headerlink" title="什么时候触发执行"></a>什么时候触发执行</h3><p>linux 系统启动后，<a href="https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/4/html/reference_guide/s2-boot-init-shutdown-init">/sbin/init</a> 脚本会进行一众系统服务的初始化，顺序我们可以通过 systemd-analyze plot &gt; startup_order.svg 导出，一些自动启动的脚本启动顺序如下:</p><p>/etc/init.d: 最先初始化的一批系统服务</p><!--顺序依赖于服务配置，和 systemd 服务的定义方式类似，可以通过编写 --><p>rc.local: network 即网络服务启动之后</p><p>crontab @reboot: network 启动之前</p><!-- --><p>为什么要特别提到启动顺序，因为有的服务依赖网络相关的基础服务（如网卡初始化），如果通过 /etc/init.d 或是 crontab @reboot 很可能启动失败。相对比，rc.local 的启动顺序较后，可以保证在系统基础服务启动后开始。另外从配置方式来看，systemctl 和 /etc/init.d 都需要基于一定的格式规范，如服务名、依赖哪些服务等，rc.local 则直接写入服务的启动指令即可</p><p>下面我们来看看 rc.local 如何配置</p><h3 id="rc-local-添加服务启动指令"><a href="#rc-local-添加服务启动指令" class="headerlink" title="rc.local 添加服务启动指令"></a>rc.local 添加服务启动指令</h3><p>root 用户下编辑 /etc/rc.local 文件，添加服务的启动指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> vim /etc/rc.local</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动 prometheus</span></span><br><span class="line">nohup /opt/modules/prometheus/prometheus --web.enable-lifecycle --config.file=/opt/modules/prometheus/prometheus.yml --web.listen-address=:3001 &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动 grafana</span></span><br><span class="line">nohup /opt/modules/grafana/bin/grafana-server --homepath /opt/modules/grafana --config /opt/modules/grafana/conf/custom.ini &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动 node exporter</span></span><br><span class="line">nohup /opt/modules/node_exporter/node_exporter --web.listen-address=&quot;:9100&quot; &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>之后通过 chmod +x /etc/rc.local 添加可执行文件，重启树莓派再次登录，可以看到相关服务已经运行起来了</p><p>另一个注意点是 rc.local 中的指令是串行执行，前面的指令报错，后面的也不会执行，所以也建议通过 nohup 即后台方式启动服务</p><!--另外看一些帖子，即使 rc.local 执行顺序在 network 之后，在启动时执行 wget 下载依然有概率失败service networking restartsystemctl status networkingoneshot: https://askubuntu.com/a/1072463/etc/network/if-up.d: https://askubuntu.com/a/431449关于脚本执行: https://askubuntu.com/a/243083--><h2 id="智能插座"><a href="#智能插座" class="headerlink" title="智能插座"></a>智能插座</h2><p>毕竟性能有限，随着我们在树莓派上部署的服务越来越多，也难免会遇到资源用尽，直接卡住无法连接的情况，除了重启没有别的恢复办法</p><p>好几次在外面远程连接家里树莓派，跑了几个比较吃资源的服务卡住之后，又没法重启，真的是很无奈，索性搞了个小米智能插座，感受了一波物联网带来实际的便利</p><p><img src="/2023/10/15/rasp-dev/08.jpeg" alt="只够插一个插头的位置，稍显不足"></p><p><img src="/2023/10/15/rasp-dev/09.png" alt="还能看到供电量"></p><h2 id="后续展望"><a href="#后续展望" class="headerlink" title="后续展望"></a>后续展望</h2><p>经过了一个多月的折腾，我的树莓派终于可以作为开发服务器长期跑起来了。相比开头说的云服务器，性能方面稍弱，但也带来可以对接本地数据、可随时在手机端重启等好处</p><p>之后还能在上面跑什么服务，或者还能和现实世界有什么交互呢？我也还没有特别想好，就粗略地列一列零散的点子吧，看看以后有没有时间继续折腾一下</p><!--本地运行一些定时服务，构建镜像，运行服务，备份数据等（如监控数据）系统备份: 前面的安装服务、修改服务配置和系统配置相关的操作，如果--><p>nas: 我是真没想到竟然真有人去把树莓派当作 nas，<a href="https://post.smzdm.com/p/a4p6d8r8">参考</a>，数据传输速度上的瓶颈应该还是挺明显的，当作小型文件服务器才比较现实</p><p>本地文档库+媒体库: 归档自己所有的音乐、相册、视频、电子书等</p><p>传感器: 搞个空气质量检测器，<a href="https://www.cirmall.com/articles/35968">参考</a></p><!--找一套物联网框架https://www.xiaoweigod.com/network/2235.htmlhttps://iot.mi.com/new/doc/accesses/direct-access/other-platform-access/control-api --><!--## 最后谨以这篇不那么硬核的技术文章，献给激励我创作的动力来源，总是拥有古灵精怪的魅力，今天全世界最独一无二的男人，新婚快乐！-->]]></content>
    
    
    <summary type="html">树莓派实践 v2</summary>
    
    
    
    <category term="生活" scheme="http://smiecj.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="树莓派" scheme="http://smiecj.github.io/categories/%E7%94%9F%E6%B4%BB/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
    <category term="Linux" scheme="http://smiecj.github.io/tags/Linux/"/>
    
    <category term="树莓派" scheme="http://smiecj.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>致命一击</title>
    <link href="http://smiecj.github.io/2023/10/08/vaundy-todome/"/>
    <id>http://smiecj.github.io/2023/10/08/vaundy-todome/</id>
    <published>2023-10-07T16:00:00.000Z</published>
    <updated>2023-12-15T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/CtuwmCKu_vpPKDhfkVD0kw">本文公众号</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">トドメの一撃</span><br><span class="line">作词 &amp; 作曲 &amp; 编曲: Vaundy</span><br><span class="line"></span><br><span class="line">視界に目前映る深い真紅</span><br><span class="line">この先およそ40000 kilometer</span><br><span class="line"></span><br><span class="line">飘入眼中的，是那抹深邃的暗红</span><br><span class="line">在我们前方，仿佛还有四万公里的漫漫长路</span><br><span class="line"></span><br><span class="line">後ろに迫る互いの傷が</span><br><span class="line">迷う道をさらに迷わせてく</span><br><span class="line">見えず匂わぬ</span><br><span class="line">違えぬ未来が</span><br><span class="line">背中を突いた!</span><br><span class="line"></span><br><span class="line">紧紧追随着我们，曾经给彼此的伤害</span><br><span class="line">让原本就迷茫的前途，更加扑朔迷离</span><br><span class="line">看不见摸不着</span><br><span class="line">彼此截然不同的未来</span><br><span class="line">突然冲向我的后背</span><br><span class="line"></span><br><span class="line">だから</span><br><span class="line">今日の夜は隣にいさせて</span><br><span class="line">隣にいさせて</span><br><span class="line">今夜だけは本気だからね</span><br><span class="line">本気にさせて</span><br><span class="line">こっちにきてもっと</span><br><span class="line">祈りあった未来とて、道が違うのよ アナタ</span><br><span class="line">アナタ ああ</span><br><span class="line">互いの殺意で トドメ喰らっちゃうね</span><br><span class="line">やっぱりやめとくわ</span><br><span class="line"></span><br><span class="line">所以啊</span><br><span class="line">今晚就待在我身边吧</span><br><span class="line">让我在你身边</span><br><span class="line">这份认真只限今夜哦</span><br><span class="line">接受这份真心吧</span><br><span class="line">再过来一点</span><br><span class="line">一同期待的未来，但路途些许不同的你哦</span><br><span class="line">亲爱的你啊</span><br><span class="line">就让我们带上对彼此的杀意，使出致命一击，相迎对方吧</span><br><span class="line">想想还是算了吧</span><br><span class="line"></span><br><span class="line">行く、万年の困難が待つ道</span><br><span class="line">内、四千は光死ぬ常闇</span><br><span class="line">さらに続き、絶えぬ更地</span><br><span class="line">そこに現れた 心見透かすちっぽけな魂</span><br><span class="line">それは散らばるミクロ砂金手のひらに集め</span><br><span class="line">密度高め万年を照らす光の矢を放つ、穿つ</span><br><span class="line"></span><br><span class="line">出发吧，前方等待着的是万年荆棘之路</span><br><span class="line">仔细看，还有那千年都未曾照亮的地狱</span><br><span class="line">再继续，只会是无穷无尽的荒地</span><br><span class="line">未曾想，这里竟然出现了看透我们内心的一只微小灵魂</span><br><span class="line">那是无数细散的沙子，在手中凝聚</span><br><span class="line">放出了足以照亮万年天空的光芒，穿透内心</span><br><span class="line"></span><br><span class="line">こういうのとか</span><br><span class="line">そういうのとか</span><br><span class="line">偽物じゃできないよね</span><br><span class="line"></span><br><span class="line">这样的微微小事</span><br><span class="line">那样的丝丝温馨</span><br><span class="line">凭虚伪之物，可是做不到的哦</span><br><span class="line"></span><br><span class="line">だから</span><br><span class="line">今日の夜は隣にいさせて</span><br><span class="line">隣にいさせて</span><br><span class="line">今夜だけは本気だからね</span><br><span class="line">本気にさせて</span><br><span class="line">こっちにきてもっと</span><br><span class="line">祈りあった未来とて、道が違うのよ アナタ</span><br><span class="line">アナタ ああ</span><br><span class="line">互いの殺意で トドメ喰らっちゃうね</span><br><span class="line">やっぱりやめとくわ</span><br><span class="line"></span><br><span class="line">所以啊</span><br><span class="line">今晚就待在我身边吧</span><br><span class="line">让我在你身边</span><br><span class="line">我的认真只限今夜哦</span><br><span class="line">接受这份真心吧</span><br><span class="line">再过来一点</span><br><span class="line">一同期待的未来，但路途些许不同的你哦</span><br><span class="line">亲爱的你啊</span><br><span class="line">就让我们带上对彼此的杀意，使出致命一击，相迎对方吧</span><br><span class="line">想想还是算了吧</span><br><span class="line"></span><br><span class="line">もしもどこまでも続くなら</span><br><span class="line">せめて今日の一度だけ</span><br><span class="line"></span><br><span class="line">如果啊，我们之间的故事，不管怎样都会继续下去</span><br><span class="line">哪怕只有今宵佳日，也尽情地依靠我吧！</span><br><span class="line"></span><br><span class="line">今日の夜はワタシにさせて</span><br><span class="line">ワタシにさせて</span><br><span class="line">今夜だけはワタシに守らせて</span><br><span class="line">今日の夜が</span><br><span class="line">明けたころに 待ち合わせね</span><br><span class="line">明日の夜も守れますように</span><br><span class="line">こっちにきてもっと</span><br><span class="line">祈りあった未来とて、道が違うのよ アナタ</span><br><span class="line">こっちにきてもっと</span><br><span class="line">アナタ ああ</span><br><span class="line">互いの殺意で トドメ喰らっちゃうね</span><br><span class="line"></span><br><span class="line">今晚就陪在我身边吧！</span><br><span class="line">一切都交给我吧</span><br><span class="line">哪怕只有今夜，也让我好好守护你吧！</span><br><span class="line">如此美妙之夜啊！</span><br><span class="line">到破晓之时，我们继续约会吧</span><br><span class="line">只为明夜，也能一直守护着你</span><br><span class="line">再靠近我一点吧！</span><br><span class="line">一同期待的未来，但路途些许不同的你</span><br><span class="line">就让我再靠近你一点吧！</span><br><span class="line">亲爱的你啊</span><br><span class="line">带上对彼此的杀意，用致命一击迎接对方吧！</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">难舍难分</summary>
    
    
    
    <category term="音乐" scheme="http://smiecj.github.io/categories/%E9%9F%B3%E4%B9%90/"/>
    
    <category term="Vaundy" scheme="http://smiecj.github.io/categories/%E9%9F%B3%E4%B9%90/Vaundy/"/>
    
    
    <category term="音乐" scheme="http://smiecj.github.io/tags/%E9%9F%B3%E4%B9%90/"/>
    
    <category term="日语" scheme="http://smiecj.github.io/tags/%E6%97%A5%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>暮色与京都</title>
    <link href="http://smiecj.github.io/2023/09/18/japan-travel-note-kyoto/"/>
    <id>http://smiecj.github.io/2023/09/18/japan-travel-note-kyoto/</id>
    <published>2023-09-17T16:00:00.000Z</published>
    <updated>2023-09-22T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/6IF1jnZjwDrqeqZX08XakQ">本文公众号地址</a></p><h2 id="伏见稻荷神社"><a href="#伏见稻荷神社" class="headerlink" title="伏见稻荷神社"></a>伏见稻荷神社</h2><p>傍晚和伏见稻荷神社真的是绝配</p><p>和东京的神社，那种与都市融为一体的神社不同，伏见稻荷神社尽管也在京都城区，但给人的感觉却是真正的远离了城市的喧嚣</p><p><img src="/2023/09/18/japan-travel-note-kyoto/kyoto-01.JPG" alt="伏见稻荷神社"></p><p><img src="/2023/09/18/japan-travel-note-kyoto/kyoto-02.JPG" alt="伏见稻荷神社"></p><h2 id="天津饭"><a href="#天津饭" class="headerlink" title="天津饭"></a>天津饭</h2><p>和天津没有什么关系的天津饭，口味也真的很难适应，日料到底还能有多咸，恐怕我也是想象不到了</p><p><img src="/2023/09/18/japan-travel-note-kyoto/kyoto-03.JPG" alt="伏见稻荷神社"></p><h2 id="玉子市场"><a href="#玉子市场" class="headerlink" title="玉子市场"></a>玉子市场</h2><p>来到了玉子和饼藏的名场面之地，虽然没有感受到夕阳西下的氛围，但是跳大乌龟的经历也足够让我记住飛び石这个地名了</p><p>奋力跃过飛び石，再往前走一点就是民风淳朴的“玉子市场”（出町桝形商店街），上午的商业街还略显安静，走走停停，又感觉或许安静平和才是真正专属这条商业街的氛围。动漫里商业街的熙熙攘攘也存在，只是藏在各个角落中，需要慢慢去找寻</p><p><img src="/2023/09/18/japan-travel-note-kyoto/kyoto-04.JPG" alt="飛び石"></p><p><img src="/2023/09/18/japan-travel-note-kyoto/kyoto-05.JPG" alt="飛び石"></p><p><img src="/2023/09/18/japan-travel-note-kyoto/kyoto-06.JPG" alt="似乎每天都会充满活力的商业街"></p><p><img src="/2023/09/18/japan-travel-note-kyoto/kyoto-07.JPG" alt="佑子！"></p><p><img src="/2023/09/18/japan-travel-note-kyoto/kyoto-08.JPG" alt="佑子的那个段子属实没看懂"></p><!-- https://m.youtube.com/watch?v=u8GjG51XzJ8 --><p><img src="/2023/09/18/japan-travel-note-kyoto/kyoto-09.JPG" alt="有点不好找的迪拉"></p><h2 id="二年坂三年坂"><a href="#二年坂三年坂" class="headerlink" title="二年坂三年坂"></a>二年坂三年坂</h2><p>熙熙攘攘的小长街，逛不完的小吃，需要耐心去发现惊喜的伴手礼店</p><p>去清水寺的必经之路，值得回味每一个转角，值得期待每次回头的那瞬间，看着坡下熙熙攘攘的人群和两边的商店融为一体，仿佛在东京之外，找到了人和自然的另一种共存方式</p><p><img src="/2023/09/18/japan-travel-note-kyoto/kyoto-11.JPG" alt="二年坂"></p><p><img src="/2023/09/18/japan-travel-note-kyoto/kyoto-14.JPG" alt="边走边在纪念品店乘凉，生肖不倒翁挺可爱的"></p><p>![快到清水寺，俯瞰上来的路](kyoto-13 .JPG)</p><h2 id="清水寺"><a href="#清水寺" class="headerlink" title="清水寺"></a>清水寺</h2><p>到清水寺刚好是正午，充分感受了一波猛烈的夏日，实在是没有再上清水舞台的欲望了，还是就给远处的京都之景打个卡吧</p><p><img src="/2023/09/18/japan-travel-note-kyoto/kyoto-13.JPG" alt="远眺京都"></p>]]></content>
    
    
    <summary type="html">日本旅游日记系列</summary>
    
    
    
    <category term="旅游" scheme="http://smiecj.github.io/categories/%E6%97%85%E6%B8%B8/"/>
    
    <category term="日本" scheme="http://smiecj.github.io/categories/%E6%97%85%E6%B8%B8/%E6%97%A5%E6%9C%AC/"/>
    
    
    <category term="旅游" scheme="http://smiecj.github.io/tags/%E6%97%85%E6%B8%B8/"/>
    
    <category term="日本" scheme="http://smiecj.github.io/tags/%E6%97%A5%E6%9C%AC/"/>
    
    <category term="日记" scheme="http://smiecj.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>鹿横行注意！</title>
    <link href="http://smiecj.github.io/2023/09/18/japan-travel-note-nara/"/>
    <id>http://smiecj.github.io/2023/09/18/japan-travel-note-nara/</id>
    <published>2023-09-17T16:00:00.000Z</published>
    <updated>2023-09-22T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/yv01ZUx2JthX30od-AtdLw">本文公众号地址</a></p><p>真的被鹿包围了</p><p><img src="/2023/09/18/japan-travel-note-nara/nara-05.JPG" alt="鹿饼"></p><p><img src="/2023/09/18/japan-travel-note-nara/nara-04.JPG" alt="鹿"></p><p><img src="/2023/09/18/japan-travel-note-nara/nara-01.JPG" alt="鹿"></p><p><img src="/2023/09/18/japan-travel-note-nara/nara-02.JPG" alt="东大寺"></p><p>网上看到一种说法，鹿吃鹿饼，其实是为了讨人类欢心</p><p>还真的从小鹿的身上验证了。别的鹿都像猎物一般地扫视周围有鹿饼的人，但小鹿对此毫无兴趣，递到它们嘴边的鹿饼都不吃，似乎只有青青草地才是它们的钟爱</p><p><img src="/2023/09/18/japan-travel-note-nara/nara-03.JPG" alt="人与自然的和谐共处"></p><p>最后在回程路上，还看到了如此和谐的一幕：共同生活，但又有各自的世界，或许这才是人与自然真正的和谐共处方式</p>]]></content>
    
    
    <summary type="html">日本旅游日记系列</summary>
    
    
    
    <category term="旅游" scheme="http://smiecj.github.io/categories/%E6%97%85%E6%B8%B8/"/>
    
    <category term="日本" scheme="http://smiecj.github.io/categories/%E6%97%85%E6%B8%B8/%E6%97%A5%E6%9C%AC/"/>
    
    
    <category term="旅游" scheme="http://smiecj.github.io/tags/%E6%97%85%E6%B8%B8/"/>
    
    <category term="日本" scheme="http://smiecj.github.io/tags/%E6%97%A5%E6%9C%AC/"/>
    
    <category term="日记" scheme="http://smiecj.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>大阪之烟火气</title>
    <link href="http://smiecj.github.io/2023/09/18/japan-travel-note-oosaka/"/>
    <id>http://smiecj.github.io/2023/09/18/japan-travel-note-oosaka/</id>
    <published>2023-09-17T16:00:00.000Z</published>
    <updated>2023-09-22T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/M8P4swRyiDYdU2Fb8M6c3g">本文公众号地址</a></p><p>要说东京和大阪有什么区别，从旅游者的角度来说还真体验不太出来，都是一线城市，都有很繁华的地方和朴素的居民区，工作和生活每天都交织在一起</p><p>但大阪的生活，是那种真正和工作区分开的生活，称得上慢节奏，东京的生活感和这座城市紧密相关，而说到大阪则必定离不开大阪人</p><h3 id="心斋桥和道顿堀"><a href="#心斋桥和道顿堀" class="headerlink" title="心斋桥和道顿堀"></a>心斋桥和道顿堀</h3><p>从心斋桥开始，走过长长的一段街道，两边是各种店铺，有点像在京都那时逛的商业街，不过显然免税店和化妆品店更多点</p><p><img src="/2023/09/18/japan-travel-note-oosaka/oosaka-02.JPG" alt="心斋桥"></p><p>到了格力高，很想拍一张不带人的照片，但实在是没办法 😂 看来台风刚过也不能阻挡大家来打卡的热情</p><p><img src="/2023/09/18/japan-travel-note-oosaka/oosaka-01.JPG" alt="格力高"></p><p>在这里的一家小店点了点秋葵烤肉和薯条，都挺下酒的。不过最最下酒的还得是咸乌贼（日语：塩辛　しおから）这道菜。光看中文菜名根本感受不到它的威力。托它的福，让我把这一大杯酒喝完毫不费劲（其实吃完还是有点撑了）</p><p><img src="/2023/09/18/japan-travel-note-oosaka/oosaka-03.JPG" alt="生啤喝得还是舒服"></p><p><img src="/2023/09/18/japan-travel-note-oosaka/oosaka-04.JPG" alt="左上角最佳下酒菜"></p><h3 id="大阪城"><a href="#大阪城" class="headerlink" title="大阪城"></a>大阪城</h3><p>天守阁象征了关西曾经是日本的中心，不过毕竟是翻修过的，历史感差点味</p><p>反倒是路边摊小哥的热情让我印象深刻，每想起 3 位小哥在我说买一杯刨冰之后，笑着说“一杯吗？真的只要一杯吗？No no no，three！”都忍不住放松地笑，大阪人的热情真的是名副其实</p><p><img src="/2023/09/18/japan-travel-note-oosaka/oosaka-05.JPG" alt="大阪城"></p><p><img src="/2023/09/18/japan-travel-note-oosaka/oosaka-06.JPG" alt="天守阁远眺"></p><h3 id="大阪烧"><a href="#大阪烧" class="headerlink" title="大阪烧"></a>大阪烧</h3><p>说到热情，大阪烧同样有它的热情直爽，烤得干脆的面饼，软糯的年糕，虾肉和牛杂的共同点缀，成就了这样一道本地特色菜</p><p>不过我也注意到旁边的那对情侣，比我们进来得晚一点，但是点的菜和我们完全不同，一直在点小菜，有烤章鱼，烤玉米，炒面什么的。两人也一直有说有笑，边烤边吃，似乎正享受着他们专属的下班时光</p><p><img src="/2023/09/18/japan-travel-note-oosaka/oosaka-07.JPG" alt="米酒越喝越有"></p><p><img src="/2023/09/18/japan-travel-note-oosaka/oosaka-08.JPG" alt="大阪烧"></p>]]></content>
    
    
    <summary type="html">日本旅游日记系列</summary>
    
    
    
    <category term="旅游" scheme="http://smiecj.github.io/categories/%E6%97%85%E6%B8%B8/"/>
    
    <category term="日本" scheme="http://smiecj.github.io/categories/%E6%97%85%E6%B8%B8/%E6%97%A5%E6%9C%AC/"/>
    
    
    <category term="旅游" scheme="http://smiecj.github.io/tags/%E6%97%85%E6%B8%B8/"/>
    
    <category term="日本" scheme="http://smiecj.github.io/tags/%E6%97%A5%E6%9C%AC/"/>
    
    <category term="日记" scheme="http://smiecj.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>golang 编程规范查漏补缺</title>
    <link href="http://smiecj.github.io/2023/09/11/golang-standard-company/"/>
    <id>http://smiecj.github.io/2023/09/11/golang-standard-company/</id>
    <published>2023-09-10T16:00:00.000Z</published>
    <updated>2023-10-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/xiaoliizi/article/details/133747191">本文csdn</a></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>公司最近出了 golang 语言规范，大部分参考 uber 的 go 语言规范（<a href="https://github.com/uber-go/guide/blob/master/style.md" title="原版">原版</a>和<a href="https://github.com/xxjwxc/uber_go_guide_cn" title="翻译">翻译</a>），以及官方的 <a href="https://go.dev/doc/effective_go" title="Effective Go">Effective Go</a>。这里分享一下自己之前没注意的点，查漏补缺</p><p>主要内容包括：go 语言特性中 defer、Mutex、interface 和 channel 的使用注意点，高性能场景中 string 和 byte 数组的相互转换，以及协程池的使用</p><h1 id="方法和函数"><a href="#方法和函数" class="headerlink" title="方法和函数"></a>方法和函数</h1><h2 id="defer-和返回值"><a href="#defer-和返回值" class="headerlink" title="defer 和返回值"></a>defer 和返回值</h2><p>对应知识点为方法返回值是有名还是无名的时候，defer 的顺序的差异</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deferWithAnonymous</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">ret := <span class="number">1</span></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">ret++</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deferWithNamed</span><span class="params">()</span> <span class="params">(ret <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">ret = <span class="number">1</span></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">ret++</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="built_in">println</span>(deferWithAnonymous()) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">println</span>(deferWithNamed()) <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>defer 和返回值之间的关系: <strong>设置函数返回值 -&gt; 执行 defer -&gt; 最终返回给调用方</strong></p><p>关键在第一步，匿名返回值函数中，设置的返回值就是具体的值，而在有名返回值函数，设置的是返回值的引用（即 ret 的引用）</p><p>所以有名返回值函数的 defer 会影响最后的返回值</p><p>对 defer 的编译后字节码解析可以参考<a href="https://dengchengchao.com/?p=1479" title="这篇文章">这篇文章</a></p><h2 id="sync-Mutex-作为传参的时候，需要传指针，否则可能导致死锁"><a href="#sync-Mutex-作为传参的时候，需要传指针，否则可能导致死锁" class="headerlink" title="sync.Mutex 作为传参的时候，需要传指针，否则可能导致死锁"></a>sync.Mutex 作为传参的时候，需要传指针，否则可能导致死锁</h2><p>Mutex 的加锁和释放锁逻辑是通过内部的s<strong>tate和sema两个整数对象</strong>控制的，直接拷贝 Mutex 只是复制了锁的状态，但和原来的锁并不是同一个，所以释放复制后的 Mutex 并不能解锁原来的 Mutex</p><p>一个复现这个问题的示例，是通过 pointer receiver 占锁，通过 value receiver 释放锁，由于 value receiver 会拷贝调用者对象，所以释放的锁对象和外面的不同，导致死锁</p><p><a href="https://medium.com/golangspec/detect-locks-passed-by-value-in-go-efb4ac9a3f2b" title="参考-Detect locks passed by value in Go">参考-Detect locks passed by value in Go</a></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;sync&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">    lock sync.Mutex</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *T)</span> <span class="title">Lock</span><span class="params">()</span></span> &#123;</span><br><span class="line">    t.lock.Lock()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t T)</span> <span class="title">Unlock</span><span class="params">()</span></span> &#123;</span><br><span class="line">   t.lock.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    t := T&#123;lock: sync.Mutex&#123;&#125;&#125;</span><br><span class="line">    t.Lock()</span><br><span class="line">    t.Unlock()</span><br><span class="line">    t.Lock() <span class="comment">// 死锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h1><h2 id="interface-的判空"><a href="#interface-的判空" class="headerlink" title="interface 的判空"></a>interface 的判空</h2><p>interface 表示 golang 的接口类型，它和其他语言的“基类”（如 Java 的 interface）相比，在空对象的判空和调用方法的表现上不太一样</p><p>示例代码: 思考以下代码会输出什么</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyError <span class="keyword">struct</span> &#123;</span><br><span class="line">msg <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(err *MyError)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> err.msg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">workWithBalance</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">workTooHard</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getError</span><span class="params">(f <span class="keyword">func</span>()</span> <span class="title">bool</span>) <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> err *MyError</span><br><span class="line"><span class="keyword">if</span> !f() &#123;</span><br><span class="line">err = &amp;MyError&#123;</span><br><span class="line">msg: <span class="string">&quot;need relax&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := getError(workTooHard); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;work too hard caused &quot;</span> + err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> getError(workWithBalance) == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;work with balance&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码对自定义错误 MyError 进行了判空，预期 getError(workWithBalance) 获取到的 error 为空，但结果却不为空（work with balance 不会打印）</p><p>那么为什么声明未赋值的 err 判空得到的是 false 呢？我们可以从 interface 的内部结构 iface、eface 可以了解到端倪</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// runtime/runtime2.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> eface <span class="keyword">struct</span> &#123;</span><br><span class="line">    _type *_type</span><br><span class="line">    data  unsafe.Pointer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> iface <span class="keyword">struct</span> &#123;</span><br><span class="line">    tab  *itab</span><br><span class="line">    data unsafe.Pointer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，iface 包含了<strong>接口的类型、方法和数据</strong>，iface 的 tab 描述了接口的类型和方法，data 则指向实际的接口数据</p><p>itab 的结构如下:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> itab <span class="keyword">struct</span> &#123;</span><br><span class="line">inter *interfacetype <span class="comment">// abi.InterfaceType（abi: application binary interface 二进制接口），包含接口类型，pkg path（import 的路径）和接口方法（Imethod）</span></span><br><span class="line">_type *_type <span class="comment">// abi.Type，实体类型</span></span><br><span class="line">hash  <span class="keyword">uint32</span> <span class="comment">// _type.hash 拷贝而来</span></span><br><span class="line">_     [<span class="number">4</span>]<span class="keyword">byte</span> <span class="comment">// 占位，留给以后可能用到的对象</span></span><br><span class="line">fun   [<span class="number">1</span>]<span class="keyword">uintptr</span> <span class="comment">// 接口方法对应的地址，多个方法则在这个数组后面继续添加，fun[0] == 0 表示未实现接口的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 eface 的数据结构就简单很多了，只包含<strong>具体类型 _type 和数据指针 data</strong>，不包含方法信息</p><p>不包含方法的 eface 对应 var i interface{} 这种对象声明，主要用于<strong>传参、序列化和泛型</strong>场景</p><p>那么 go 是如何判断一个 interface 类型对象是否为空呢？需要两个条件：<strong>data 对应的值为空，且 _type 具体类型也为空</strong></p><p>通过 getError(workWithBalance) 获取的 error，虽然没有被初始化，但它有具体实现类型（MyError）而不是原始接口类型（error），所以 err == nil 为 false</p><p>想要判断 interface 背后的对象的值确实为空，有两种办法：先强转成具体的类型指针再判断，或者是通过反射方法 reflact.ValueOf 获取到内部的值来判断</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">e := getError(workWithBalance)</span><br><span class="line">v := reflect.ValueOf(e)</span><br><span class="line"><span class="keyword">if</span> e.(*MyError) == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;err is nil&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注意: IsNil 对一些无法判断空值的类型，或者未初始化的 interface 会直接 panic，所以需要先判断 value 的 kind</span></span><br><span class="line"><span class="keyword">if</span> v.Kind() == reflect.Pointer &#123;</span><br><span class="line"><span class="keyword">if</span> v.IsNil() &#123;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;err is nil&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扩展: 空接口对象，是否可以调用接口方法呢？</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyError <span class="keyword">struct</span> &#123;</span><br><span class="line">msg <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(err *MyError)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;empty error&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> err.msg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> emptyErr *MyError</span><br><span class="line"><span class="built_in">println</span>(emptyErr.Error()) <span class="comment">// 不会 panic</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结论是可以调用，这一点和其他语言很不同。一个有具体类型的空接口对象调用 pointer receiver 不会报空指针，但注意只是能调用，如果 pointer receiver 内部有获取对象属性的操作，还是会报空指针错误</p><p><a href="https://medium.com/@reetas/nil-receiver-in-golang-9d61ed8fd230" title="参考-nil receiver in GoLang">参考-nil receiver in GoLang</a></p><p><a href="https://stackoverflow.com/questions/42238624/calling-a-method-on-a-nil-struct-pointer-doesnt-panic-why-not" title="参考-Calling a method on a nil struct pointer doesn&#39;t panic. Why not?">参考-Calling a method on a nil struct pointer doesn’t panic. Why not?</a></p><h2 id="nil-channel-的使用场景"><a href="#nil-channel-的使用场景" class="headerlink" title="nil channel 的使用场景"></a>nil channel 的使用场景</h2><p>在公司规范中，说明“禁止对 nil 或已关闭的 channel 进行读写关闭操作”，这算是为数不多需要指正的一点：nil channel 在特定场景也是可以操作的</p><p>先了解一下各种特殊情况下使用 channel 会出现什么情况：</p><p>closed channel: <strong>读不阻塞（会读完剩下的数据，之后返回零值）、写 panic、再次 close panic</strong></p><p>nil channel: <strong>读阻塞、写阻塞、close panic</strong></p><p>对于 nil channel 读写都会阻塞的特性，有一个使用场景是 合并多个 channel 数据的时候，对于已经取完数据的 channel 可以置为空，这样在继续使用 select 的同时也不影响其他还有数据的 channel 的读取，<a href="https://medium.com/justforfunc/why-are-there-nil-channels-in-go-9877cc0b2308" title="参考">参考</a></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(a, b &lt;-<span class="keyword">chan</span> <span class="keyword">int</span>)</span> &lt;-<span class="title">chan</span> <span class="title">int</span></span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(c)</span><br><span class="line"><span class="keyword">for</span> a != <span class="literal">nil</span> || b != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> v, ok := &lt;-a:</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;a is done&quot;</span>)</span><br><span class="line">a = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">c &lt;- v</span><br><span class="line"><span class="keyword">case</span> v, ok := &lt;-b:</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;b is done&quot;</span>)</span><br><span class="line">b = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">c &lt;- v</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="高性能场景"><a href="#高性能场景" class="headerlink" title="高性能场景"></a>高性能场景</h1><h2 id="使用-sync-Pool-获取需要频繁申请的对象"><a href="#使用-sync-Pool-获取需要频繁申请的对象" class="headerlink" title="使用 sync.Pool 获取需要频繁申请的对象"></a>使用 sync.Pool 获取需要频繁申请的对象</h2><p>比较典型的场景是在高并发的数据流读取和写入场景中，通过 pool 缓存 buffer，避免每次都申请新的 buffer 造成频繁内存资源申请</p><p>在框架层代码中会比较容易看到 pool 的使用，如 gin 用来缓存处理请求的 Context 对象，gorm 用来缓存序列化对象（SerializerInterface）等</p><p>性能测试结果:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkByteBufferWithoutPool</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">buf := bytes.Buffer&#123;&#125;</span><br><span class="line">buf.WriteString(longStr)</span><br><span class="line">io.Copy(io.Discard, &amp;buf)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkByteBufferWithPool</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">pool := sync.Pool&#123;</span><br><span class="line">New: <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">any</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">new</span>(bytes.Buffer)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">buf := pool.Get().(*bytes.Buffer)</span><br><span class="line">buf.WriteString(longStr)</span><br><span class="line">io.Copy(io.Discard, buf)</span><br><span class="line">buf.Reset()</span><br><span class="line">pool.Put(buf)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试结果</span></span><br><span class="line"><span class="comment">// BenchmarkByteBufferWithoutPool-8           55544210               211.1 ns/op          1072 B/op          2 allocs/op</span></span><br><span class="line"><span class="comment">// BenchmarkByteBufferWithPool-8           355192696               33.25 ns/op            0 B/op          0 allocs/op</span></span><br></pre></td></tr></table></figure><p>从执行次数和内存开销来看，pool 在多协程下达到的对象复用的效果，都能带来很大的提升</p><p>关于 sync.Pool 值得留意的还有在 1.13 之后的性能提升，可以参考<a href="https://colobu.com/2019/10/08/how-is-sync-Pool-improved-in-Go-1-13" title="这篇文章">这篇文章</a></p><h2 id="bytes-和-string-的-0-内存申请方法"><a href="#bytes-和-string-的-0-内存申请方法" class="headerlink" title="bytes 和 string 的 0 内存申请方法"></a>bytes 和 string 的 0 内存申请方法</h2><p>直接看无内存开销的转换方式:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ByteSliceToString</span><span class="params">(bytes []<span class="keyword">byte</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s <span class="keyword">string</span></span><br><span class="line">sliceHeader := (*reflect.SliceHeader)(unsafe.Pointer(&amp;bytes))</span><br><span class="line">stringHeader := (*reflect.StringHeader)(unsafe.Pointer(&amp;s))</span><br><span class="line">stringHeader.Data = sliceHeader.Data</span><br><span class="line">stringHeader.Len = sliceHeader.Len</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StringToByteSlice</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="params">(bytes []<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line">bh := (*reflect.SliceHeader)(unsafe.Pointer(&amp;bytes))</span><br><span class="line">sh := *(*reflect.StringHeader)(unsafe.Pointer(&amp;s))</span><br><span class="line">bh.Data = sh.Data</span><br><span class="line">bh.Len = sh.Len</span><br><span class="line">bh.Cap = sh.Len</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://gist.github.com/yakuter/c0df0f4253ea639529f3589e99dc940b" title="参考">参考</a></p><p>两者的相互转换都用到了反射包中表示底层结构的对象，如 slice 的 <strong>SliceHeader</strong>，以及 string 的 <strong>StringHeader</strong></p><p>string 和 byte 数组两者的底层数据结构非常相似，只是 slice 多了 cap，所以转换逻辑并不复杂</p><p>string 和 slice 的底层结构如下：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// runtime/string.go</span></span><br><span class="line"><span class="keyword">type</span> stringStruct <span class="keyword">struct</span> &#123;</span><br><span class="line">str unsafe.Pointer</span><br><span class="line"><span class="built_in">len</span> <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// runtime/slice.go</span></span><br><span class="line"><span class="keyword">type</span> slice <span class="keyword">struct</span> &#123;</span><br><span class="line">array unsafe.Pointer</span><br><span class="line"><span class="built_in">len</span>   <span class="keyword">int</span></span><br><span class="line"><span class="built_in">cap</span>   <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// reflect/value.go</span></span><br><span class="line"><span class="keyword">type</span> StringHeader <span class="keyword">struct</span> &#123;</span><br><span class="line">Data <span class="keyword">uintptr</span></span><br><span class="line">Len  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SliceHeader <span class="keyword">struct</span> &#123;</span><br><span class="line">Data <span class="keyword">uintptr</span></span><br><span class="line">Len  <span class="keyword">int</span></span><br><span class="line">Cap  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>go 1.20 之后，StringHeader 和 SliceHeader 被标注为 Deprecated，改为推荐使用 <strong>StringData</strong> 和 <strong>SliceData</strong>，写法上更简单了</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">byteSliceToString</span><span class="params">(bytes []<span class="keyword">byte</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> unsafe.String(unsafe.SliceData(bytes), <span class="built_in">len</span>(bytes))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stringToByteSlice</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="params">(bytes []<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> unsafe.Slice(unsafe.StringData(s), <span class="built_in">len</span>(s))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实测: 直接强转和通过反射转换的benchmark测试结果对比</p><p>bytes 转 string</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BenchmarkForceConvertBytesToString-8    66501550               178.7 ns/op          1024 B/op          1 allocs/op</span><br><span class="line"></span><br><span class="line">BenchmarkConvertBytesToString-8         1000000000               0.3236 ns/op          0 B/op          0 allocs/op</span><br></pre></td></tr></table></figure><p>可以看到，强转的方式执行速度（平均每次 178ns）远小于通过反射方式执行的，并且强转每次需要申请 1kb 内存，刚好和转换的字符串大小对应</p><p>string 转 bytes</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BenchmarkForceConvertStringToBytes-8    67139846               200.6 ns/op          1024 B/op          1 allocs/op</span><br><span class="line"></span><br><span class="line">BenchmarkConvertStringToBytes-8         1000000000               0.3230 ns/op          0 B/op          0 allocs/op</span><br></pre></td></tr></table></figure><p>结果和 bytes 转 string 类似，不再赘述</p><h2 id="高并发的任务（如接口）创建协程池去消费和执行"><a href="#高并发的任务（如接口）创建协程池去消费和执行" class="headerlink" title="高并发的任务（如接口）创建协程池去消费和执行"></a>高并发的任务（如接口）创建协程池去消费和执行</h2><p>协程确实很”轻“，相比操作系统线程默认大小为1M 来说，它的初始大小只有 2k，确实很小（但随着栈空间扩大可能会扩缩容），不过在高并发场景下还是需要对开启协程进行控制的</p><p>协程池的选型有很多，常见的开源项目有 <a href="https://github.com/Jeffail/tunny" title="tunny">tunny</a> 和 <a href="https://github.com/panjf2000/ants" title="ants">ants</a>，两者实现方式略有区别，tunny 提交任务时是同步提交，可以拿到执行后的返回值，ants 是异步提交，不支持获取返回值，要拿到返回值的话得自己实现。示例如下：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/Jeffail/tunny&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/panjf2000/ants/v2&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestTunnyPool</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">wg.Add(<span class="number">100</span>)</span><br><span class="line">pool := tunny.NewFunc(<span class="number">10</span>, <span class="function"><span class="keyword">func</span><span class="params">(payload <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">time.Sleep(<span class="number">3</span> * time.Second)</span><br><span class="line">wg.Done()</span><br><span class="line"><span class="keyword">return</span> payload</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">defer</span> pool.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line"><span class="comment">// tunny.pool.Process 是同步方法，所以需要开启协程才能并发</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">pool.Process(i)</span><br><span class="line">&#125;(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestAntsPool</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">wg.Add(<span class="number">100</span>)</span><br><span class="line">pool, _ := ants.NewPoolWithFunc(<span class="number">10</span>, <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d execute\n&quot;</span>, i)</span><br><span class="line">time.Sleep(<span class="number">3</span> * time.Second)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d finish\n&quot;</span>, i)</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">defer</span> pool.Release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">pool.Invoke(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，对于 web 框架来说，这种控制并发的功能官方都有。如 gin 通过 <a href="https://github.com/easonlin404/limit/blob/master/limit.go" title="limit">limit</a> 插件，本质也是通过 channel 控制并发协程数</p>]]></content>
    
    
    <summary type="html">一些golang规范的详解</summary>
    
    
    
    <category term="编程语言" scheme="http://smiecj.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="golang" scheme="http://smiecj.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/golang/"/>
    
    
    <category term="golang" scheme="http://smiecj.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>hive 创建 s3 外表</title>
    <link href="http://smiecj.github.io/2023/09/11/hive-s3/"/>
    <id>http://smiecj.github.io/2023/09/11/hive-s3/</id>
    <published>2023-09-10T16:00:00.000Z</published>
    <updated>2023-09-17T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/xiaoliizi/article/details/132985118">本文csdn地址</a></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>有个比较大的技术侧需求: 将数据从 HDFS 迁移到 s3。当然在真正迁移之前，还需要验证迁移到 s3 的数据，和上层查询器（hive、presto 之间的兼容性）</p><p>这里我们对一张业务表的数据做个简单的迁移测试</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><h3 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h3><p>为了让 hdfs 指令能直接操作 s3 的数据，参考 <a href="https://docs.cloudera.com/runtime/7.2.7/scaling-namespaces/topics/hdfs-distcp-with-amazon-s3.html">Using DistCp with Amazon S3</a><br>先在 hdfs-site 中添加配置 fs.s3a.access.key 、 fs.s3a.secret.key 、 fs.s3a.endpoint 和 fs.s3a.connection.ssl.enabled 四个配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fs.s3a.access.key=s3_key</span><br><span class="line">fs.s3a.secret.key=s3_secret</span><br><span class="line">fs.s3a.endpoint=s3服务端地址</span><br><span class="line">fs.s3a.connection.ssl.enabled=false（因为公司内部 s3 服务没开 ssl）</span><br></pre></td></tr></table></figure><p>重启 hdfs 使得配置生效后，通过 distcp 将 hdfs 数据搬到 s3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop distcp hdfs://emr/data/db_name/table_name s3a://bucket_name/data/db_name/table_name</span><br></pre></td></tr></table></figure><p>如上，我们尽量保证了迁移后数据的路径和原路径保持一致</p><p>通过 s3cmd 确认数据是否搬过来了:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s3cmd ls s3://bucket_name/data/db_name/table_name/</span><br></pre></td></tr></table></figure><h3 id="查询验证"><a href="#查询验证" class="headerlink" title="查询验证"></a>查询验证</h3><p>新建 hive 外表并指向 s3 路径：<br>（注意：s3 路径一定要正确，否则建表和查询数据都不会报错，但查出的数据为空）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE EXTERNAL TABLE `db_name`.`table_name`(</span><br><span class="line">  `id` bigint COMMENT &#x27;&#x27;,</span><br><span class="line">  ...)</span><br><span class="line">ROW FORMAT SERDE </span><br><span class="line">  &#x27;org.apache.hadoop.hive.serde2.avro.AvroSerDe&#x27; </span><br><span class="line">STORED AS INPUTFORMAT </span><br><span class="line">  &#x27;org.apache.hadoop.hive.ql.io.avro.AvroContainerInputFormat&#x27; </span><br><span class="line">OUTPUTFORMAT </span><br><span class="line">  &#x27;org.apache.hadoop.hive.ql.io.avro.AvroContainerOutputFormat&#x27;</span><br><span class="line">LOCATION</span><br><span class="line">  &#x27;s3a://bucket_name/data/db_name/table_name&#x27;;</span><br></pre></td></tr></table></figure><h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><p>1、ranger 权限配置</p><p>在 ranger 上集成 hive 插件后，从 hive 权限首页能看到将包含 url、库表、hiveservice 和 udf 四项权限配置。需要在 ‘url’ 配置中添加用户权限</p><p>2、presto、trino 配置</p><p>访问 s3 数据需要额外加上以下配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hive.s3.aws-access-key=s3_key</span><br><span class="line">hive.s3.aws-secret-key=s3_secret</span><br><span class="line">hive.s3.endpoint=s3服务端地址</span><br><span class="line">hive.s3.ssl.enabled=false</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">hadoop 对接 s3 的前期验证</summary>
    
    
    
    <category term="大数据" scheme="http://smiecj.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    <category term="hive" scheme="http://smiecj.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/hive/"/>
    
    
    <category term="hadoop" scheme="http://smiecj.github.io/tags/hadoop/"/>
    
    <category term="s3" scheme="http://smiecj.github.io/tags/s3/"/>
    
  </entry>
  
  <entry>
    <title>是时候改变了</title>
    <link href="http://smiecj.github.io/2023/09/02/life-basketball-worldcup/"/>
    <id>http://smiecj.github.io/2023/09/02/life-basketball-worldcup/</id>
    <published>2023-09-01T16:00:00.000Z</published>
    <updated>2023-09-02T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天中国男篮输给菲律宾，彻底失去了参加2024奥运会的资格。我觉得难以接受的不是我们没在亚洲排上第一，而是一直以来青黄不接的问题都被反复提起，却要到现在易建联退役，周琦受伤之后暴露出来才发觉<br>思前想后，我也看不到什么解决办法，那就来看看别人是怎么说的吧<br>注意: 论坛我只是原话搬运，很多观点也不是很切合国情，需要明辨是非地看</p><h2 id="1、关于今晚的比赛"><a href="#1、关于今晚的比赛" class="headerlink" title="1、关于今晚的比赛"></a>1、关于今晚的比赛</h2><p><a href="https://www.reddit.com/r/nba/comments/1683494/post_game_thread_philippines_14_def_china_14_9675/?utm_source=share&utm_medium=ios_app&utm_name=ioscss&utm_content=2&utm_term=1">[Post Game Thread] Philippines (1-4) def. China (1-4) 96-75 behind 34 points from Jordan ClarksonPost Game Thread</a></p><p>标题：比赛结果：克拉克森34分，中国75-96不敌菲律宾，以 1-4 成绩结束此次世界杯</p><div class="note black flat"><p>克拉克森就是安德森的亲爹（326赞）</p></div><div class="note black flat"><p>解说员说乔特·雷耶斯（菲律宾主帅）已经递交辞臣，是真的吗？如果是的话那这个消息和今晚赢球一样棒（67赞）</p><ul><li>他已经无数次说过辞职了，但是菲律宾还是选择他做主帅</li></ul></div><div class="note black flat"><p>克拉克森并不认同中国对南海的主张（301赞）（破防了属于是）</p></div><div class="note black flat"><p>当球转移更多的时候克拉克森打得更好，他不会陷入孤立无援的状态，当然这也还因为中国队并不像苏丹、安哥拉和意大利那样天赋这么好（55赞）</p></div><h2 id="2、关于中国篮球"><a href="#2、关于中国篮球" class="headerlink" title="2、关于中国篮球"></a>2、关于中国篮球</h2><p><a href="https://www.reddit.com/r/nba/comments/165mm2a/how_is_china_still_so_weak_in_international/?utm_source=share&utm_medium=ios_app&utm_name=ioscss&utm_content=2&utm_term=1">How is China still so weak in international basketball?</a></p><p>标题：为什么中国队在国际赛场上这么弱？<br>副标题：可能篮球在中国并不是最出名的，但是中国有10亿多人，他们还有一个有竞争力的联赛。然而一旦到了国际赛场，前面所提的好像都和他们的表现无关，这届世界杯他们已经0-3了</p><div class="note black flat"><p>其实他们的联赛其实并不是很有竞争力，有的球员在那里能打出非常好的数据，但是到欧洲有竞争力的联赛就只能是平均水平（有时比平均水平更低）<br>米洛斯拉夫-拉杜利察 在CBA 的平均数据是 24分/11篮板和5助攻（<a href="https://www.sohu.com/a/588895902_121082800">数据来源</a>），但是他在欧洲篮球联赛（Euroleague ，简称EL）和 美国篮球联赛（American Basketball Association，简称 ABA，比 NBA 低级别）的贝尔格莱德红星（ Red Star Belgrade）队因为表现不佳，都没能获得上场机会（DNP）。达拉斯-摩尔 能够以 51%命中率、41%三分命中率和83%罚球命中率（51/41/83）在 CBA 拿到 26+6+4的数据，但之后的一个赛季他在欧洲杯（Eurocup ，比 Euroleague  低一个级别）却只能拿到场均6分的数据<br>CBA 受到关注的很大原因是他们为前 NBA 球员提供非常丰厚的薪水，这让他们在没有压力的情况下打比赛，也导致了中国本土球员水平更差<br>（1.1k赞）</p></div><div class="note black flat"><p>引用姚明的话：<br>“中国有14多亿人，但只有1.3w 注册球员，日本有75w，美国有2300w”（2.7赞）<br>（译者注：不过关于这点要说回来，日美是把学校打篮球的也算进来了，因为他们有校园联赛，我们没统计这部分）</p></div><div class="note black flat"><p>篮球系统太孤立了，当全世界的球员球队都在一起比赛对抗的时候，拥有自己联赛其实代表不了什么。日本有不少球员在美国大学打球，甚至在NBA打球，他们在那里进行高水平的比赛，这提升了他们国家队水平。反观中国球员并没有这样的（译者注：校园篮球还是有的，只是都没打出来，今年NBA三个落选秀）（349赞）</p></div><div class="note black flat"><p>我所看到的是他们的培养系统非常糟糕（428赞）</p><ul><li>中国人在这里回复一下，这正是原因所在<br>在美国，如果你表现出了篮球天赋，球探会在你上学的时候，甚至是读小学的时候就注意到你，让你加入更好的球队，跟着更好的教练接受培养，直到你在NBA选秀被选中。整个系统都致力于培养学生成为职业运动员，并且不会放过任何一个有天赋的学生，不管TA来自哪里<br>在中国打篮球的青年男生不计其数，我也确定在他们中一定有天赋优秀的孩子。但是这里并没有将他们看中并培养到top水平运动员的体系。绝大多数小孩只是会被教导把学习放在首要位置上，篮球当作爱好就好。我们也有一些和职业道路紧密相关的体育学校，但只有很小一部分小孩能够选择这条路，而不是常规的进学路，而且这些体育学校往往会被家长当作是垃圾学校<br>所以说，尽管中国有很多小孩在打篮球，但有可能成为职业运动员的人才库却非常干涸，这导致了现在的中国篮球缺少拿得出手的成绩（65赞）</li></ul></div><div class="note black flat"><p>据我了解，他们的篮球文化非常不同。除了 CBA，他们大部分的比赛就只是来自不同城市的业余球队之间，甚至这些业余比赛相比CBA，在民间更火，所以他们并不会把成为职业运动员当作自己的理想。他们更希望有一个普通的工作，为自己城市的球队参与比赛（58赞）</p></div><div class="note black flat"><p>他们在团体运动上表现都很差，不只是篮球（752赞）</p><ul><li>你说的一点毛病没有，从1984 年以来中国拿到的546枚奥运奖牌中，只有13枚来自团队球类项目（<a href="https://en.wikipedia.org/wiki/China_at_the_Olympics">来源</a>）（566赞）</li></ul></div><div class="note black flat"><p>在中国很多体育项目都集中精力于奥运会上，因为这对政府来说最能体现它的强大。他们的奥运团队也主要集中精力在那些能用较少精力，较大概率获得金牌的项目上（参考 <a href="https://www.nytimes.com/2021/07/29/world/asia/china-olympics.html">The Chinese Sports Machine’s Single Goal: The Most Golds, at Any Cost</a>）。从这个角度看，投资篮球或者其他大部分团队体育项目都是非常糟糕的：构建一个具有竞争力的篮球队，需要投入到基础设施的建设太多了，而且你是在参与整个奥运会上最有含金量（是真的含金）的运动，但只能获得一枚奖牌（84赞）</p></div><div class="note black flat"><p>我曾经在美国一个很大的州的高校工作，这个学校专门为有钱的国际学生开设。这个学校在我入职的那一年拿到了州冠军。一半的国际生来自亚洲（其中90%来自中国），大约3/4 的亚洲男孩会在放学后进行投篮训练，他们是真的痴迷于篮球。大部分学生都会尝试校队选拔，只有一个能进入到新生校队，没人能进入二级校队或主力校队（新生校队 -&gt; 二级校队 -&gt; 主力校队：Freshman -&gt; JV -&gt; Varsity）</p><p>我经常和他们一起打球，大部分在基础投篮表现上都不差。大部分学生运球也还可以，少数人投篮也很好，但他们完全不擅长在 5V5 这种常规，需要团队组织的模式下打球。我的一位朋友是他们的教练，他会在选拔周的时候进行一些技能特训，比如3V3，这对这些学生来说非常困难。比如他们不清楚在无球状态下如何跑位，他们知道挡拆怎么做，但并不知道背后的原理，以及应该什么时候做挡拆，什么方向去做挡拆。更不懂如何卡板，对防守的投入也很少。他们模仿的是一个并不适合实战的篮球法则，更像是游戏里面的（他们喜欢玩 2K 和 lol）。尽管这50个学生只是他们庞大人口的很小一部分，但是来自其他国家的学生更懂如何取胜（140赞）</p><ul><li>我是美籍华人，并在06年的大学暑假，在上海做过交换生（是的我上年纪了）。我的两个接近6英尺4英寸（194左右）的白人同学都喜欢打篮球，所以我们去找了一个本地球场打球。所有本地人都大声想要 And one，像机器人一样地运球，并想在高大的老美面前炫技。其次是只要我们提升一点防守强度，他们总是不停地叫犯规，甚至为这还差点打起来，直到我这个老家伙盯着他们，让他们闭嘴。好像你只要不让他们做这些行为，让他们打得爽，他们就随时要拿着球回家。真是非常非常奇怪的经历了（译者：这段比较扯淡，野球场也不能代表国家队的表现）</li></ul></div><div class="note black flat"><p>最大的原因还是他们的基层培养体系不完善。在中国，篮球系统集中依赖于体育学院运作，并且通常以身高作为新秀选拔标准。引用姚明的话，中国只有13w篮球注册人口，不及美国的 1/100 甚至还没有日本多，这真的讲到痛点上了。</p><p>他们没有像美国在初中、高中、业余体育联合会（AAU）这样组织的联赛。只有很小一部分年轻人接受了组织指导和训练。专业学院之外的培训系统几乎就是不存在的。中国大学生的技术平均水平就和美国普通高中学生差不多（我和中国大学校队打过球）</p><p>这也意味着，当中国以高个子为选拔标准的时候，真正有天赋的控卫和前锋就只能从很少的一部分人中挑选了，甚至比大部分国家的选择标准都要少。这也符合了大部分中国球星都是内线（姚明、易建联、周琦、巴特尔等）的情况，他们还小就通过身高容易被发掘并进入到体教体系。举另一个例子，林书豪来自5百万美籍华裔中，而不是14亿中国人口中（280倍之差）（46赞）</p></div><h2 id="自己再说两句"><a href="#自己再说两句" class="headerlink" title="自己再说两句"></a>自己再说两句</h2><p>reddit 上的言论看一圈下来，倒是和国内讨论的八九不离十，基本离不开青训体系建设、联赛对抗水平、海外打球的球员数量等方向。但就只是看这三点，从08到现在我们也几乎没有进步。海外打球的本土球员现在为0，大学生联赛培养出的新秀在CBA都难以立足，整个联赛水平也在退步：以前多少王牌外援，多少本土响当当的球星，现在呢？那反映在大赛上，成绩能好吗？</p><p>网上也看到不少把输球原因归结到某个球员，或者是教练，又甚至是篮协主席身上</p><p>我特别反感这种出现问题就把锅全甩给一个人的言论，除了能宣泄负面情绪没有任何用处，另外我们所看到的输球只是一瞬间的事，那我们是做了什么，为什么会制定这样的规划政策，为什么联赛会培养出这些在国际赛场打不出水平的球员，为什么要频繁换教练，导致永远没有一套自己的技战术体系，这和背后的决策、体系规划、培养方式方方面面都离不开关系</p><p>你说李凯尔打得不好，那就假设把他换了，换成场均能拿30多分的，这种水平在国际比赛赛场已经很猛了。但是我们输的三场比赛，分别输了 42分，20分，18分和21分，归化就算能多拿10多分也是无济于事。看一下隔壁的比赛，渡边雄太这场拉垮了，但是他们还有两个球员拿了20多分，我们呢？</p><p>你说教练有问题，那就说他现在手里的牌又有多少。你说他用人不当调整不及时，那就说现在中国队球员全部加起来，有一个像样的首发阵容吗？真到了比赛要紧时刻，该换谁，能换谁呢？。另一方面是没有个人能力特别突出的球员，球员之间形成不了很好的化学反应，这也直接导致了没有稳定的球队技战术体系。那这怪教练也没用，巧妇也难为无米之炊</p><p>最后，我们到底会怎么发展呢？从08年到现在，已经退步了15年了，现在还看不到答案的话，4年后再参加预选的我们又真的能找到答案吗？我不好说。</p>]]></content>
    
    
    <summary type="html">男篮世界杯表现不吐不快</summary>
    
    
    
    <category term="生活" scheme="http://smiecj.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="篮球" scheme="http://smiecj.github.io/categories/%E7%94%9F%E6%B4%BB/%E7%AF%AE%E7%90%83/"/>
    
    
    <category term="生活" scheme="http://smiecj.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="篮球" scheme="http://smiecj.github.io/tags/%E7%AF%AE%E7%90%83/"/>
    
  </entry>
  
  <entry>
    <title>开源项目观察8月报</title>
    <link href="http://smiecj.github.io/2023/08/23/opensource-monthly-202308/"/>
    <id>http://smiecj.github.io/2023/08/23/opensource-monthly-202308/</id>
    <published>2023-08-22T16:00:00.000Z</published>
    <updated>2023-09-04T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/xiaoliizi/article/details/132702146">本文csdn地址</a></p><p><a href="https://mp.weixin.qq.com/s/z7elA1hgWTRgzsIt_R_4QQ">本文公众号地址</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>要问对一门技术感兴趣的最好办法是什么，必然不是直接揪着原理、源码一点点读，那很容易只见其木不见其林。不妨从新特性去了解，先俯瞰森林全貌，再细看每一棵树的变化</p><p>于是刚旅游回来的我在想，已经这么久没关注技术行情了，那就看看这个月的更新呗，了解一下接触过的技术都有哪些更新</p><p>总览: 大数据: hue、starrocks、airflow、presto、jupyter、seatunnel、starrocks；编程语言: golang、c++</p><h2 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h2><h3 id="hue"><a href="#hue" class="headerlink" title="hue"></a>hue</h3><p><a href="https://github.com/cloudera/hue/releases/tag/release-4.11.0">1月19: 4.11</a><br><a href="https://docs.gethue.com/releases/release-notes-4.11.0/">https://docs.gethue.com/releases/release-notes-4.11.0/</a></p><p><img src="/2023/08/23/opensource-monthly-202308/hue-01.png" alt="hue release"></p><ul><li><p><a href="https://gethue.com/blog/2022-10-11-creating-iceberg-tables-in-hue/">支持 iceberg 数据源</a></p></li><li><p>通过缓存 Livy session 中的信息来加速 SparkSQL，并适配 Spark UDF</p></li><li><p><a href="https://gethue.com/blog/2022-02-01-hplsql-support/">支持 HPL/SQL: hive sql 的高级语法，支持中间结果保存、循环等</a>, <a href="http://www.hplsql.org/doc">HPL</a></p></li></ul><p>总结: 基本是小改进，界面样式和4.10一致</p><h3 id="starrocks"><a href="#starrocks" class="headerlink" title="starrocks"></a>starrocks</h3><p><a href="https://docs.starrocks.io/zh-cn/main/release_notes/release-3.1">8月25: 3.1.2</a></p><p><img src="/2023/08/23/opensource-monthly-202308/starrocks-01.png" alt="starrocks release"></p><p>3.1 版本相关的新特性（部分）</p><ul><li><p>存算分离: 支持主键模型</p></li><li><p>存算分离: 抽象 存储卷（Storage Volume） 概念，方便在不重启集群的情况下，对对象存储的配置进行修改</p></li><li><p>Catalog: 支持 ES、Paimon</p></li><li><p>​物化视图: 可以通过ALTER手动重新激活失效的物化视图（之前在 base 表重建后，物化视图需要重建）</p></li><li><p>物化视图: 通过 swap 可进行视图替换（目前还不支持直接 alter 视图 sql）</p></li><li><p>物化视图: 支持随机分桶（Random Bucketing）</p></li><li><p>物化视图: 支持通过 ORDER BY 指定排序键</p></li><li><p>建表: 支持自增列属性 AUTO_INCREMENT，提供表内全局唯一 ID</p></li><li><p>建表: 通过分区表达式自动创建分区，比如 day 表示按天分区</p></li><li><p>建表: 支持随机分桶（仅支持明细表）</p></li><li><p>建表: 支持使用 colocate_group、storage_medium（存储介质 如：SSD）、storage_cooldown_time 等属性</p></li><li><p>建表: 支持生成列（generated column），自动计算表达式结果，提升查询性能</p></li><li><p>导入数据: 通过 insert into 导入数据的时候支持 files 函数，不需要先建 catalog</p></li></ul><p>总结: starrocks 作为目前比较流行的实时数仓服务，3.0 版本在物化视图的改进还是很足的，非常建议尝试</p><h3 id="airflow"><a href="#airflow" class="headerlink" title="airflow"></a>airflow</h3><p><a href="https://airflow.apache.org/docs/apache-airflow/stable/release_notes.html#airflow-2-7-0-2023-08-18">8月18: 2.7.0</a></p><p><img src="/2023/08/23/opensource-monthly-202308/airflow-04.png" alt="airflow release"></p><ul><li><p>python基础版本: 不再支持 3.7, 支持 3.8, 3.9, 3.10, 3.11</p></li><li><p>UI: 新 graph 界面</p></li><li><p>smtp: 默认使用 <a href="https://docs.python.org/3/library/ssl.html#ssl.create_default_context">ssl.create_default_context</a> 创建 ssl 客户端，可通过 <a href="https://airflow.apache.org/docs/apache-airflow/stable/configurations-ref.html#ssl-context">ssl_context</a> 配置其他校验级别<br><a href="https://github.com/apache/airflow/pull/33075">参考: Allows to choose SSL context for SMTP provider #33075</a></p></li><li><p>UI：出于安全性考虑，默认禁用在界面、API 和 CLI 侧<a href="https://airflow.apache.org/docs/apache-airflow/stable/howto/connection.html#testing-connections">对 connection 触发测试</a>，可通过 <a href="https://airflow.apache.org/docs/apache-airflow/stable/configurations-ref.html#test-connection">test_connection</a> 选项配置<br>可选值: Disabled, Enabled, Hidden</p></li></ul><p>之前版本的dag界面:<br><img src="/2023/08/23/opensource-monthly-202308/airflow-02.png" alt="airflow"></p><p>新版本dag界面:<br><img src="/2023/08/23/opensource-monthly-202308/airflow-03.png" alt="airflow"></p><p>总结: 基本功能改动不大，有两个主要特性都和安全性相关</p><h3 id="presto"><a href="#presto" class="headerlink" title="presto"></a>presto</h3><p><a href="https://prestodb.io/docs/current/release/release-0.283.html">8月8: 0.283</a></p><p>0.276 ~ 0.283 的部分改进</p><ul><li><p>JDBC: 增加 metadata 的缓存，通过三个配置控制: metadata-cache-ttl, metadata-cache-refresh-interval 和 metadata-cache-size<br><a href="https://prestodb.io/docs/current/connector/hive.html?highlight=metadata%20cache%20ttl#metastore-configuration-properties">参考 hive 配置</a></p></li><li><p><a href="https://github.com/prestodb/presto/issues/15909">ES: 支持配置用户密码校验</a>，参数将透传给ES</p></li></ul><h3 id="jupyter"><a href="#jupyter" class="headerlink" title="jupyter"></a>jupyter</h3><p><a href="https://jupyterlab.readthedocs.io/en/stable/getting_started/changelog.html#v4-0">4.0</a></p><p>快速使用:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm -p 8888:8888 jupyter/datascience-notebook:lab-4.0.5</span><br></pre></td></tr></table></figure><p><img src="/2023/08/23/opensource-monthly-202308/jupyter-02.png" alt="jupyterlab"></p><ul><li><p>code editor: 使用新版 codemirror 6，配置更有效和方便，比如只隐藏 markdown 格式的左侧行数</p></li><li><p>extension: 可以直接引用通过 pip 安装的依赖，不再需要本地再把 extension 项目重新 build 的过程</p></li><li><p>基本操作: 优化搜索功能，支持选中搜索、多行搜索</p></li><li><p>UI: 增加 ctrl + shift + H 快捷键查看热键，在 notebook 底部增加创建新代码块按钮等</p></li></ul><p><img src="/2023/08/23/opensource-monthly-202308/jupyter-01.png" alt="add cell"></p><ul><li>协作: 通过 <a href="https://github.com/jupyterlab/jupyter-collaboration">jupyter-collaboration</a> 支持多用户协作编辑同个 notebook</li></ul><p>总结: 4.0 版本之后界面样式和 3 差不多，不过还是能看到很明显的一些细节改进，值得尝试</p><h3 id="seatunnel"><a href="#seatunnel" class="headerlink" title="seatunnel"></a>seatunnel</h3><p><a href="https://github.com/apache/seatunnel/releases/tag/2.3.3">2.3.3</a></p><p><a href="https://mp.weixin.qq.com/s/vEh-n_8Oe050hm1pA47bbg">参考: Apache SeaTunnel 2.3.3 版本发布，CDC 支持 Schema Evolution！</a><br><a href="https://apacheseatunnel.medium.com/apache-seatunnel-2-3-3-released-with-cdc-support-for-schema-evolution-2fd78c81f2d6">Apache SeaTunnel 2.3.3 Released with CDC Support for Schema Evolution!</a></p><ul><li><p>实时同步: flink cdc 支持表结构同步（DDL）</p></li><li><p>实时同步: flink cdc 支持对无主键表的唯一索引列进行 split 拆分</p></li><li><p>mongo: 支持 mongo cdc</p></li></ul><h2 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h2><h3 id="golang"><a href="#golang" class="headerlink" title="golang"></a>golang</h3><p><a href="https://tip.golang.org/doc/go1.21">1.21</a></p><p><a href="https://go.dev/blog/go1.21">Go 1.21 is released!(8月8日)</a></p><p><a href="https://mp.weixin.qq.com/s/Nuj_cYFvBesaBbSSz5PuBg">Go1.21 那些事：泛型库、for 语义变更、统一 log/slog、WASI 等新特性，你知道多少？</a></p><p><a href="https://appliedgo.com/blog/go1-21">Is Go 1.21 already on your upgrade list? It should be!</a></p><ul><li><p>日志: 标准库新增 slog，支持格式化日志输出、自定义 handler 和 日志等级<br><a href="https://www.reddit.com/r/golang/comments/11sdqia/slog_proposal_accepted_for_go_121/">reddit 上的讨论</a>: 大部分开发者都很欢迎 go 官方支持了slog</p></li><li><p>内置函数: 新增 max、min、clear。不再需要通过 math.Max 调用，且通过泛型支持不同基础类型传参</p></li><li><p>内置函数: <a href="https://pkg.go.dev/cmp">cmp</a> 支持泛型</p></li><li><p>基础类型: map、slice 支持泛型，并提供支持泛型的 <a href="https://pkg.go.dev/maps">maps</a>、<a href="https://pkg.go.dev/slices@master">slices</a> 工具库<br>常用方法: slices.Sort、maps.Equal 等</p></li><li><p>泛型: 性能提升<br><a href="https://encore.dev/blog/go1.21-generics">Understanding Go 1.21 generics type inference</a></p></li><li><p>基本语法: for 循环变量赋值语义变更，可通过添加 <a href="https://github.com/golang/go/wiki/LoopvarExperiment">GOEXPERIMENT=loopvar</a> 参数控制让局部变量每次赋予新值，避免在循环内开启协程、使用指针时出现不符预期的结果，<a href="https://github.com/golang/go/wiki/CommonMistakes#using-reference-to-loop-iterator-variable">参考: Using reference to loop iterator variable</a></p></li><li><p>编译: <a href="https://go.dev/doc/pgo">PGO（Profile Guided Optimization）</a> 正式发布，通过在 main 代码目录放置 default.pgo（可通过 /debug/pprof/profile 接口生成的 profile）文件来开启 PGO build，将对程序性能有 2% - 7% 的提升</p></li><li><p>命令行和工具: go tool 支持向前（旧版本）兼容和向后（新版本）兼容<br>向前: 如设置 GODEBUG=http2client=0,http2server=0 可禁用 net/http 库的 http2 功能，<a href="https://go.dev/doc/godebug">参考</a><br>向后: 如通过 GOTOOLCHAIN=go1.21rc3 go test 参数设定 go tool 使用的版本，<a href="https://go.dev/doc/toolchain">参考</a></p></li><li><p>Context: context 新增 WithoutCancel 、WithDeadlineCause 、 WithTimeoutCause、<a href="https://github.com/golang/go/issues/57928">AfterFunc</a> 等方法</p></li><li><p>其他特性等: 支持 WASI；增加全局的 <a href="https://github.com/golang/go/issues/57179">$GOROOT/go.env</a> 配置解析（优先级: 系统环境变量 &gt; 用户路径下的 go.env，即 $HOME/.config/go/env &gt; $GOROOT/go.env）等</p></li></ul><p>总结: 相比泛型，像日志库、一些内置函数和 context 新增方法反而更让笔者眼前一亮，这些是在旧功能上进行的添彩功能，可能在平时更能用上</p><h3 id="c"><a href="#c" class="headerlink" title="c++"></a>c++</h3><p><a href="https://zhuanlan.zhihu.com/p/137646370">10分钟速览 C++20 新增特性</a></p><p><a href="https://oi-wiki.org/lang/new">新版 C++ 特性(c++11)</a></p><p><a href="https://blogs.embarcadero.com/what-is-modern-c-in-2023">What Is Modern C++ in 2023?</a></p><p><a href="https://blog.devgenius.io/what-is-new-in-c-20-a5ba62a28b9a">What is new in C++20</a></p><p><a href="https://en.cppreference.com/w/cpp/20">官方-C++20</a></p><p>注意: 使用 gcc 编译需要先升级到 10 以上版本 - <a href="https://stackoverflow.com/a/60515907">参考</a></p><ul><li><p>模块管理: 通过模块进行依赖引用，减小编译后文件大小<br><a href="https://zhuanlan.zhihu.com/p/350136757">扩展: C++20 新特性: modules 及实现现状</a><br><a href="https://github.com/Cpp-Club/Cxx_HOPL4_zh/blob/main/09.md#931-%E6%A8%A1%E5%9D%97">扩展: C++ 之父 Bjarne Stroustrup 对模块功能的介绍</a><br><a href="https://zhuanlan.zhihu.com/p/350136757">C++20 新特性: modules 及实现现状</a></p></li><li><p>基础语法: 支持 coroutine（协程）</p></li><li><p>基础语法: 支持 concept+requires 语法，可以更方便地使用泛型，<a href="https://zhuanlan.zhihu.com/p/107610017">参考</a></p></li><li><p>基础语法: <a href="https://zhuanlan.zhihu.com/p/86809598">Ranges</a>: 更方便地编写迭代器、过滤器的语法<br>但是对 ranges 的看法五花八门，<a href="https://zhuanlan.zhihu.com/p/603431999">参考一篇知乎</a></p></li><li><p>基础语法: 支持条件约束（<a href="https://www.modernescpp.com/index.php/c-core-guidelines-a-detour-to-contracts/">Contract Programming</a>）: 可定义前置条件、后置条件、错误、断言和不变量等，可以更早地在编译阶段发现程序问题<br>如: <a href="https://www.cppstories.com/2017/11/nodiscard/">nodiscard</a>: 规定方法返回值要获取，<a href="https://gavinray97.github.io/blog/adding-invariant-to-cpp-design-by-contract#implementing-the-invariant-call-code-generation">invariant</a>: 规定方法内部不对入参进行修改<br>注意: 只是在编译产生警告，不会直接导致编译错误</p></li><li><p>基础类型: 原子类型，操作方法有 store、load、fetch_add 等</p></li></ul><p>总结: 更新虽然很多，但是 coroutine 使用起来需要引入相关的如此多的关键字，着实让我敬而远之。<a href="https://news.ycombinator.com/item?id=26222342">类似的吐槽</a>，其中有人建议使用封装后的库 如 <a href="https://github.com/lewissbaker/cppcoro">cppcoro</a>，以及对比 Rust 语言的 Async 和 Await 用法: <a href="https://lights0123.com/blog/2020/07/25/async-await-for-avr-with-rust/">Async/Await for AVR with Rust</a></p>]]></content>
    
    
    <summary type="html">每月更新（可能）</summary>
    
    
    
    <category term="开源" scheme="http://smiecj.github.io/categories/%E5%BC%80%E6%BA%90/"/>
    
    
    <category term="大数据" scheme="http://smiecj.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    <category term="golang" scheme="http://smiecj.github.io/tags/golang/"/>
    
    <category term="开源" scheme="http://smiecj.github.io/tags/%E5%BC%80%E6%BA%90/"/>
    
    <category term="starrocks" scheme="http://smiecj.github.io/tags/starrocks/"/>
    
  </entry>
  
  <entry>
    <title>富士山与水</title>
    <link href="http://smiecj.github.io/2023/08/10/japan-travel-note-fujisan/"/>
    <id>http://smiecj.github.io/2023/08/10/japan-travel-note-fujisan/</id>
    <published>2023-08-09T16:00:00.000Z</published>
    <updated>2023-10-06T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/JDD-hAGgrzmrKvodmFqJeA">本文公众号地址</a></p><!--## JRJR 票买起来还是挺麻烦的，支付方式只能选择本地网络支付app，现金或者是实体西瓜卡。苹果钱包里面的西瓜卡在这个时候就没什么用了--><h2 id="景观列车"><a href="#景观列车" class="headerlink" title="景观列车"></a>景观列车</h2><p>坐JR到上月再坐景观列车到河口湖，慢慢从城市走向自然的感觉</p><p><img src="/2023/08/10/japan-travel-note-fujisan/fujisan-01.JPG" alt="居民房都差不多一个样"></p><p><img src="/2023/08/10/japan-travel-note-fujisan/fujisan-02.JPG" alt="景观列车"></p><p><img src="/2023/08/10/japan-travel-note-fujisan/fujisan-03.JPG" alt="快到景区"></p><p><img src="/2023/08/10/japan-travel-note-fujisan/fujisan-04.JPG" alt="公交上拍的富士山"></p><p>不过话说回来，JR 其实也不算慢了，只是相对于新干线（对应国内的高铁）来说稍微慢一点</p><h2 id="富士山的水"><a href="#富士山的水" class="headerlink" title="富士山的水"></a>富士山的水</h2><p>保持了很久的“养胃”模式，被沁人心脾的富士山水打破了</p><p><img src="/2023/08/10/japan-travel-note-fujisan/fujisan-05.JPG" alt="清澈得还在冒泡的水"></p><h2 id="富士山"><a href="#富士山" class="headerlink" title="富士山"></a>富士山</h2><p>从天上山公园，天晴号再到自然生活馆，从安然隐居山林，到山顶和山脚的风格相衬，总能发现不一样的的富士山</p><p><img src="/2023/08/10/japan-travel-note-fujisan/fujisan-06.JPG" alt="fujisan"></p><p><img src="/2023/08/10/japan-travel-note-fujisan/fujisan-07.JPG" alt="fujisan"></p><p><img src="/2023/08/10/japan-travel-note-fujisan/fujisan-08.JPG" alt="fujisan"></p><p><img src="/2023/08/10/japan-travel-note-fujisan/fujisan-09.JPG" alt="fujisan"></p><p><img src="/2023/08/10/japan-travel-note-fujisan/fujisan-10.JPG" alt="fujisan"></p>]]></content>
    
    
    <summary type="html">日本旅游日记系列</summary>
    
    
    
    <category term="旅游" scheme="http://smiecj.github.io/categories/%E6%97%85%E6%B8%B8/"/>
    
    <category term="日本" scheme="http://smiecj.github.io/categories/%E6%97%85%E6%B8%B8/%E6%97%A5%E6%9C%AC/"/>
    
    
    <category term="旅游" scheme="http://smiecj.github.io/tags/%E6%97%85%E6%B8%B8/"/>
    
    <category term="日本" scheme="http://smiecj.github.io/tags/%E6%97%A5%E6%9C%AC/"/>
    
    <category term="日记" scheme="http://smiecj.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>東京の日々</title>
    <link href="http://smiecj.github.io/2023/08/10/japan-travel-note-tokyo/"/>
    <id>http://smiecj.github.io/2023/08/10/japan-travel-note-tokyo/</id>
    <published>2023-08-09T16:00:00.000Z</published>
    <updated>2023-08-10T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/P1CZG06HA9ZI6BXlPyOR0g">本文公众号地址</a></p><h2 id="花火大会"><a href="#花火大会" class="headerlink" title="花火大会"></a>花火大会</h2><p>百闻不如一见，虽然过程有一点不小的插曲，还好把最精彩的一段看完了</p><p>当时就很好奇放出笑脸的烟花是怎么做出来的，正好今晚的 NHK 节目还科普了一下</p><p><img src="/2023/08/10/japan-travel-note-tokyo/tokyo-travel-note-01.jpg" alt="提前一个半小时已经来了不少人"></p><p><img src="/2023/08/10/japan-travel-note-tokyo/tokyo-travel-note-02.png" alt="回来后看到关于火灾的报道"></p><p><a href="https://www.nhk.jp/p/chicochan/ts/R12Z9955V3/episode/te/JYZGRL8W3W">NHK 节目: 拡大版SP▽花火の謎▽なぜ正座▽不思議なジャンプ</a></p><h2 id="新宿"><a href="#新宿" class="headerlink" title="新宿"></a>新宿</h2><p>希望是最后一次被红蓝遍天的カラオケ广告牌吸引吧😂</p><p><img src="/2023/08/10/japan-travel-note-tokyo/tokyo-travel-note-03.png" alt="歌舞伎町"></p><h2 id="浅草寺"><a href="#浅草寺" class="headerlink" title="浅草寺"></a>浅草寺</h2><p>也许是个抽签小技巧：在去浅草寺的仲见世通路边摊上，先抽中一个4等奖的小奖品，再去抽浅草寺的签</p><p><img src="/2023/08/10/japan-travel-note-tokyo/tokyo-travel-note-04.png" alt="雷门"></p><p><img src="/2023/08/10/japan-travel-note-tokyo/tokyo-travel-note-05.png" alt="背面的风神雷神"></p><h2 id="秋叶原"><a href="#秋叶原" class="headerlink" title="秋叶原"></a>秋叶原</h2><p>相比起二次元，它更配得上的符号应该是技术阿宅的天堂，包括 softmap 在内的电器店卖的各种电脑配件，能细到焊板用的各种元器件，DLY大神应该什么​电器都能做出来了</p><p><img src="/2023/08/10/japan-travel-note-tokyo/tokyo-travel-note-06.png" alt="秋叶原"></p><h2 id="J联赛"><a href="#J联赛" class="headerlink" title="J联赛"></a>J联赛</h2><p>川崎前锋主场对阵大阪钢巴，本以为是一场主队轻松把控局势的对阵，却变成了到补时阶段都一直跌宕起伏的比赛</p><p>混入客场球迷区的我们 也结结实实的被大阪球迷的欢庆包围了</p><p><img src="/2023/08/10/japan-travel-note-tokyo/tokyo-travel-note-07.png" alt="看完比赛从球场回去"></p><h2 id="东京塔-amp-东京树"><a href="#东京塔-amp-东京树" class="headerlink" title="东京塔 &amp; 东京树"></a>东京塔 &amp; 东京树</h2><p>同样是电视塔，东京塔有它的历史感，东京树有它的朝气和活力</p><p>对我来说 可能商业气氛没那么浓的东京塔更中意点吧</p><p><img src="/2023/08/10/japan-travel-note-tokyo/tokyo-travel-note-08.png" alt="从芝公园看东京塔"></p><p><img src="/2023/08/10/japan-travel-note-tokyo/tokyo-travel-note-09.png" alt="东京树"></p><h2 id="东京地铁"><a href="#东京地铁" class="headerlink" title="东京地铁"></a>东京地铁</h2><p>除了找换站难的问题，东京地铁给我最大的印象还得是座位太舒服了，所有座位都有软坐垫和靠背。要是国内也有这样的配套，家人再也不用担心我加班多晚回来了</p><h2 id="吃的"><a href="#吃的" class="headerlink" title="吃的"></a>吃的</h2><p>来东京的第一顿正餐就是拉面，差点要咸哭我了</p><p>后面吃的口味比较正常，好不好喝关键还是得在汤</p><p><img src="/2023/08/10/japan-travel-note-tokyo/tokyo-travel-note-11.png" alt="东京树下吃的还不错的拉面"></p><p>寿司和国内相比，好吃并不在肉而是在米。在筑地市场吃的这家也好，在车站买的也好，米的口感都挺不错的</p><p><img src="/2023/08/10/japan-travel-note-tokyo/tokyo-travel-note-10.png" alt="筑地市场吃的寿司"></p><p><img src="/2023/08/10/japan-travel-note-tokyo/tokyo-travel-note-12.png" alt="坐JR吃的寿司"></p><p>当然，我承认自己还是更喜欢便利店的东西，这几天把泡面、寿司、零食都吃了个遍，什么吃的都不重样，不得不感叹这就是便利店大国的实力吗</p><h2 id="一点感想"><a href="#一点感想" class="headerlink" title="一点感想"></a>一点感想</h2><p>在亲身来到了东亚之光，一个真正包容开放的大城市之后，不禁还是想写点什么。东京之所以能成为东京，有客观的原因，也有它自己的东西，而且东京在从里到外很自信地展示着，有无数抬头就能看到的现代化元素，也在行走街道的转角处，看到的历史和潮流的碰撞（神社、老房子、窄窄的小巷、地铁的设施）。这些元素可能看着和东京的定位格格不入，但是东京毫不吝啬地让我们看到。它的包容性，也不只是体现在有多少外国人在这里，而是能让任何一个来东京旅游的人，都看得到关于它的一切</p><p>一味地否定自己的文化和历史，连自己该展示的精华都没搞明白，也很难让别人看得起自己</p>]]></content>
    
    
    <summary type="html">日本旅游日记系列</summary>
    
    
    
    <category term="旅游" scheme="http://smiecj.github.io/categories/%E6%97%85%E6%B8%B8/"/>
    
    <category term="日本" scheme="http://smiecj.github.io/categories/%E6%97%85%E6%B8%B8/%E6%97%A5%E6%9C%AC/"/>
    
    
    <category term="旅游" scheme="http://smiecj.github.io/tags/%E6%97%85%E6%B8%B8/"/>
    
    <category term="日本" scheme="http://smiecj.github.io/tags/%E6%97%A5%E6%9C%AC/"/>
    
    <category term="日记" scheme="http://smiecj.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>东京景点</title>
    <link href="http://smiecj.github.io/2023/07/14/japan-travel-guide-tokyo/"/>
    <id>http://smiecj.github.io/2023/07/14/japan-travel-guide-tokyo/</id>
    <published>2023-07-13T16:00:00.000Z</published>
    <updated>2023-07-26T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本文共享文档"><a href="#本文共享文档" class="headerlink" title="本文共享文档"></a>本文共享文档</h2><p><a href="https://thorn-silkworm-729.notion.site/dd52fddbc33d43fa93b272c0544d1ea6">日本景点</a></p><h2 id="东京介绍"><a href="#东京介绍" class="headerlink" title="东京介绍"></a>东京介绍</h2><p><a href="https://zh.wikipedia.org/zh-hans/%E4%B8%9C%E4%BA%AC">东京-维基百科</a></p><p>东京（日语：東京 / とうきょう Tōkyō */?）是位于日本关东地方的都市，一般指东京都、狭义上东京都区部（即东京市区），亦可泛指东京都及周边卫星都市相连而成的“首都圈”（东京都会区）。是日本事实上的首都。<strong>东京都人口数达1399万</strong>（2022年4月），首都圈的人口数则达3800万，是目前全球规模最大的都会区。<strong>东京的GDP为全球第二</strong>，在2016年达9730亿美元，而同时东京都会区（一都三县）则高达1.8兆美元，若将东京视为一个国家，其GDP总量高于加拿大、韩国、俄罗斯等，位列世界第八。东京为亚洲最重要的世界级城市，也是传统上的全球四大世界级城市之一，全球城市指数排名前四。此外，东京亦为世界最宜居城市（英国Monocle生活品质调查）。</p><p>东京古称江户，自德川幕府时代以来开始成为日本主要都市之一，明治维新时期改为现名后，更发展为日本政治、经济、文化、交通等众多领域的枢纽中心。经过二战后的继续发展，东京不仅成为世界商业金融、流行文化与时尚重镇，亦为世界经济发展及富裕程度最高的都市之一。此外，东京还拥有复杂且密集的城市轨道交通系统，其中单就东京的两大地铁系统管辖区段每日平均运量达880万人次，繁忙程度居全球地铁第三位；如将地铁直通运转路线、私铁通勤路线及JR通勤路线纳入计算，则每日平均运量位居世界城市轨道交通运输系统第一位。</p><p>在正式的行政区划定义上，东京仅限于东京都，与道、府、县同为日本的一级行政区，辖区包含东京都区部、多摩地方以及伊豆群岛、小笠原群岛等离岛；其中，<strong>东京都区部为日本中央政府所在地</strong>。东京都同时也囊括了日本最南端（冲之鸟礁）和最东端（南鸟岛）等地理极点，拥有日本各都道府县中最多的人口数，同时也是日本人口密度最高的都道府县。</p><h2 id="23区地图"><a href="#23区地图" class="headerlink" title="23区地图"></a>23区地图</h2><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-area-02.webp" alt="东京23区地图"></p><h2 id="景点游玩整理"><a href="#景点游玩整理" class="headerlink" title="景点游玩整理"></a>景点游玩整理</h2><table><thead><tr><th>方向</th><th>区域</th><th>景点</th><th>特点</th><th>交通</th><th>开放时间</th><th>门票/购票方式</th><th>周边住宿/景点</th><th>美食</th><th>时间</th><th>其他</th></tr></thead><tbody><tr><td>中心<div style="width: 30pt"></td><td><div style="width: 40pt">新宿区</td><td><div style="width: 100pt"><a href="https://www.mafengwo.cn/poi/22535.html">新宿御苑 しんじゅくぎょえん</a></td><td><div style="width: 100pt">大型公园，赏樱花，赏枫，言叶之庭取景地</td><td><div style="width: 150pt">大江户线-国立竞技场、新宿站</td><td><a href="https://www.gotokyo.org/cn/spot/75/index.html">全日，9:00～16:30</a></td><td><div style="width: 150pt">普通票:成人500日元 (1月1日-12月31日 周一-周日) ; 半票:250日元(15岁以上青少年、65岁以上老年人)</td><td><div style="width: 250pt">新宿站步行7分钟</td><td><div style="width: 250pt">待补充</td><td><div style="width: 50pt">1-3小时</td><td></td></tr><tr><td>中心</td><td>新宿区</td><td><a href="https://www.mafengwo.cn/poi/6151659.html">新宿黄金街 新宿ゴールデン街</a></td><td>老街，居酒屋街</td><td>紧邻歌舞伎町街与花园神社，JR山手线新宿站</td><td>全年开放</td><td>无门票</td><td><a href="https://www.gotokyo.org/cn/story/guide/shinjuku-shop/index.html">购物</a>: LUMINE: 年轻潮流<br>大黑屋: 中古店<br>京王百货店:销售化妆品、时装、饰品、玩具、家居用品、日本传统工艺品</td><td><a href="https://www.gltjp.com/zh-hans/directory/item/10362/">超厉害的煮干拉面（すごい煮干(にぼし)ラーメン）</a><br><a href="https://www.klook.com/zh-TW/activity/13174-yakiniku-tei-rokkasen-shinjuku-tokyo/?aid=77&utm_medium=affiliate-alwayson&utm_source=non-network&utm_campaign=77&utm_term=">燒肉亭六歌仙</a>: 烤肉吃到饱, <a href="https://ajgogo.com/2019-09-04-2191/">具体订位方式分享</a><br><a href="https://livejapan.com/zh-tw/in-tokyo/in-pref-tokyo/in-shinjuku/article-a0002669/">其他</a></td><td>2小时</td><td>位于歌舞伎町内，晚上才热闹</td></tr><tr><td>中心</td><td>新宿区</td><td><a href="https://www.mafengwo.cn/poi/6151659.html">歌舞伎町 かぶきちょう</a></td><td>各种娱乐、风俗店</td><td>同上</td><td>全年开放</td><td>无门票</td><td>参考其他</td><td><a href="https://www.mafengwo.cn/poi/6414404.html">矶丸水产(新宿3丁目店) （Isomaru Suisan）</a>: 知名，也有人评价一般；<a href="https://www.mafengwo.cn/poi/8093848.html">蟹道乐(新宿本店)</a>: 蟹的各种吃法，味道可能一般</td><td>3小时以上</td><td>晚上热闹，人很多，也很多黑社会，最好小心，<a href="https://www.cnkirito.moe/tokyo-travel/#%E6%AD%8C%E8%88%9E%E4%BC%8E%E7%94%BA">参考</a></td></tr><tr><td>中心</td><td>千代田区</td><td><a href="https://www.mafengwo.cn/poi/6151659.html">秋叶原 秋葉原 あきはばら アキバ</a></td><td>日本三大电器街<a href="https://www.momoda8.com/morank/54.html">(另一个: 日本桥)</a>、二次元</td><td>中央、总武线 / 银座线: 秋叶原站，步行5分钟，从新宿出发公交30分钟</td><td>全年开放</td><td>无门票</td><td><a href="https://livejapan.com/zh-cn/in-tokyo/in-pref-tokyo/in-akihabara/article-a0004361/">sofmap</a>: 电脑配件</td><td><a href="https://tabelog.com/tokyo/A1310/A131001/13021102">粋な一生ラーメン</a>（评分一般）、<a href="https://tabelog.com/tw/tokyo/A1310/A131001/13219278/dtlrvwlst/">BENGAL</a>（评分居中）</td><td>3小时以上</td><td>打卡点: <a href="https://www.animate.co.jp/shop/akihabara/">ANIMATE: 漫画书、漫画周边</a></td></tr><tr><td>中心</td><td>千代田区</td><td><a href="https://www.gotokyo.org/cn/story/guide/a-noble-look-at-tokyos-imperial-palace-a-guide-to-the-royal-residence/index.html">皇居 こうきょ / 江户城 えどじょう</a></td><td>日本皇室的住所，可以参观 东御苑和外苑</td><td>千代田线 - 大手町站; 中央线 - 东京站</td><td><a href="https://zh.wikipedia.org/zh-hans/%E7%9A%87%E5%B1%85%E6%9D%B1%E5%BE%A1%E8%8B%91">东御苑</a>（皇居東御苑/こうきょひがしぎょえん）全年开放，观光游从周二到周六每天各有2次，可以<a href="https://www.bring-you.info/zh-hans/tokyo-imperial-palace#spot2">在线申请</a>（从<a href="https://sankan.kunaicho.go.jp/index.html">这里</a>看已经申请满了）</td><td><a href="https://cn.tripadvisor.com/Attraction_Review-g1066443-d479262-Reviews-Two_tiered_Bridge_Ni_ju_Bashi-Chiyoda_Tokyo_Tokyo_Prefecture_Kanto.html">二重桥 にじゅうばし</a>（需要先申请）、<a href="https://www.japan-travel.cn/spot/1736/">千鸟渊 千鳥ヶ淵 ちどりがふち</a>（皇居的护城河，赏樱）、<a href="https://www.japan-travel.cn/spot/1718/">日本武道馆</a></td><td>参考其他</td><td>1小时</td><td></td><td></td></tr><tr><td>中心</td><td>涩谷区</td><td><a href="https://www.japan-travel.cn/spot/1666/">明治神宫 明治神宮 めいじじんぐう</a></td><td>明治天皇(1852-1912)与昭宪皇太后，涩谷区中最大的一块绿地</td><td>山手线 - 原宿站; 千代田线或副都心线 - 明治神宫前站</td><td>全年开放</td><td>无门票</td><td>代代木公园</td><td>参考其他</td><td>1小时</td><td></td></tr><tr><td>中心</td><td>涩谷区</td><td><a href="https://www.japan-travel.cn/spot/2177/">涩谷全向十字路口 渋谷スクランブル交差点 Scramble</a></td><td>最经典的十字路口</td><td>涩谷车站八公出口</td><td>全年开放</td><td>无门票</td><td>参考其他</td><td>参考其他</td><td>几分钟</td><td></td></tr><tr><td>中心</td><td>涩谷区</td><td><a href="https://livejapan.com/zh-cn/in-tokyo/in-pref-tokyo/in-shibuya/spot-lj0001987">忠犬八公像 忠犬ハチ公像 ちゅうけんハチ</a></td><td><a href="https://zh.wikipedia.org/zh-sg/%E5%BF%A0%E7%8A%AC%E5%85%AB%E5%85%AC">故事</a>: 为生前习惯去东京涩谷车站迎接其主人上野英三郎教授归来，甚至在主人死后也一直等待了约10年</td><td>涩谷站</td><td>全年开放</td><td>无门票</td><td>参考其他</td><td>参考其他</td><td>几分钟</td><td></td></tr><tr><td>中心</td><td>涩谷区</td><td><a href="https://cn.tripadvisor.com/Attraction_Review-g1066456-d1373790-Reviews-Takeshita_Street-Shibuya_Tokyo_Tokyo_Prefecture_Kanto.html">竹下通 竹下通り たけしたどおり</a></td><td>时装店，小吃</td><td>山手线 - 原宿站</td><td>10:30-20:30</td><td>无门票</td><td>店: ＠cosme TOKYO 旗舰店（美妆）、WITH HARAJUKU 复合式商场</td><td><a href="https://tabelog.com/tokyo/A1306/A130601/13186805/">トッティ キャンディ ファクトリー 原宿店 （Totti Candy Factory）</a>: 巨型彩色棉花糖和粉红少女装<br><a href="https://tabelog.com/tokyo/A1306/A130601/13088711/">マリオンクレープ 原宿竹下通り店 / MARION Crepes 可丽饼</a> 招牌: 特制草莓布朗尼蛋糕＆巧克力生鲜奶油2倍<br><a href="https://tabelog.com/tokyo/A1306/A130601/13218655/">LONG! LONGER!! LONGEST</a>: 日本最长的吉拿棒、日本最长的棉花糖等</td><td>1-2小时</td><td></td></tr><tr><td>中心</td><td>港区</td><td><a href="https://www.japan-travel.cn/spot/1709/">东京塔 东京铁塔 東京タワー / とうきょうタワー</a></td><td>建于1958年，广播塔，东京第二高（2010年晴空塔建成之后），333 米（1,029 英尺），红白相间</td><td>大江户线-赤羽桥; 日比谷线-霞关</td><td>9:00-23:00</td><td>Main Deck（大眺望厅）的入场费为 1200 日元，Top Deck（特别眺望厅）的行程门票是 3,000 日元<br>在<a href="https://www.tokyotower.co.jp/cn/price/">tokyotower（官网）</a>或者<a href="https://www.klook.com/zh-CN/activity/4911-tokyo-tower-main-observatory-ticket-tokyo/">klook</a>可以预定</td><td><a href="https://tokyo.letsgojp.cn/archives/321054/">拍摄地点</a>: 芝公园4号地、赤羽桥车站～「东京铁塔下」（东京タワー下）路口、<a href="https://www.gltjp.com/zh-hant/article/item/12052/#zh-1-12">東京鐵塔停車場樓梯</a>、増上寺（增上寺） × 東京鐵塔、彩虹大橋北側遊步道</td><td><a href="https://beauty-upgrade.tw/23723">东京铁塔内美食</a></td><td>1-2小时</td><td>晚上的票可能比较火爆，需要提前1-2周预订<br>可购买礼品: 千分之一東京鐵塔</td></tr><tr><td>中心</td><td>港区</td><td><a href="https://www.gltjp.com/zh-hans/directory/item/10114/">芝公园 芝公園 しばこうえん</a></td><td>1873 年建成，日本最早的公园，赏花，东京铁塔拍摄地</td><td>浅草线-大门<br>三田线-御成门</td><td>全年开放</td><td>无门票</td><td>东京塔</td><td><a href="https://tabelog.com/matome/3394">参考</a>: クレッセント(法国料理)<br><a href="https://majohouse.com/2016/01/07/nodaiwa-minato/">野田岩</a>（鳗鱼之神）</td><td>1小时</td><td></td></tr><tr><td>中心</td><td>港区</td><td><a href="https://www.mafengwo.cn/poi/6151659.html">台场 台場 だいば</a></td><td>东京湾右下角，看整个东京湾</td><td>山手线-&gt;临海线-东京电讯; 新宿出发约50分钟</td><td>全年开放</td><td>空中列车百合鸥号，可现场或者<a href="https://www.kkday.com/zh-cn/product/28490-asakusa-to-odaiba-tokyo-waterside-water-bus-ride-japan">kkday</a>购买</td><td><a href="https://livejapan.com/zh-cn/in-tokyo/in-pref-tokyo/in-odaiba/spot-lj0002127/?sc_lid=lj_pc_article_spot01">调色板城大摩天轮 パレットタウン</a>（现场购票）<br><a href="https://www.gotokyo.org/cn/spot/39/index.html">台场海滨公园</a>（人工岛，风景不错）<br><a href="https://www.gotokyo.org/cn/story/walks-and-tours/waterfront/rainbow-bridge/index.html">彩虹大桥 レインボーブリッジ，Rainbow Bridge</a>（眺望整个东京湾，看东京塔，步行30分钟）</td><td>参考其他</td><td>2-3小时</td><td><a href="https://japantravel.navitime.com/zh-cn/area/jp/guide/NTJarea0120-zh-cn/">线路推荐: ①筑地→②丰洲→③有明→④台场</a></td></tr><tr><td>中心</td><td>港区</td><td><a href="https://bobby.tw/blog/post/227736584-%E3%80%90%E6%9D%B1%E4%BA%AC%E6%99%AF%E9%BB%9E%E3%80%91%E5%85%AD%E6%9C%AC%E6%9C%A8%E4%B9%8B%E4%B8%98hills%28%E6%96%B0%E5%9F%8E%E5%B1%95%E6%9C%9B%E5%8F%B0%29%EF%BC%9A">六本木之丘 六本木新城森大楼 ろっぽんヒルズ森タワー</a></td><td>观景台，六本木: 最多企业总部的区域，新城</td><td>日比谷线-六本木; 大江户线-六本木</td><td>全年开放</td><td>最晚8点，<a href="https://www.kkday.com/zh-my/product/18946-tokyo-roppongi-hills-mori-tower-observation-deck-ticket-japan">kkday预订</a>，可提前一个月，93元</td><td>参考其他</td><td><a href="https://www.bring-you.info/zh-hans/afuri-ramen">AFURI阿夫利</a>: 拉面店</td><td>1-3小时</td><td><a href="https://www.bring-you.info/zh-hans/roppongi-hot-spots#spot9">【东京六本木景点】六本木之丘、夜景拍摄、逛街、美食、交通、一日游攻略</a></td></tr><tr><td>中心</td><td>中央区</td><td><a href="https://www.mafengwo.cn/poi/6151659.html">银座 銀座 / ぎんざ</a></td><td>逛街<br>主要街区: 銀座通り<br>四丁目</td><td>丸之内线-银座<br>银座线-银座</td><td>全年开放</td><td>无门票</td><td><a href="https://www.gotokyo.org/cn/destinations/central-tokyo/nihombashi/index.html">日本桥 日本橋 / にほんばし</a>: 江户时代，历史和现代的融合</td><td><a href="https://tabelog.com/tokyo/A1301/A130101/13228602/">银座八五</a>: 米其林，「无酱油」淡丽系拉面<br><a href="https://www.bring-you.info/zh-hans/ginzakagari">银座篝(gou)(かがり) 松露鸡白汤拉面</a>: 鸡白汤（鶏パイタン）拉面<br><a href="https://www.bigfang.tw/blog/post/hanayamaudon-ginza">五代目 花山乌冬 银座店</a>: 五公分宽的「鬼ひも川」</td><td>3小时</td><td><a href="https://www.bring-you.info/zh-hans/ginza#musteat">【银座景点】银座一日游逛街去：必逛购物百货公司 &amp; 美食餐厅 &amp; 下午茶甜点 &amp; 住宿推荐</a></td></tr><tr><td>中心</td><td>中央区</td><td><a href="https://www.gotokyo.org/cn/spot/65/index.html">筑地场外市场 築地場外市場 築地市場 / つきじしじょう </a></td><td>海鲜街，小吃</td><td>银座走路7分钟</td><td>全年开放</td><td>无门票</td><td>银座</td><td><a href="https://venuslin.tw/tamagoyaki-tsukiji">筑地山长玉子烧</a><br><a href="https://www.tsukiji.or.jp/shoplist/cat-b/cat-4/230/">吉澤商店 よしざわしょうてん</a>: 肉饼（6:00～13:00）<br><a href="https://tabelog.com/tokyo/A1313/A131301/13145358/">まぐろのみやこ</a>: 海鲜烧<br><a href="https://tabelog.com/tokyo/A1313/A131301/13180099/">そらつき</a>: 草莓大福</td><td>1-3小时</td><td>考虑到吃的东西多，建议早上来<br>参考<a href="https://www.youtube.com/watch?v=ImqrkgHIXGw">自由行视频</a>: 筑地场外市场 -&gt; 东京塔 -&gt; 银座篝</td></tr><tr><td>城南</td><td>世田谷区</td><td><a href="https://www.klook.com/zh-TW/blog/gotokuji-temple-tokyo/">豪德寺 ごうとくじ</a></td><td>充满猫的神社</td><td>千代田线-代代木上原 -&gt; odakyu line: 豪德寺</td><td>全年开放</td><td>无门票</td><td>附近好像没啥其他景点</td><td>参考其他</td><td>1小时，从中心出发时间半小时+</td><td></td></tr><tr><td>城南</td><td>世田谷区</td><td><a href="https://www.mafengwo.cn/poi/6151659.html">下北泽 下北沢 / しもきたざわ</a></td><td>复古安静的购物街道，文艺风</td><td>京王井之头线</td><td>全年开放</td><td>无门票</td><td>明治大学、东京大学</td><td><a href="https://tokyo.letsgojp.cn/archives/72489/">推荐美食</a>: <a href="https://tabelog.com/tokyo/A1318/A131802/13164953/">ポニピリカ: 异国风情汤咖哩</a><br><a href="https://tabelog.com/tokyo/A1318/A131802/13054105/">シティー カントリー シティ （CITY COUNTRY CITY）</a>: 民谣，意大利面，咖啡</td><td>1-2小时</td><td>适合中午下午逛</td></tr><tr><td>城南</td><td>品川区</td><td><a href="https://www.gltjp.com/zh-hant/directory/item/12810/">品川花海道</a></td><td>长2公里的花田</td><td>山手线-&gt;京滨东北线 大井町, 新宿出发1小时</td><td>全年开放</td><td>无门票</td><td>无</td><td><a href="https://www.gltjp.com/zh-hant/directory/item/10742/">東京洋食屋神田Grill Atre大井町店</a>: 洋食老店<br><a href="https://www.gltjp.com/zh-hant/directory/item/12914/">南品川茶箱</a>: 茶屋、甜品，日本茶: 深蒸煎茶; 草莓餡蜜<br><a href="https://www.gltjp.com/zh-hant/directory/item/10221/">Homemade Ramen麥苗</a>: 豚骨汤拉面</td><td>1小时</td><td></td></tr><tr><td>城南</td><td>大田区</td><td><a href="https://www.gotokyo.org/cn/spot/494/index.html">Jonanjima Seaside Park 城南岛海滨公园 城南島海浜公園 じょうなんじまかいひんこうえん</a></td><td>东京湾边缘，沙滩和飞机</td><td>山手线-&gt;京滨东北线 大大森 -&gt; 森32公交, 城南岛四丁目</td><td>全年开放</td><td>无门票</td><td>参考其他</td><td>参考其他</td><td>1-2小时</td><td></td></tr><tr><td>城西</td><td>中野区</td><td><a href="https://www.gotokyo.org/cn/spot/72/index.html">中野百老汇 中野ブロードウェイ</a></td><td>比秋叶原更安静的动漫周边店</td><td>宿08<br>东西线-中野</td><td>全年开放</td><td>无门票</td><td>无</td><td><a href="https://tabelog.com/tokyo/P000094/premiseLst/">参考tabelog</a>: 都比较普通</td><td>1-3小时</td><td></td></tr><tr><td>城北</td><td>板桥区</td><td><a href="https://www.gotokyo.org/cn/spot/ev046/index.html">板桥花火大会</a></td><td><a href="https://itabashihanabi.jp/">官网</a>: 7:00-8:30; <a href="https://itabashihanabi.jp/guide.html">荒天中止</a>, <a href="https://trip.iko-yo.net/events/1404">时隔四年</a>，约 1w3k 发</td><td><a href="https://itabashihanabi.jp/access.html">官方交通说明</a><br>河川敷（カセンシキ）: 从市区出发，银座线-&gt;中阳线-&gt;南武线-&gt;矢川</td><td>8月5日</td><td><a href="https://itabashihanabi.jp/paidseat.html">付费: 陸上競技場席</a>: 凳子 5500 日元</td><td>参考其他</td><td>参考其他</td><td>2小时</td><td><a href="https://cn.tripadvisor.com/Attraction_Review-g1066446-d8820262-Reviews-Itabashi_Fireworks-Itabashi_Tokyo_Tokyo_Prefecture_Kanto.html">观景免费的</a>: 河川敷, Kasenjikikouen Soccer Field<br>需要提前1-2个小时</td></tr><tr><td>城东</td><td>台东区</td><td><a href="https://www.bring-you.info/zh-hans/sensoji-temple">浅草寺 せんそうじ</a></td><td>浅草寺创建于628年，是东京都内最古老的寺院。东京都历史最早的寺院</td><td>银座线; 从住宿出发20分钟, 神田-&gt;浅草 6个站</td><td>全年开放</td><td><a href="https://www.bring-you.info/zh-hans/asakusa-hana-kimono">和服出租(需要提前预约)</a></td><td>路线建议: 雷门 → 接仲见世通（边吃边买约0.5~1hr）  → 穿过宝藏门 → 到浅草寺参拜 → 旁边的浅草神社 → 前往上野、阿美横町、谷中银座、晴空塔<br>雷门: 670公斤重, 1960年重建, 写着风雷神门，象征了两侧的风神和雷神<br><a href="https://www.gotokyo.org/cn/spot/73/index.html">仲见世通(なかみせどおり)</a>: 小吃，工艺品<br>宝藏门后的大草鞋，400公斤重<br>进入浅草寺之前: 把香炉（こうろ）的烟揽到自己身上<br><a href="https://japantravel.navitime.com/zh-cn/area/jp/guide/NTJhowto0142-zh-cn/">洗手</a>: 鞠躬-&gt;右手拿勺清洗左手，左手拿勺清洗右手-&gt;右手拿勺清洗左手-&gt;右手给左手盛水漱口（流过嘴唇就好了）-&gt; 剩下点水清洗左手 -&gt; 倒水，直立柄勺清洗柄勺 -&gt; 再次鞠躬<br>进入神社时尽量靠两边走，中间留给神明<br>参拜:因为是佛教寺院，因此进入山门前鞠躬一次即可，不用击掌<br>投入100元鞠躬-&gt;抽签<br>买御守<br>浅草神社, 1945年空袭中幸免于难 ｜ 参考其他</td><td><a href="https://www.bring-you.info/zh-hans/sensoji-temple">UNIQLO浅草概念店</a>: 浅草寺风格的寺庙</td><td>3小时</td><td></td></tr><tr><td>城东</td><td>台东区</td><td><a href="https://www.japan-travel.cn/spot/1673/">上野公园 上野公園 / うえのこうえん</a></td><td>交通枢纽区的公园，寺庙、各种美术馆和博物馆（东京国立博物馆、国立西洋美术馆、国立科学博物馆、上野动物园）、赏樱，日本的第一座公园</td><td>大江户线-上野御徒町，新宿出发35分钟</td><td>全年开放</td><td>无门票</td><td>阿美横丁、镰仓小町通、上野恩赐公园上野樱花祭</td><td>参考其他</td><td>1小时</td><td></td></tr><tr><td>城东</td><td>台东区</td><td><a href="https://www.japan-travel.cn/spot/1706/">雨横购物街 上野阿美横町 アメヤ横丁 アメヤよこちょう</a></td><td>曾经的黑市，现在的购物天堂</td><td>上野公园走路10分钟</td><td>全年开放</td><td>无门票</td><td><a href="https://www.bring-you.info/zh-hans/ame-yoko">参考</a><br>药妆店: OS drug（オーエスドラッグ）、松本清一店（薬 マツモトキヨシ）、Sundrug（サンドラッグ）<br><a href="https://www.daikokudrug.com/">大国药妆 大國藥妝</a><br><a href="https://bobby.tw/blog/post/228013178-%E3%80%90%E6%9D%B1%E4%BA%AC%E3%80%91%E4%B8%8A%E9%87%8E%E4%BA%8C%E6%9C%A8%E8%8F%93%E5%AD%90%E5%BF%85%E8%B2%B7%EF%BC%9A%E6%9C%80%E5%A4%AF%E6%9A%A2%E9%8A%B7%E6%B8%85%E5%96%AE%EF%BC%8C">二木的菓子 二木の菓子</a>: Alfort帆船餅乾（巧克力）、明治果汁軟糖（100%果汁）、ORIHIRO蒟蒻果凍、iFactory梅干片、UHA味覺糖、日清兵衛豆皮烏龍麵、干贝</td><td><a href="https://www.bring-you.info/zh-hans/yakitori-bunraku">やきとり文乐</a>: 烤鸡</td><td>1-2小时</td><td></td></tr><tr><td>城东</td><td>墨田区</td><td><a href="https://www.gotokyo.org/cn/destinations/eastern-tokyo/skytree-and-around/index.html">东京天空树 东京晴空塔 東京スカイツリー とうきょうスカイツリー</a></td><td>世界第三高，可远观富士山</td><td>从浅草寺出发走路17分钟<br>半藏门线-押上<br>浅草线-押上</td><td>10:00~21:00</td><td><a href="https://www.tokyo-skytree.jp/cn_s/ticket/individual/">官方在线购买</a>, 比线下优惠300日元<br>天望回廊+天望甲板: 2700<br>天望甲板: 1800</td><td>参考其他</td><td>参考其他</td><td>1-2小时</td><td></td></tr><tr><td>城东</td><td>墨田区</td><td><a href="https://www.tokyo-solamachi.jp/cn/">晴空街道 晴空塔城 東京スカイツリータウン Tokyo Skytree Town</a></td><td>商业中心</td><td>东京树旁</td><td>全年开放</td><td>无门票</td><td>晴空街道3楼: 西馆（JUMP SHOP 等动漫专卖店、美食街）、东馆（Uniqlo等平价品牌）<br>4楼: 纪念品</td><td>参考<a href="https://www.tokyo-solamachi.jp/cn/restaurant/">官方推荐</a></td><td>1小时</td><td></td></tr><tr><td>城东</td><td>墨田区</td><td><a href="https://www.gotokyo.org/cn/spot/1745/index.html">江户东京博物馆 東京都江戸東京博物館 とうきょうとえどとうきょうはくぶつかん</a></td><td>江户时代的文物展示</td><td>大江户线-Ryogoku Sta.<br>门33-TOEI-RYŌGOKU-EKI-MAE</td><td>除周一</td><td>600日元门票</td><td>参考其他</td><td>参考其他</td><td>1-2小时</td><td></td></tr><tr><td>城东</td><td>江户川区</td><td><a href="https://www.gltjp.com/zh-hans/directory/item/13909/">Diamond and Flower Ferris Wheel 钻石与花之大摩天轮 ダイヤと花の大観覧车</a></td><td>日本最大的摩天轮，每圈17分钟，东京的右下角</td><td>新宿出发: 新宿线-市谷-&gt;有乐町线-新木场-&gt;京叶线-葛西临海公园</td><td>平时10:00 - 19:00 节假日 10:00 - 20:00</td><td>800日元</td><td>无</td><td>无</td><td>1小时</td><td></td></tr></tbody></table><h3 id="各个景区图片和评论参考"><a href="#各个景区图片和评论参考" class="headerlink" title="各个景区图片和评论参考"></a>各个景区图片和评论参考</h3><h4 id="新宿-新宿御苑"><a href="#新宿-新宿御苑" class="headerlink" title="新宿-新宿御苑"></a>新宿-新宿御苑</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-gyoen-01.jpeg" alt="新宿御苑"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-gyoen-02.jpeg" alt="新宿御苑"></p><h4 id="新宿-新宿黄金街"><a href="#新宿-新宿黄金街" class="headerlink" title="新宿-新宿黄金街"></a>新宿-新宿黄金街</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-shinjukugoruden-01.jpeg" alt="新宿黄金街"></p><h4 id="新宿-歌舞伎町"><a href="#新宿-歌舞伎町" class="headerlink" title="新宿-歌舞伎町"></a>新宿-歌舞伎町</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-kabukicho-01.jpeg" alt="歌舞伎町"></p><h4 id="千代田-秋叶原"><a href="#千代田-秋叶原" class="headerlink" title="千代田-秋叶原"></a>千代田-秋叶原</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-akihabara-01.jpeg" alt="秋叶原"></p><h4 id="千代田-皇居"><a href="#千代田-皇居" class="headerlink" title="千代田-皇居"></a>千代田-皇居</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-koukyo-01.jpeg" alt="皇居"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-koukyo-02.webp" alt="皇居"></p><h4 id="涩谷-明治神宫"><a href="#涩谷-明治神宫" class="headerlink" title="涩谷-明治神宫"></a>涩谷-明治神宫</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-meijijinguu-01.jpeg" alt="明治神宫"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-meijijinguu-02.jpeg" alt="明治神宫"></p><h4 id="涩谷-渋谷スクランブル交差点"><a href="#涩谷-渋谷スクランブル交差点" class="headerlink" title="涩谷-渋谷スクランブル交差点"></a>涩谷-渋谷スクランブル交差点</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-scramble-01.jpeg" alt="涩谷全向十字路口"></p><h4 id="涩谷-忠犬ハチ公像"><a href="#涩谷-忠犬ハチ公像" class="headerlink" title="涩谷-忠犬ハチ公像"></a>涩谷-忠犬ハチ公像</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-chukenhachi-01.jpeg" alt="忠犬ハチ公像"></p><h4 id="涩谷-竹下通り"><a href="#涩谷-竹下通り" class="headerlink" title="涩谷-竹下通り"></a>涩谷-竹下通り</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-takeshitadoori-01.jpeg" alt="竹下通り"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-takeshitadoori-02.jpeg" alt="竹下通り"></p><p>Totti Candy Factory</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-takeshitadoori-03.jpeg" alt="竹下通り"></p><p>MARION Crepes</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-takeshitadoori-04.jpeg" alt="竹下通り"></p><h4 id="港区-东京塔"><a href="#港区-东京塔" class="headerlink" title="港区-东京塔"></a>港区-东京塔</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-tokyotawa-01.webp" alt="东京塔"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-tokyotawa-02.jpeg" alt="东京塔"></p><h4 id="港区-芝公园"><a href="#港区-芝公园" class="headerlink" title="港区-芝公园"></a>港区-芝公园</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-shibakouen-01.jpeg" alt="芝公园"></p><h4 id="港区-台场"><a href="#港区-台场" class="headerlink" title="港区-台场"></a>港区-台场</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-daiba-01.jpeg" alt="台场"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-daiba-02.jpeg" alt="台场"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-daiba-03.jpeg" alt="台场"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-daiba-04.jpeg" alt="台场"></p><h4 id="中央区-银座"><a href="#中央区-银座" class="headerlink" title="中央区-银座"></a>中央区-银座</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-ginza-01.webp" alt="银座"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-ginza-02.jpeg" alt="银座"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-nihonbashi-01.jpeg" alt="日本桥"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-nihonbashi-02.jpeg" alt="日本桥"></p><h4 id="中央区-筑地场外市场"><a href="#中央区-筑地场外市场" class="headerlink" title="中央区-筑地场外市场"></a>中央区-筑地场外市场</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-tukijishi-01.jpeg" alt="築地場外市場"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-tukijishi-02.jpeg" alt="築地場外市場"></p><h4 id="千代田区-豪德寺"><a href="#千代田区-豪德寺" class="headerlink" title="千代田区-豪德寺"></a>千代田区-豪德寺</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-goutokuji-01.jpeg" alt="豪德寺"></p><h4 id="千代田区-下北泽"><a href="#千代田区-下北泽" class="headerlink" title="千代田区-下北泽"></a>千代田区-下北泽</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-shimokitazawa-01.jpeg" alt="下北泽"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-shimokitazawa-02.jpeg" alt="下北泽"></p><h4 id="板桥区-板桥花火大会"><a href="#板桥区-板桥花火大会" class="headerlink" title="板桥区-板桥花火大会"></a>板桥区-板桥花火大会</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-itabashi-hanabitaikai-01.jpeg" alt="板桥花火大会"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-itabashi-hanabitaikai-02.png" alt="板桥花火大会"></p><h4 id="台东区-浅草寺"><a href="#台东区-浅草寺" class="headerlink" title="台东区-浅草寺"></a>台东区-浅草寺</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-sensouji-01.jpeg" alt="浅草寺"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-sensouji-02.jpeg" alt="浅草寺"></p><h4 id="台东区-上野公园"><a href="#台东区-上野公园" class="headerlink" title="台东区-上野公园"></a>台东区-上野公园</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-uenokouen-01.webp" alt="上野公园"></p><h4 id="台东区-上野阿美横町"><a href="#台东区-上野阿美横町" class="headerlink" title="台东区-上野阿美横町"></a>台东区-上野阿美横町</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-ameya-01.jpeg" alt="上野阿美横町"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-ameya-02.jpeg" alt="上野阿美横町"></p><h4 id="墨田区-东京天空树"><a href="#墨田区-东京天空树" class="headerlink" title="墨田区-东京天空树"></a>墨田区-东京天空树</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-skytree-01.jpeg" alt="东京天空树"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-skytree-02.jpeg" alt="东京天空树"></p><h4 id="墨田区-晴空塔城"><a href="#墨田区-晴空塔城" class="headerlink" title="墨田区-晴空塔城"></a>墨田区-晴空塔城</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-skytree-town-01.jpeg" alt="晴空塔城"></p><h4 id="墨田区-東京都江戸東京博物館"><a href="#墨田区-東京都江戸東京博物館" class="headerlink" title="墨田区-東京都江戸東京博物館"></a>墨田区-東京都江戸東京博物館</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-tokyohakubutukan-01.jpeg" alt="東京都江戸東京博物館"></p><h4 id="江户川区-钻石与花之大摩天轮"><a href="#江户川区-钻石与花之大摩天轮" class="headerlink" title="江户川区-钻石与花之大摩天轮"></a>江户川区-钻石与花之大摩天轮</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-diamondkanlansha-01.jpeg" alt="钻石与花之大摩天轮"></p><h3 id="其他非必逛-未整理景区"><a href="#其他非必逛-未整理景区" class="headerlink" title="其他非必逛/未整理景区"></a>其他非必逛/未整理景区</h3><p>新宿区<br><a href="https://www.gltjp.com/zh-hans/directory/item/10148/">东京都厅观景台</a><br>原因: 开放时间非常少: 每月第1・第3个星期二，观景台</p><p><a href="https://cn.tripadvisor.com/Attraction_Review-g1066457-d1373765-Reviews-Meijijingu_Gaien-Shinjuku_Tokyo_Tokyo_Prefecture_Kanto.html">明治神宫外苑</a><br>原因: 公园类型，赏银杏，秋季比较适合</p><p><a href="https://cn.tripadvisor.com/Attraction_Review-g14133673-d1173749-Reviews-Omoide_Yokocho-Nishishinjuku_Shinjuku_Tokyo_Tokyo_Prefecture_Kanto.html">新宿西口照相机街</a><br>原因: 逛街类型</p><p><a href="https://cn.tripadvisor.com/Attraction_Review-g14133673-d1594916-Reviews-Shinjuku_Chuo_Park-Nishishinjuku_Shinjuku_Tokyo_Tokyo_Prefecture_Kanto.html">新宿中央公园</a><br>公园</p><p>千代田区</p><p><a href="https://www.mafengwo.cn/gonglve/ziyouxing/283852.html">东京站</a><br>最繁忙车站，很复杂，可以购物，打个卡就好，周围的景点适合逛（皇居外苑）</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-tokyoeki-01.webp" alt="东京站"></p><p><a href="https://cn.tripadvisor.com/Attraction_Review-g1066443-d555799-Reviews-Yasukuni_Shrine-Chiyoda_Tokyo_Tokyo_Prefecture_Kanto.html">靖国神社</a><br>你懂的</p><p><a href="https://ikidane-nippon.com/zh-Hans/spots/nippon-budokan">日本武道馆</a><br>竞技场，演唱会</p><p>涩谷区<br><a href="https://cn.tripadvisor.com/Attraction_Review-g1066456-d561514-Reviews-Yoyogi_Park-Shibuya_Tokyo_Tokyo_Prefecture_Kanto.html">代代木公园</a></p><p>港区</p><p><a href="https://cn.tripadvisor.com/Attraction_Review-g14129743-d1574646-Reviews-Tokyo_Midtown-Akasaka_Minato_Tokyo_Tokyo_Prefecture_Kanto.html">东京中城</a><br>购物中心，奢侈品</p><p>中央区</p><p><a href="https://cn.tripadvisor.com/Attraction_Review-g14129573-d1373683-Reviews-Kabukiza_Theater-Ginza_Chuo_Tokyo_Tokyo_Prefecture_Kanto.html">歌舞伎剧场</a></p><p><a href="https://www.japan-travel.cn/spot/1653/">滨离宫恩赐庭园</a><br>曾经的皇家庭园</p><p>文京区</p><p><a href="https://www.gotokyo.org/cn/spot/22/index.html">六义园</a><br>江户代表性回游式假山泉水庭园</p><p><a href="https://www.gotokyo.org/cn/spot/24/index.html">小石川后乐园 小石川後楽園</a><br>东京最美的日本庭园</p><p><a href="https://www.gotokyo.org/tc/destinations/central-tokyo/tokyo-dome-and-around/index.html">东京巨蛋</a><br>体育项目，餐厅</p><p>世田谷区<br><a href="https://www.gotokyo.org/cn/spot/901/index.html">Kinuta Park 砧公园 砧公園 / きぬたこうえん</a><br>840棵樱花树</p><p>目黑区</p><p><a href="https://topmuseum.jp/chi/contents/pages/about_history.html">东京摄影美术馆</a><br>摄影和影像作品的综合性美术馆</p><p><a href="https://www.aquarium.gr.jp/">品川水族馆</a><br>水族馆<br>门票: <a href="https://www.klook.com/zh-CN/activity/5609-aqua-park-shinagawa-ticket-tokyo/">klook</a>、<a href="https://www.kkday.com/zh-cn/product/18689-tokyo-maxell-aqua-park-shinagawa-ticket-japan">kkday</a></p><p>杉并区</p><p><a href="https://cn.tripadvisor.com/Attraction_Review-g1066458-d1594552-Reviews-Wadabori_Park-Suginami_Tokyo_Tokyo_Prefecture_Kanto.html">Wadabori Park 和田堀公園</a><br>赏樱</p><p>练马区</p><p><a href="https://www.gotokyo.org/cn/spot/656/index.html">东京千寻美术馆 ちひろ美術館</a><br>水彩画主题展，美术作品</p><p><a href="https://www.gotokyo.org/cn/spot/433/index.html">石神井公园</a><br>东京最大的绿地, 新宿40分钟</p><p>荒川区</p><p><a href="https://www.gotokyo.org/jp/destinations/northern-tokyo/nippori/index.html">日暮里繊維街 日暮里ガイド</a><br>购物</p><p>丰岛区<br><a href="https://cn.tripadvisor.com/Attraction_Review-g1066460-d1425386-Reviews-Sunshine_Aquarium-Toshima_Tokyo_Tokyo_Prefecture_Kanto.html">阳光水族馆</a></p><p>台东区<br><a href="https://cn.tripadvisor.com/Attraction_Review-g14134311-d2492312-Reviews-Asakusa_Shrine-Asakusa_Taito_Tokyo_Tokyo_Prefecture_Kanto.html">浅草神社</a><br>可以体验和服</p><p><a href="https://www.japan-travel.cn/spot/663/">东京国立博物馆</a><br>日本艺术、其他国家的文物, <a href="https://www.mafengwo.cn/poi/7408.html">东洋馆</a>中展示的大部分中国的，如<a href="https://zh.wikipedia.org/zh-sg/%E7%A5%AD%E5%A7%AA%E6%96%87%E7%A8%BF">祭侄文稿</a></p><p>丰岛区</p><p><a href="https://www.gltjp.com/zh-hans/directory/item/10844/">目白庭园</a><br>典型日本庭院</p><p>参考资料:</p><p><a href="https://zhuanlan.zhihu.com/p/457227817">你了解东京吗？全方位详解日本东京23个区</a></p><p><a href="https://cn.tripadvisor.com/Attractions-g1066444-Activities-a_allAttractions.true-Chuo_Tokyo_Tokyo_Prefecture_Kanto.html">中央区景点玩乐</a></p><p><a href="https://travo.guide/japan/tokyo/best-attractions-in-minato/">【2023東京旅遊攻略】東京港區熱門景點推薦 (東京鐵塔、台場、六本木之丘)</a></p><p><a href="https://zhuanlan.zhihu.com/p/429339891">东京大田区，这些漂亮的小众拍照景点，不要错过</a></p><p>新宿区</p><p><a href="https://cn.tripadvisor.com/Attractions-g1066457-Activities-Shinjuku_Tokyo_Tokyo_Prefecture_Kanto.html">新宿区景点玩乐</a></p><p><a href="https://livejapan.com/zh-cn/in-tokyo/in-pref-tokyo/in-shinjuku/article-a0003768/">新宿散策必备！新宿各区域必访推荐景点指南</a></p><p>涩谷区</p><p><a href="https://www.bring-you.info/zh-hans/harajuku">【原宿逛街地图】原宿、竹下通好逛平价潮流服饰&amp;美食攻略，东京年轻人的购物景点</a></p><p><a href="https://tabelog.com/matome/22451/">tabelog-竹下通りで人気の食べ物！食べ歩き・イートイングルメ20選</a></p><p><a href="https://cn.tripadvisor.com/Tourism-g1066854-Shinagawa_Tokyo_Tokyo_Prefecture_Kanto-Vacations.html">品川区</a></p><p><a href="https://tokyo.letsgojp.cn/archives/525311/">东京「练马区」景点推荐！朝圣动漫圣地、松屋创始店、哈利波特主题乐园</a></p><p><a href="https://newtaipei.travel/zh-cn/regional/sightseeing/1">newtaipei-板桥</a></p><p><a href="https://www.adachikanko.net/zh-CHS/recommend/adachi_spot">足立区的观光路线和景点介绍</a></p><p>目黑区<br><a href="https://resources.realestate.co.jp/zh_CN/area-guide/%E7%9B%AE%E9%BB%91%E5%8C%BA%E6%8C%87%E5%8D%97-%E4%B8%9C%E4%BA%AC%E5%9C%B0%E5%8C%BA%E6%8C%87%E5%8D%97/">樱花道</a></p><p><a href="http://www.bytravel.cn/view/top10/index4091.html">台东区十大旅游景点</a></p><p><a href="https://www.gltjp.com/zh-hans/article/item/20114/">观光&amp;体验&amp;购物&amp;美食！东京都江东区观光指南！</a></p><p><a href="http://digjapan.travel/zh_cn/digest/katsushika.html">东 京 葛 饰</a></p><h2 id="东京地图和区域介绍"><a href="#东京地图和区域介绍" class="headerlink" title="东京地图和区域介绍"></a>东京地图和区域介绍</h2><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-area-03.jpeg" alt="东京23区治安地图"></p><p><a href="https://tokyo.letsgojp.com/archives/459880/">参考: 東京23區「治安最差」是哪區？喜歡一人旅行的要注意！</a></p><h3 id="23区"><a href="#23区" class="headerlink" title="23区"></a>23区</h3><h4 id="基本划分"><a href="#基本划分" class="headerlink" title="基本划分"></a>基本划分</h4><p>城南地区<br>世田谷区、目黑区、品川区、大田区</p><p>城西地区<br>杉並区、中野区</p><p>都心六区<br>新宿区、千代田区、涩谷区、港区、中央区、文京区</p><p>城北地区<br>练马区、板桥区、北区、豊岛区</p><p>城东地区<br>足立区、荒川区、台东区、墨田区、江东区、葛饰区、江户川区</p><p><a href="https://zhuanlan.zhihu.com/p/355390878">日本东京城南地区、城西地区（解析）</a></p><p><a href="https://zhuanlan.zhihu.com/p/357462159">日本东京城北地区、城东地区（解析）</a></p><h4 id="表格整理"><a href="#表格整理" class="headerlink" title="表格整理"></a>表格整理</h4><p><a href="https://www.zhihu.com/question/24494333">东京各区的特点是怎样的？</a></p><table><thead><tr><th>方向</th><th>区域</th><th>特点</th><th>主要景点</th></tr></thead><tbody><tr><td>中心<div style="width: 30pt"></td><td>新宿区</td><td>交通枢纽，商业街，不眠</td><td>歌舞伎町，新宿车站</td></tr><tr><td>中心</td><td>千代田区</td><td>大部分行政机关所在地，大型企业</td><td>东京展、秋叶原、日本武道馆</td></tr><tr><td>中心</td><td>涩谷区</td><td>商业百货</td><td>井ノ頭通り（十字路口）</td></tr><tr><td>中心</td><td>港区</td><td>最有逼格，电视台总部</td><td>六本木，东京塔，芝公园</td></tr><tr><td>中心</td><td>中央区</td><td>位于东京中心，经济中心</td><td>日本桥、银座</td></tr><tr><td>中心</td><td>文京区</td><td>文化和住宅</td><td>东京大学，东京巨蛋</td></tr><tr><td>城南</td><td>世田谷区</td><td>人口最多，密集住宅</td><td>豪德寺，下北泽</td></tr><tr><td>城南</td><td>目黑区</td><td>住宅，樱花</td><td>东京摄影美术馆，品川水族馆</td></tr><tr><td>城南</td><td>品川区</td><td>港口</td><td>品川花海道</td></tr><tr><td>城南</td><td>大田区</td><td>机场，高档住宅</td><td>城南岛海滨公园</td></tr><tr><td>城东</td><td>足立区</td><td>人气不高，治安不好</td><td>タカラ湯 Takarayu</td></tr><tr><td>城东</td><td>荒川区</td><td>穷，路面电车</td><td>Nippori Fabric Town</td></tr><tr><td>城东</td><td>台东区</td><td>以前也穷，日本人不想住</td><td>浅草寺，上野公园，上野阿美横町</td></tr><tr><td>城东</td><td>墨田区</td><td>相扑文化</td><td>江户东京博物馆，东京晴空塔</td></tr><tr><td>城东</td><td>江东区</td><td>东南面，填海，年轻人喜欢</td><td>丰洲市场，森大厦数位艺术美术馆：teamLab无界，日本科学未来馆</td></tr><tr><td>城东</td><td>葛饰区</td><td>老东京，安静，漫画家</td><td>葛饰纳凉花火大会，水元公园</td></tr><tr><td>城东</td><td>江户川区</td><td>外国人多</td><td>葛西临海水族园、东京葛西临海公园、钻石与花之大摩天轮</td></tr><tr><td>城西</td><td>杉並区</td><td>高级住宅，文化底蕴</td><td>大田黑公園、大宮八幡宮</td></tr><tr><td>城西</td><td>中野区</td><td>交通非常方便，人口密度高，低层住宅</td><td>中野百老匯、薬師あいロード商店街、昭和新道</td></tr></tbody></table><h4 id="千代田区"><a href="#千代田区" class="headerlink" title="千代田区"></a>千代田区</h4><p><a href="https://zh.wikipedia.org/wiki/%E5%8D%83%E4%BB%A3%E7%94%B0%E5%8D%80">千代田区</a>（日语：千代田区／ちよだく Chiyoda ku */?）是日本东京都的特别区之一，位于东京都区部的中心位置，在1947年（昭和22年）3月15日由麹町区与神田区合并而来，名称来自于江户城的别名“千代田城”。日本国会、首相官邸、最高法院、大部分中央行政机关，以及天皇住所皆座落于此，而区内的<strong>大手町、丸之内、有乐町</strong>等商圈，是许多日本大型企业总部的聚集地，因而使该区成为日本首屈一指的政治与经济中枢。<strong>东京站、秋叶原</strong>、靖国神社、神保町古书街、<strong>日本武道馆</strong>等著名景点亦位于该区内，该区住有许多政治家及公务员</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-chiyoda-01.png" alt="千代田区"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-chiyoda-02.webp" alt="千代田区"></p><h4 id="中央区"><a href="#中央区" class="headerlink" title="中央区"></a>中央区</h4><p><a href="https://zh.wikipedia.org/zh-sg/%E4%B8%AD%E5%A4%AE%E5%8D%80_(%E6%9D%B1%E4%BA%AC%E9%83%BD)">中央区</a>（日语：中央区／ちゅうおうく Chūō ku */?）是日本东京都内的23个特别区之一，由于其位于23区的正中央位置之故，因而得名。</p><p>中央区不仅地理位置处于东京的中心地，更是日本经济、信息、商业等的中心。著名的日本银行、东京证券交易所等日本经济核心都位于中央区。除此之外，包括银座、大型布庄与百货公司总社聚集的<strong>日本桥</strong>、以及以鱼货市场闻名的筑地皆位于本区范围之内。</p><p>大约位于东京23区的中央。区内有日本桥、八重洲・筑地、月岛、银座等街区。</p><p>面积为10.094km²，是东京23区中第二小的特别区，仅次于台东区。</p><p>人口130,483人，次于千代田区（2013年6月1日）。（2013年4月定居人口达13万人，是1967年以来的新高）区内有日本桥与银座等大型商业区域，让日间人口达60.6万人。此外，本区商业强烈，高楼林立，住宅方面以高层公寓与团地等集合住宅为主，独户低层住宅或低层分租公寓较为少见（多在南部的佃和月岛附近）。</p><p>道路呈现棋盘状，与他区相比较为整齐。</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-chuo-01.png" alt="中央区"></p><h4 id="港区"><a href="#港区" class="headerlink" title="港区"></a>港区</h4><p><a href="https://zhuanlan.zhihu.com/p/508954033">港区</a>（日语：港区 みなとく Minato ku */?）是日本东京都23个特别区之一，位于东京都心东南方、紧邻东京湾，以聚集诸多外国大使馆、<strong>国际气氛浓厚</strong>著称。区内较著名的商圈，包括聚集众多企业的赤坂、新桥、滨松町等商务街，外国观光客与酒吧云集的<strong>六本木</strong>，高级住宅区的麻布和白金台，高级商店街的青山，新兴观光区台场、以及进入2002年以来逐步开发完成的三个大型复合开发区——六本木新城、东京中城、以及汐留SIO-SITE。东京地标之一的东京铁塔亦位于区内</p><p>港区设立于1947年，由旧芝区、旧麻布区、旧赤坂区三区合并诞生。港区位于东京23区中央偏南，是拥有最多企业总部的区域，可说是日本企业的中心。其中、虎之门、新桥、芝为重要的办公商区，经济活动十分活跃。青山、赤坂等商业地区，六本木等娱乐重镇，麻布、白金台等住宅区，汐留、台场等大规模开发区，为港区展现各种不同风貌。东宫御所、迎宾馆（赤坂离宫）与芝公园、白金台的国立科学博物馆附属自然教育园等绿色地带带来丰富的自然环境。驻日大使馆与外资企业的大量进驻，让本地的外国人居住者比例达一成之多</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-minato-01.png" alt="港区"></p><h4 id="新宿"><a href="#新宿" class="headerlink" title="新宿"></a>新宿</h4><p><a href="https://zh.wikipedia.org/zh-sg/%E6%96%B0%E5%AE%BF%E5%8D%80">新宿区</a>（日语：新宿区／しんじゅくく Shinjuku ku */?）是日本东京都的特别区之一，为东京都厅（都政府）所在地。区内的新宿站为东京主要的交通枢纽之一，而以新宿站为中心的商圈（包括新宿副都心），为东京乃至于整个日本首要的中心商业区</p><p>新宿区位在东京市区内中央偏西的地带，区内的新宿车站是东京市区西侧最重要的交通要冲之一，包括JR山手线、JR中央本线、JR总武线与私铁公司京王电铁、小田急电铁的总部都位在新宿车站，周围还有数条地铁线行经。日本各地往来东京的长途巴士也大多停靠新宿，或以新宿为起站、终站。</p><p>以新宿车站为中心，以西（新宿西口）的西新宿是东京都政府在战后规划的中心商业区，又称为“新宿新都心”，东京都的行政中心东京都厅舍就位在此处，除此之外周遭还包围了许多大型企业总部所使用的摩天大楼，此超高层建筑群是东京最早形成的类似区域。新宿车站南口方向则是百货公司与商店街云集的商业地区，其中最著名的包括连锁百货公司高岛屋的旗舰店“高岛屋时代广场”（Takashimaya Times Square）与知名日本连锁书店纪伊国屋的总店。</p><p>相对于西新宿的现代化与整齐，新宿车站以东的东新宿地区（新宿东口），则是最热闹也是最混乱的传统商业街地区，其中，闻名海外的红灯区——<strong>歌舞伎町</strong>，便位于新宿东口范围内。</p><p>在非常受欢迎的日本漫画《城市猎人》中，就是以新宿车站东口公园作为最主要的舞台。</p><p>2016年大卖的动画电影《你的名字。》中，新海诚导演从新宿区多处景点取景，如：新宿警察署地景、<strong>新宿车站</strong>、千駄谷站、信浓町陆桥、四谷须贺町等</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-shinjuku-01.png" alt="新宿"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-shinjuku-02.png" alt="新宿"></p><h4 id="文京区"><a href="#文京区" class="headerlink" title="文京区"></a>文京区</h4><p><a href="https://zhuanlan.zhihu.com/p/510447669">文京区</a>（日语：文京区／ぶんきょうく Bunkyō ku */?）是日本东京都的23个特别区之一，划分上属于23区西部，实际位于中央偏北的位置，现任区长是成泽广修[2]。文京区的面积11.31平方千米，在23区中位列倒数第4，占东京都区部的50分之一[3]。</p><p>该区以文化教育机关和住宅街区为主，有“文之京”的美名。从明治时期以来，这里居住过夏目漱石、森鸥外、宫泽贤治等著名的文人、学者和政治家。除此以外出版、印刷业也很繁盛，并设有先进医疗设施和大型医院。区内著名的设施包括日本最高学府东京大学本部（本乡校区）、<strong>东京巨蛋</strong>和讲道馆等，六义园、后乐园和小石川植物园等古老而宽广的日本庭园也坐落于文京区内</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-bunkyo-01.png" alt="文京区"></p><h4 id="品川区"><a href="#品川区" class="headerlink" title="品川区"></a>品川区</h4><p><a href="https://zhuanlan.zhihu.com/p/506260123">品川区</a>（日语：品川区 しながわく Shinagawa ku */?）是日本东京都的特别区之一，位于东京都的南部，东濒东京湾，为东京市区聚集较多<strong>港口及工业设施</strong>的地带。名称是由境内河川目黑川的别名“品川”而来</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-shinagawa-01.jpeg" alt="品川"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-shinagawa-02.png" alt="品川"></p><h4 id="目黑区"><a href="#目黑区" class="headerlink" title="目黑区"></a>目黑区</h4><p><a href="https://zhuanlan.zhihu.com/p/513564096">目黑区</a>（日语：目黒区／めぐろく Meguro ku */?）是日本东京都下辖的特别区之一<br>东京23区西南部，主要为住宅区</p><p>目黑区位于东京的中央六区的西侧、涩谷区的南侧，是东京主要的住宅行政区之一。目黑区内有许多以低调高级住宅区而闻名的社区，例如柿之木坂、碑文谷、青叶台和驹场，以及自由之丘和中目黑等住商混合的区域。目黑区以其宁静悠闲的居住环境、富饶绿地、池塘和河川以及靠近涩谷、代官山、惠比寿和六本木的便利交通位置，成为居住在东京的欧美人士的人气居住选择</p><p>目黑区最广为人知的是目黑川沿岸种植的<strong>樱花树道</strong>，在一年一度的樱花季，河川两旁的人行道上挤满了前来赏樱花盛开的游客。目黑川沿岸也是受欢迎的高档住宅区，这里可以找到许多适合外国人居住的买/租房选择。 例如，距离目黑车站仅7分钟路程、位于目黑川畔、25层高的高层塔楼公寓MFPR目黑塔（MFPR目黒タワー）。目黑川畔沿岸还有许多中低层的公寓楼，很适合外国人的生活</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-meguro-01.png" alt="目黑"></p><h4 id="大田区"><a href="#大田区" class="headerlink" title="大田区"></a>大田区</h4><p><a href="https://zh.wikipedia.org/wiki/%E5%A4%A7%E7%94%B0%E5%8C%BA">大田区</a>（日语：大田区／おおたく Ōta ku */?）是日本东京都的特别区之一，位于东京都<strong>东南、正对东京湾</strong>。自古以来是捕鱼业发达的地区、大正时代以后形成小作坊的聚集地、至今形成了京滨工业地带。区内的东京国际机场（羽田机场）是东京的空中门户。</p><p>日本著名的高级住宅区田园调布的部分地区位于该区西部。</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-oota-02.png" alt="大田"></p><h4 id="世田谷区"><a href="#世田谷区" class="headerlink" title="世田谷区"></a>世田谷区</h4><p><a href="https://zhuanlan.zhihu.com/p/514865103">世田谷区</a>（日语：世田谷区／せたがやく Setagaya ku */?），是日本东京都区部之一，位于东京23区的<strong>西南</strong>部，以其居住环境良好的住宅区而闻名。世田谷区为东京都特别区中面积第2大，也是全日本人口最多的特别区；人口密度亦排在第14位。</p><p>世田谷区是东京23区中人口最多、面积第二大的行政区。不仅日本人，对于外国人来说也是广为人知的高档<strong>住宅区</strong>所在地，距离新宿和涩谷的车程极短，非常方便通往东京市中心。世田谷区位于东京23区的西南部，其南侧的多摩川邻接神奈川县，在地理上和象征意义上是东京郊区与市中心的边界线。</p><p>世田谷区由北到南可以分为五个地域：乌山、北泽、砧、世田谷和玉川。世田谷区域相当辽阔，从充满文青艺术气息的下北泽个性商店街（北泽地域）、寺庙群聚有如小京都的千岁乌山（乌山地域）、东京人理想居住街区的三轩茶屋（世田谷地域）、东京知名高级住宅区的成城（砧地域）、到乐天总部所在地、商业购物大楼、家庭社区和自然公园一应具全的二子玉川（玉川地域）。</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-setagaya-01.jpeg" alt="世田谷区"></p><h4 id="涩谷区"><a href="#涩谷区" class="headerlink" title="涩谷区"></a>涩谷区</h4><p><a href="https://zh.wikipedia.org/zh-sg/%E6%BE%80%E8%B0%B7%E5%8D%80">涩谷区</a>（日语：渋谷区／しぶやく Shibuya ku */?）[1]是日本东京都的特别区之一，其名称源自于位于该区<strong>中央</strong>、以涩谷站为中心的涩谷地区。</p><p>与新宿、池袋等因为位处于交通要冲上而发展出的商业街相同，涩谷也是因为位居山手线重要转运站的地位而发展成今日的盛况。其为东急集团的大本营，且各种商业活动兴旺，这尤其表现在涩谷站忠犬八公出口处，著名的百货店、时装专卖店、饮食店、咖啡店、休闲设施、特种行业等密集如云，是与新宿同样并列为“24小时不眠之街”的地区。另外，以西武百货、东急百货、巴而可（パルコ）与109百货为中心，再加上周边许多服饰店所构成的商店街街区，是最受东京年轻消费族群喜爱的购物胜地，向来拥有“年轻人之街”之美称，也使得涩谷成为日本国内外各种流行风尚的发源地。而<strong>涩谷车站八公口外</strong>、具有行人保护时相配置、属井之头通（<strong>井ノ頭通り いのかしらどおり</strong>）一部分的大型五叉路口，由于超高的行人穿越量经常被誉称为“全世界最大的交叉路口”，其庞大的行人流通量成为许多观光客参访与摄影、拍照的圣地，也经常出现在电视或电影剧情中，成为东京的象征</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-shibuya-01.png" alt="涩谷区"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-shibuya-02.png" alt="涩谷区"></p><p><a href="https://bienetrevoyage.blogspot.com/2016/04/shibuya-map.html">图片来源</a></p><h4 id="中野区"><a href="#中野区" class="headerlink" title="中野区"></a>中野区</h4><p><a href="https://zh.wikipedia.org/zh-sg/%E4%B8%AD%E9%87%8E%E5%8D%80">中野区</a>（日语：中野区／なかのく Nakano ku */?）是日本人口密度最高的底层住宅区域，位处东京都<strong>西部</strong>。区内产业主要以<strong>第三产业的服务业</strong>为中心，而事业所及从业人员个数则处于东京23区的中下位。</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-nakano-01.png" alt="中野区"></p><h4 id="杉并区"><a href="#杉并区" class="headerlink" title="杉并区"></a>杉并区</h4><p><a href="https://zhuanlan.zhihu.com/p/514857580">杉并区</a>（すぎなみく）是东京23个特别区中最内陆的行政区之一，它被夹在同属属于城西地区的练马区和世田谷区之间。对于在东京市区上班或念书的人来说，此区是一个相当不错的住宅区选择。因为 JR中央线上的许多车站位于杉并区（例如荻洼、阿佐谷、高圆寺）。</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-suginami-01.png" alt="中野区"></p><h4 id="丰岛区"><a href="#丰岛区" class="headerlink" title="丰岛区"></a>丰岛区</h4><p>丰岛区（日语：豊島区／としまく Toshima ku */?）是日本东京都内23个特别区之一，位在旧东京市的区域内西北角一带。其命名由来源自日本政府进行“废藩置县”之前，武藏国丰岛郡的古名，当东京市在进行行政区域扩大时，四个原属北丰岛郡的町被合并划入东京市的范围之内，而赋予丰岛区的命名。</p><p>丰岛区是一个人口密度高，且集时尚与传统、年轻与老年于一体、富有个性的区域。境内最重要的市街为<strong>池袋</strong>车站为中心的商业区，除此之外，驹込、有“老年人的原宿”之称的巢鸭、大冢、高级住宅区的目白等地区都是丰岛区境内比较知名的市街，东京市区内最重要的铁路路线JR山手线在这几个地区都设有车站。</p><p>曾经是东京都内第一高楼的太阳城（サンシャインシティ）就位在区内的池袋地区。区役所位于JR山手线池袋站东口。</p><p>根据1965年的国势调查结果，本区为日本人口密度最高的自治体（前回调查的第一名为1东京都台东区）[1]（页面存档备份，存于互联网档案馆）。2005年的国势调查，仅次于东京都中野区为全日本第二位，2010年再次成为第一。</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-toshima-01.jpeg" alt="丰岛区"></p><h4 id="北区"><a href="#北区" class="headerlink" title="北区"></a>北区</h4><p><a href="https://zhuanlan.zhihu.com/p/514567481">北区</a>实际上就是东南西北的“北区”，因其地处东京最北端的地区之一，北侧隔着荒川与埼玉县的川口市和户田市相邻，东侧隔着隅田川与足立区相邻、东南侧和荒川区接壤、西侧和板桥区接壤、南侧则和丰岛区和文京区接壤。</p><p>与东京北部的大部分地区一样，北区的居民主要是劳工阶级家庭、单身上班族以及越来越多的外国居民（主要来自亚洲国家）。北区有四条河川纵横交错，拥有富饶的绿色空间，并且平民化的物价，使其成为非常适合家庭居住的行政区。</p><p>北区是东京23区中车站最多的行政区，主要车站前往崎玉县、东京市中心甚至神奈川县都相当方便。北区的主要住宅区包括：十条、赤羽和王子。北区的外国居民主要来自亚洲（依序是中国、韩国、越南、菲律宾、尼泊尔和台湾）。当东京国际法国学校（Lycée Français International de Tokyo）于2012年将校舍迁移至北区泷野川时，也为北区增添了点西洋国际色彩。但总体而言，北区给人蓝领阶级和下町风情的印象。</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-kita-01.png" alt="北区"></p><h4 id="板桥区"><a href="#板桥区" class="headerlink" title="板桥区"></a>板桥区</h4><p><a href="https://zhuanlan.zhihu.com/p/512959361">板桥区</a>（いたばし）是东京北部行政区之一，其北侧隔着荒川和埼玉县户田市相邻、西侧和埼玉县和光市接壤。板桥区的气氛宁静、朴素低调、适合家庭居住，许多自然公园和河川河堤蜿蜒穿过恬静住宅区。</p><p>板桥区的外国居民主要来自亚洲（依序是中国、韩国、越南、菲律宾、尼泊尔）板桥区是东京23区中，中国居民第3多的行政区。但东京国际法国学校（Lycée Français International de Tokyo）于当2012年将校舍迁移至北区泷野川时，由于板桥区的新板桥站实际上是离该校最近的车站，大多数乘电车上下课的法国学生都会在新板桥站或板桥站上下车，因此也为板桥区添增了西方色彩。</p><p>板桥区虽然不是东京市中心（除了住宅区就是以日用品制造业为主的中小工场）。但是，这种远离城市喧嚷的环境提供当地居民悠闲生活和亲近绿色空间的优势。板桥区主要车站都在搭电车至池袋、新宿和大手町等主要车站不到30分钟或约30分钟的通勤范围内</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-itabashi-01.png" alt="板桥区"></p><h4 id="练马区"><a href="#练马区" class="headerlink" title="练马区"></a>练马区</h4><p><a href="https://zhuanlan.zhihu.com/p/510946883">练马区</a>（日语：練馬区／ねりまく Nerima ku */?）是东京23区中人口第二多的行政区（仅次于世田谷区），突显了其作为住宅区的受欢迎程度。练马区北侧与埼玉县和光市接壤、东侧为板桥区、其西侧与西东京市接壤，南侧则与中野区、杉并区和武藏野市接壤。练马区和这些相邻接的地区都是东京西郊的主要居住社区。</p><p>练马区以拥有众多的漫画家而闻名，有“日本动漫发祥地”之称。著名的日本漫画《哆啦A梦》《忍者小灵精》以及《机器人少女Z》、《四月是你的谎言》的故事场景就在本区（光丘）。这里是《东京食尸鬼》故事的主要舞台，包括著名经典恐怖片《咒怨》的那座“鬼屋”也在此行凶作恶。闻名的游乐地丰岛园亦在本区。练马区是加速世界(AW)中日珥（Prominence) 的领土</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-rerimaku-01.png" alt="练马区"></p><h4 id="城东地区"><a href="#城东地区" class="headerlink" title="城东地区"></a>城东地区</h4><h4 id="台东区"><a href="#台东区" class="headerlink" title="台东区"></a>台东区</h4><p><a href="https://zhuanlan.zhihu.com/p/511277935">台东区</a>（日语：台東区／たいとうく Taitō ku */?）是东京23区中面积最小的行政区，却是最古老最著名的江户下町街区所在地。广受外国游客欢迎的<strong>浅草</strong>位于台东，在那里可以找到东京历史最悠久的寺庙“<strong>浅草寺</strong>”。探索浅草周边地区是了解东京历史的绝佳方式，因为这里是东京最古老的市街区许多神社每年都会举行各种传统节日祭典，例如每年5月于浅草神社举行的三社祭。</p><p>台东区也是<strong>上野阿美横丁、上野恩赐公园</strong>（含博物馆、美术馆）和<strong>上野动物园</strong>的所在地，非常受当地居民和国内外游客欢迎。台东区以商业市街主，也有一部分住宅区。商业市街和观光区以外的街区大都安静并保有昭和初期东京市街风貌。住宅以公寓和大厦居多，但也有部分独栋住宅。由于台东区<strong>近邻文京区和千代田区的学术和商业区</strong>，因此对于在东京市中心工作/念书又喜爱传统下町的人来说，住在台东区是个不错的选择</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-taitou-01.jpeg" alt="台东区"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-taitou-02.png" alt="台东区"></p><h4 id="墨田区"><a href="#墨田区" class="headerlink" title="墨田区"></a>墨田区</h4><p><a href="https://zhuanlan.zhihu.com/p/511823310">墨田区</a>（日语：墨田区／すみだく Sumida ku */?）是夹于荒川和隅田川之间的行政区，区内有许多知名地标，例如两国国技馆、江户东京博物馆和<strong>东京晴空塔</strong>。晴空塔是到访东京的外国游客的人气观光景点，由押上(晴空塔)搭乘电车可直达羽田机场或成田机场，因此晴空塔附近有许多住宿比市中心便宜的短期出租公寓。江户东京博物馆和大相扑比赛会场的两国国技馆位在两国，到访这些设施可以了解昔日东京的悠久历史。</p><p>墨田区除了作为观光区受欢迎之外，墨田区的住宅区相当适合居住，由于部分车站通勤至主要商业区相当快速，是个可以享受观光休闲和交通之便的宜居之地</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-sumida-02.png" alt="墨田区"></p><h4 id="江东区"><a href="#江东区" class="headerlink" title="江东区"></a>江东区</h4><p><a href="https://zhuanlan.zhihu.com/p/504335320">江东区</a> （日语：江東区／こうとうく Kōtō ku */?） 位于中央区以东、墨田区以南，隅田川和荒川分别构成了江东区的西边和东边的天然边界。由于区内运河与桥梁众多，亦被称作为“水彩都市”。以海产闻名的<strong>筑地市场</strong>（场内市场）也在2018年10月搬迁至此区，成为丰洲市场。该区有七成面积都是通过填海产生。历史上，江东区的内陆地区是庶民社区，随着日本现代化，江东区出现许多中小型下町工厂，龟户与锦糸町（墨田区）周边形成了繁华的副都心商业区。近年，随着都市开发，东京湾岸的填海地兴建了许多高层办公大楼、公园绿地与超高层公寓大楼，吸引了许多白领阶级家庭在此置产居住。</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-koutou-01.png" alt="江东区"></p><h4 id="荒川区"><a href="#荒川区" class="headerlink" title="荒川区"></a>荒川区</h4><p><a href="https://zhuanlan.zhihu.com/p/502047369">荒川区</a>（日语：荒川区／あらかわく Arakawa ku */?）位于东京的东北部，北面是足立区，南面是台东区和文京区。荒川区的区名来自”荒川”，但荒川区北面边境实为”隅田川”。荒川是老市区和新兴住宅区的混合体，可以找到<strong>日暮里纤维街</strong>和南千住的高层塔楼公寓。荒川区最南端的<strong>日暮里</strong>是区内最大的交通枢纽，搭乘京成Skyliner（Keisei Skyliner）前往成田机场仅约36分钟车程。</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-arakawa-01.png" alt="荒川区"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-arakawa-02.png" alt="荒川区"></p><h4 id="足立区"><a href="#足立区" class="headerlink" title="足立区"></a>足立区</h4><p><a href="https://zhuanlan.zhihu.com/p/512370279">足立区</a> （日语：足立区／あだちく Adachi ku */?）是以住宅为主的行政区，是东京23区中平均租金最便宜的区之一。虽然足立区被认为是庶民居住的下町，但足立区最具代表性的北千住是一个相当发达且繁忙的转运站、商业区、大学城和住宅区。车站有两家百货公司和充满活力的商店街。</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-adachi-01.png" alt="足立区"></p><h4 id="葛饰区"><a href="#葛饰区" class="headerlink" title="葛饰区"></a>葛饰区</h4><p>位于东京23区东北角的葛饰区给人的印象与新宿都心摩天高楼相去甚远。<a href="https://zhuanlan.zhihu.com/p/505021340">葛饰区</a> （日语：葛飾区／かつしかく Katsushika ku */?）与周围的台东区、足立区、墨田区和江户川区都被视为下町（下町地区在历史上被认为是庶民居住的工商社区、老街、老社区）。但与经过规划、观光业盛行的台东区和墨田区相比，葛饰区的下町给人一种更传统、安静、更慢活的老东京生活方式。</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-katushika-01.png" alt="葛饰区"></p><h4 id="江户川区"><a href="#江户川区" class="headerlink" title="江户川区"></a>江户川区</h4><p><a href="https://zhuanlan.zhihu.com/p/517606696">江户川区</a>（日语：江戸川区／えどがわく Edogawa ku */?）位于东京23区的最东侧，为荒川和江户川之间的狭长地带。江户川区区名来自东侧的江户川，区的西侧为荒川、南侧面向东京湾、北侧与葛饰区接壤。江户川区的中心地区由中川南北向贯穿，南部地区的葛西临海公园一带则主要为海埔新生地。</p><p>由于江户川区东西南侧面向河川和海洋，区内有非常多公园和绿地，例如河堤公园和葛西临海公园，这些绿地提供了当地居民非常多的户外活动选项，希望远离城市喧嚣的家庭非常适合在此悠闲生活。</p><p>除了公园绿地，房租低廉、适合养育子女以及前往东京市中心的便利通勤等条件也使江户川区发展成以家庭居住为主的行政区。该区大多数社区拥有安静住宅氛围，吸引许多追求较低住房成本的日本、中国、印度家庭搬到这里。</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-edogawa-01.png" alt="江户川区"></p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="2023之后的新景点"><a href="#2023之后的新景点" class="headerlink" title="2023之后的新景点"></a>2023之后的新景点</h3><p><a href="https://www.bring-you.info/zh-hans/harry-potter-studio-tour-tokyo">板桥区-阿利波特地方</a></p>]]></content>
    
    
    <summary type="html">日本旅游攻略系列</summary>
    
    
    
    <category term="旅游" scheme="http://smiecj.github.io/categories/%E6%97%85%E6%B8%B8/"/>
    
    <category term="日本" scheme="http://smiecj.github.io/categories/%E6%97%85%E6%B8%B8/%E6%97%A5%E6%9C%AC/"/>
    
    
    <category term="旅游" scheme="http://smiecj.github.io/tags/%E6%97%85%E6%B8%B8/"/>
    
    <category term="日本" scheme="http://smiecj.github.io/tags/%E6%97%A5%E6%9C%AC/"/>
    
    <category term="攻略" scheme="http://smiecj.github.io/tags/%E6%94%BB%E7%95%A5/"/>
    
  </entry>
  
  <entry>
    <title>献给朝阳下的你</title>
    <link href="http://smiecj.github.io/2023/06/14/tomoo-yoake/"/>
    <id>http://smiecj.github.io/2023/06/14/tomoo-yoake/</id>
    <published>2023-06-13T16:00:00.000Z</published>
    <updated>2023-10-28T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/g64NCHwgzFON62VFrU9I1w">本文公众号</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">夜明けの君へ</span><br><span class="line">作词 &amp; 作曲：TOMOO</span><br><span class="line">编曲：アイコトバ</span><br><span class="line"></span><br><span class="line">あの丸い月によく似た瞳が笑う</span><br><span class="line">「めんどくさい」ってからかう声を追いかけた</span><br><span class="line">おどけたポーズも　震えるため息も</span><br><span class="line">見逃せない流星と同じ</span><br><span class="line"></span><br><span class="line">那双好似满月般微笑的眼睛</span><br><span class="line">伴随着“真麻烦啊”这样的笑侃</span><br><span class="line">不熟练的摆姿势也好，颤抖着的叹息声也好</span><br><span class="line">漫天闪耀的流星们也是如此吧</span><br><span class="line"></span><br><span class="line">かっこいいって思わずにはいられなくてさ</span><br><span class="line">呆気にとられて　色づいてく日々</span><br><span class="line">頭の中では　鳴り続けるシャッター</span><br><span class="line">でも少しも伝えきれてない</span><br><span class="line"></span><br><span class="line">抑制不住的觉得你很帅气的想法</span><br><span class="line">不觉中惊讶发现 每一天都过得五彩缤纷</span><br><span class="line">脑海中闪过的快门声也从不停止鸣响</span><br><span class="line">然而这份心情，还从未能让你感受到</span><br><span class="line"></span><br><span class="line">ああ</span><br><span class="line">今　君の光を受け取ったなら</span><br><span class="line">その時からもう　消えない光</span><br><span class="line">不安も　迷いも　追い越してきた</span><br><span class="line">眠れぬ夜に　届いた光</span><br><span class="line"></span><br><span class="line">啊啊</span><br><span class="line">如果现在的我 可以沐浴在你的光亮下</span><br><span class="line">从这时起 这束光就再不会消失</span><br><span class="line">翻越了不安和迷茫</span><br><span class="line">我的无眠之夜，也将洒下光芒</span><br><span class="line"></span><br><span class="line">怖かったのは僕だけじゃなかった</span><br><span class="line">一番聞いてほしい一言ほど</span><br><span class="line">だれにも言えずに　しまいこんだまま</span><br><span class="line">開け方すら忘れかけて</span><br><span class="line"></span><br><span class="line">对未来害怕的 或许不止我一个</span><br><span class="line">仅仅是这样一句大家最想听到的话</span><br><span class="line">我却没有对任何人说，只是藏在心里</span><br><span class="line">就连如何开口，都快要忘记</span><br><span class="line"></span><br><span class="line">一体いつからどこに隠れてたんだろう</span><br><span class="line">きっと迷子になってただけの涙</span><br><span class="line">君の前で僕は　こんな顔してるんだな</span><br><span class="line">止まってた時間が走り出す</span><br><span class="line"></span><br><span class="line">到底是何时开始把自己深藏在某处</span><br><span class="line">一定是因为迷茫而只顾顿足落泪吧</span><br><span class="line">在你面前的我，原来也是这样的神情</span><br><span class="line">凝固的时间，再一次向前出发了</span><br><span class="line"></span><br><span class="line">ああ　君が見つけてくれた時から</span><br><span class="line">僕はもう一度　僕になれたよ</span><br><span class="line">ひとりきりでは気付けないまま</span><br><span class="line">こんな景色も　愛されてたこと</span><br><span class="line"></span><br><span class="line">啊啊，从你发现我的那一刻开始</span><br><span class="line">我再一次找回了我自己</span><br><span class="line">一个人的时候或许永远不会发现</span><br><span class="line">还有这样的风景，一直爱抚着我</span><br><span class="line"></span><br><span class="line">僕らの日々は</span><br><span class="line">暗闇がなくちゃ　星が見えなくて</span><br><span class="line">完璧じゃないから　君に出会えた</span><br><span class="line">完璧じゃないから、</span><br><span class="line"></span><br><span class="line">我们所经历的每一天</span><br><span class="line">如果没有黑暗，也不会看到漫天星光</span><br><span class="line">正是不完美的我，才能遇见你</span><br><span class="line">不完美的我…</span><br><span class="line"></span><br><span class="line">今　ほんとの声を聴き合えたなら</span><br><span class="line">やっと僕らは　夜明けの星座</span><br><span class="line">ただ君がいて　ただ僕がいて</span><br><span class="line">ここにしかない　意味になってく</span><br><span class="line">如果现在 我们可以倾听彼此真正的声音</span><br><span class="line">我们终将拥有那黎明之际的星座</span><br><span class="line">只要你我相伴在这里</span><br><span class="line">终会创造独属我们的意义</span><br><span class="line">君と朝日を迎えにいくよ</span><br><span class="line">愿同你一起，去迎接新一缕朝阳</span><br></pre></td></tr></table></figure><h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><p>MV 的胶片感十足</p>]]></content>
    
    
    <summary type="html">TOMOO 充满积极氛围的歌</summary>
    
    
    
    <category term="音乐" scheme="http://smiecj.github.io/categories/%E9%9F%B3%E4%B9%90/"/>
    
    <category term="TOMOO" scheme="http://smiecj.github.io/categories/%E9%9F%B3%E4%B9%90/TOMOO/"/>
    
    
    <category term="音乐" scheme="http://smiecj.github.io/tags/%E9%9F%B3%E4%B9%90/"/>
    
    <category term="日语" scheme="http://smiecj.github.io/tags/%E6%97%A5%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>ES数据同步到hive</title>
    <link href="http://smiecj.github.io/2023/06/10/emr-es-to-hive/"/>
    <id>http://smiecj.github.io/2023/06/10/emr-es-to-hive/</id>
    <published>2023-06-09T16:00:00.000Z</published>
    <updated>2023-06-10T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>来自用户的需求: 用户有一部分数据来自 elasticsearch ，我们已经支持了通过 presto 查询 es 数据。但是用户需要将 es 表 和 hive 表做关联查询，而 presto 是不能跨数据源进行 join 查询的。所以需要先把 es 数据导入到 hive 中</p><p>用户对数据同步周期的要求并不高 一天1-2次就可以了，所以继续使用我们emr集群中已有的 azkaban 服务进行调度，把 es 数据同步到 hive 的过程写到 azkaban 中，实现了7张表的定期同步</p><h2 id="hive-创建-es-外表"><a href="#hive-创建-es-外表" class="headerlink" title="hive 创建 es 外表"></a>hive 创建 es 外表</h2><p><a href="https://blog.csdn.net/baichoufei90/article/details/104246011">参考教程-Elasticsearch-Hive</a></p><h3 id="hive-引入-elasticsearch-hadoop-依赖包"><a href="#hive-引入-elasticsearch-hadoop-依赖包" class="headerlink" title="hive 引入 elasticsearch-hadoop 依赖包"></a>hive 引入 elasticsearch-hadoop 依赖包</h3><p>hive 默认不支持创建 es 外表，需要引入 <a href="https://mvnrepository.com/artifact/org.elasticsearch/elasticsearch-hadoop">elasticsearch-hadoop</a> 依赖包</p><p>修改 hive.aux.jars.path 配置, 多个可以用逗号分隔，如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive.aux.jars.path=file:///usr/hdp/2.6.3.0-235/hive/auxlib/elasticsearch-hadoop-hive-8.8.0.jar</span><br></pre></td></tr></table></figure><h3 id="创建-hive-外表"><a href="#创建-hive-外表" class="headerlink" title="创建 hive 外表"></a>创建 hive 外表</h3><p>sql 示例:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">EXTERNAL</span> <span class="keyword">TABLE</span> temp.es_external_table ( fieldNameA STRING, fieldNameB STRING ) STORED <span class="keyword">BY</span> <span class="string">&#x27;org.elasticsearch.hadoop.hive.EsStorageHandler&#x27;</span></span><br><span class="line">TBLPROPERTIES(</span><br><span class="line">    <span class="string">&#x27;es.resource&#x27;</span><span class="operator">=</span><span class="string">&#x27;es索引名&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;es.nodes&#x27;</span><span class="operator">=</span><span class="string">&#x27;es_host&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;es.port&#x27;</span><span class="operator">=</span><span class="string">&#x27;es_port&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;es.mapping.names&#x27;</span><span class="operator">=</span><span class="string">&#x27;fieldNameA:fieldNameA,fieldNameB:fieldNameB&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>这里踩了一个坑: 由于 hive 创建表会忽略大小写，不管 sql 中定义的字段是什么样子，都会统一转成小写。所以导致es 中的驼峰名称字段 会映射失败，最后查出的数据都是 null</p><p><a href="https://blog.csdn.net/qq_40999403/article/details/103929305">类似的坑</a>-创建mongodb 外表时遇到的</p><p>因此需要显式地通过 <strong>es.mapping.names</strong> 配置指定字段名称的关联关系，像示例那样</p><h2 id="同步脚本"><a href="#同步脚本" class="headerlink" title="同步脚本"></a>同步脚本</h2><p>从 es 表到 hive 表，大致步骤为: 创建 hive 外表，关联 es 数据 =&gt; 创建 hive 内表 =&gt; 同步外表数据到内表</p><p>过程写到脚本中如下: (create_hive_to_es_table.sh)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 获取指定索引的所有 es 表字段</span></span><br><span class="line">get_index_field_ret=`curl http://<span class="variable">$&#123;es_address&#125;</span>/<span class="variable">$&#123;index_name&#125;</span>?pretty=<span class="literal">true</span>`</span><br><span class="line">field_arr=`<span class="built_in">echo</span> <span class="variable">$&#123;get_index_field_ret&#125;</span> | jq -r <span class="string">&quot;.<span class="variable">$&#123;index_name&#125;</span>.mappings.properties | keys | join(\&quot; \&quot;)&quot;</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建 hive 外表</span></span><br><span class="line">temp_table_name=<span class="string">&quot;temp.es_<span class="variable">$&#123;index_name&#125;</span>&quot;</span></span><br><span class="line">temp_rename_table_name=<span class="string">&quot;<span class="variable">$&#123;hive_db&#125;</span>.es_<span class="variable">$&#123;index_name&#125;</span>_bak&quot;</span></span><br><span class="line">actual_table_name=<span class="string">&quot;<span class="variable">$&#123;hive_db&#125;</span>.es_<span class="variable">$&#123;index_name&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">create_external_table_sql=<span class="string">&quot;CREATE EXTERNAL TABLE <span class="variable">$&#123;temp_table_name&#125;</span> (&quot;</span></span><br><span class="line"><span class="keyword">for</span> current_field <span class="keyword">in</span> <span class="variable">$&#123;field_arr[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    create_external_table_sql=<span class="string">&quot;<span class="variable">$&#123;create_external_table_sql&#125;</span> <span class="variable">$&#123;current_field&#125;</span> STRING,&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">create_external_table_sql=`<span class="built_in">echo</span> <span class="variable">$&#123;create_external_table_sql&#125;</span> | sed <span class="string">&#x27;s/,$//g&#x27;</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment">### 组装 es.mapping.names</span></span><br><span class="line">create_external_table_sql=<span class="string">&quot;<span class="variable">$&#123;create_external_table_sql&#125;</span>) STORED BY &#x27;org.elasticsearch.hadoop.hive.EsStorageHandler&#x27; TBLPROPERTIES(&#x27;es.resource&#x27;=&#x27;<span class="variable">$&#123;index_name&#125;</span>&#x27;,&#x27;es.nodes&#x27;=&#x27;<span class="variable">$&#123;es_host&#125;</span>&#x27;,&#x27;es.port&#x27;=&#x27;<span class="variable">$&#123;es_port&#125;</span>&#x27;,&#x27;es.mapping.names&#x27;=&#x27;&quot;</span></span><br><span class="line"><span class="keyword">for</span> current_field <span class="keyword">in</span> <span class="variable">$&#123;field_arr[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    create_external_table_sql=<span class="string">&quot;<span class="variable">$&#123;create_external_table_sql&#125;</span><span class="variable">$&#123;current_field&#125;</span>:<span class="variable">$&#123;current_field&#125;</span>,&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">create_external_table_sql=`<span class="built_in">echo</span> <span class="variable">$&#123;create_external_table_sql&#125;</span> | sed <span class="string">&#x27;s/,$//g&#x27;</span>`</span><br><span class="line"></span><br><span class="line">create_external_table_sql=<span class="string">&quot;<span class="variable">$&#123;create_external_table_sql&#125;</span>&#x27;)&quot;</span></span><br><span class="line">drop_external_table_sql=<span class="string">&quot;drop table if exists <span class="variable">$&#123;temp_table_name&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;create external sql: <span class="variable">$&#123;create_external_table_sql&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">beeline -n <span class="variable">$&#123;hive_user&#125;</span> -u <span class="variable">$&#123;hive_server&#125;</span> -e <span class="string">&quot;<span class="variable">$&#123;drop_external_table_sql&#125;</span>&quot;</span></span><br><span class="line">beeline -n <span class="variable">$&#123;hive_user&#125;</span> -u <span class="variable">$&#123;hive_server&#125;</span> -e <span class="string">&quot;<span class="variable">$&#123;create_external_table_sql&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建 hive 临时内表</span></span><br><span class="line">create_temp_table_sql=<span class="string">&quot;CREATE TABLE <span class="variable">$&#123;temp_rename_table_name&#125;</span> AS SELECT * FROM <span class="variable">$&#123;temp_table_name&#125;</span>&quot;</span></span><br><span class="line">drop_temp_table_sql=<span class="string">&quot;drop table if exists <span class="variable">$&#123;temp_rename_table_name&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;create temp table sql: <span class="variable">$&#123;create_temp_table_sql&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">beeline -n <span class="variable">$&#123;hive_user&#125;</span> -u <span class="variable">$&#123;hive_server&#125;</span> -e <span class="string">&quot;<span class="variable">$&#123;drop_temp_table_sql&#125;</span>&quot;</span></span><br><span class="line">beeline -n <span class="variable">$&#123;hive_user&#125;</span> -u <span class="variable">$&#123;hive_server&#125;</span> -e <span class="string">&quot;<span class="variable">$&#123;create_temp_table_sql&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 重命名表（用于快速重建用户直接用的表）</span></span><br><span class="line"></span><br><span class="line">create_actual_table_sql=<span class="string">&quot;ALTER TABLE <span class="variable">$&#123;temp_rename_table_name&#125;</span> RENAME TO <span class="variable">$&#123;actual_table_name&#125;</span>&quot;</span></span><br><span class="line">drop_actual_table_sql=<span class="string">&quot;drop table if exists <span class="variable">$&#123;actual_table_name&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;create actual table sql: <span class="variable">$&#123;create_actual_table_sql&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">beeline -n <span class="variable">$&#123;hive_user&#125;</span> -u <span class="variable">$&#123;hive_server&#125;</span> -e <span class="string">&quot;<span class="variable">$&#123;drop_actual_table_sql&#125;</span>&quot;</span></span><br><span class="line">beeline -n <span class="variable">$&#123;hive_user&#125;</span> -u <span class="variable">$&#123;hive_server&#125;</span> -e <span class="string">&quot;<span class="variable">$&#123;create_actual_table_sql&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><h2 id="azkaban-任务"><a href="#azkaban-任务" class="headerlink" title="azkaban 任务"></a>azkaban 任务</h2><h3 id="定义任务流程"><a href="#定义任务流程" class="headerlink" title="定义任务流程"></a>定义任务流程</h3><p>需要重建7张表，因此定义成 父任务 -&gt; 7个子任务</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># es_to_hive_parent.job</span></span><br><span class="line"><span class="attr">type</span>=command</span><br><span class="line"></span><br><span class="line"><span class="attr">command</span>=echo <span class="string">&quot;es to hive success!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dependencies</span>=table1,table2,table3,table4,table5,table6,table7</span><br></pre></td></tr></table></figure><p>因为前面具体外表的创建流程 已经写在脚本中了，所以子任务这里直接调用 create_hive_to_es_table.sh 就行</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># table1.job</span></span><br><span class="line"><span class="attr">type</span>=flow</span><br><span class="line"></span><br><span class="line"><span class="attr">job.name</span>=table1</span><br><span class="line"><span class="attr">flow.name</span>=ES_TO_HIVE</span><br><span class="line"></span><br><span class="line"><span class="attr">index.name</span>=es索引名</span><br><span class="line"><span class="attr">hive_db</span>=目标 hive 库名</span><br><span class="line"></span><br><span class="line"><span class="comment"># ES_TO_HIVE.job</span></span><br><span class="line"><span class="attr">type</span>=command</span><br><span class="line"></span><br><span class="line"><span class="attr">command</span>=sh create_hive_to_es_table.sh <span class="variable">$&#123;es.address&#125;</span> <span class="variable">$&#123;index.name&#125;</span> <span class="variable">$&#123;hive.server&#125;</span> <span class="variable">$&#123;hive.user&#125;</span> <span class="variable">$&#123;hive.db&#125;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>基于目前的资料搜索 这种方案应该是 es数据同步到 hive 比较通用的。但是确实不适合大批量数据同步的场景，也不能直接同步增量数据</p><p>想同步增量数据的话 应该需要从数据源头入手了，比如 es 数据是来自 kafka 的，那么需要通过类似 canal 的服务来同步增量数据，架构和这里说到的远远不同</p>]]></content>
    
    
    <summary type="html">一次用户数据的处理过程</summary>
    
    
    
    <category term="大数据" scheme="http://smiecj.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="大数据" scheme="http://smiecj.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    <category term="azkaban" scheme="http://smiecj.github.io/tags/azkaban/"/>
    
    <category term="hive" scheme="http://smiecj.github.io/tags/hive/"/>
    
    <category term="emr" scheme="http://smiecj.github.io/tags/emr/"/>
    
  </entry>
  
</feed>
