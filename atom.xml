<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Smiecj的小窝</title>
  <icon>https://www.gravatar.com/avatar/8b59dee7e59ad63ca309edd9effc2618</icon>
  <subtitle>tech make life better</subtitle>
  <link href="http://smiecj.github.io/atom.xml" rel="self"/>
  
  <link href="http://smiecj.github.io/"/>
  <updated>2023-09-02T16:00:00.000Z</updated>
  <id>http://smiecj.github.io/</id>
  
  <author>
    <name>smiecj</name>
    <email>xxx@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>是时候改变了</title>
    <link href="http://smiecj.github.io/2023/09/02/life-basketball-worldcup/"/>
    <id>http://smiecj.github.io/2023/09/02/life-basketball-worldcup/</id>
    <published>2023-09-01T16:00:00.000Z</published>
    <updated>2023-09-02T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天中国男篮输给菲律宾，彻底失去了参加2024奥运会的资格。我觉得难以接受的不是我们没在亚洲排上第一，而是一直以来青黄不接的问题都被反复提起，却要到现在易建联退役，周琦受伤之后暴露出来才发觉<br>思前想后，我也看不到什么解决办法，那就来看看别人是怎么说的吧<br>注意: 论坛我只是原话搬运，很多观点也不是很切合国情，需要明辨是非地看</p><h2 id="1、关于今晚的比赛"><a href="#1、关于今晚的比赛" class="headerlink" title="1、关于今晚的比赛"></a>1、关于今晚的比赛</h2><p><a href="https://www.reddit.com/r/nba/comments/1683494/post_game_thread_philippines_14_def_china_14_9675/?utm_source=share&utm_medium=ios_app&utm_name=ioscss&utm_content=2&utm_term=1">[Post Game Thread] Philippines (1-4) def. China (1-4) 96-75 behind 34 points from Jordan ClarksonPost Game Thread</a></p><p>标题：比赛结果：克拉克森34分，中国75-96不敌菲律宾，以 1-4 成绩结束此次世界杯</p><div class="note black flat"><p>克拉克森就是安德森的亲爹（326赞）</p></div><div class="note black flat"><p>解说员说乔特·雷耶斯（菲律宾主帅）已经递交辞臣，是真的吗？如果是的话那这个消息和今晚赢球一样棒（67赞）</p><ul><li>他已经无数次说过辞职了，但是菲律宾还是选择他做主帅</li></ul></div><div class="note black flat"><p>克拉克森并不认同中国对南海的主张（301赞）（破防了属于是）</p></div><div class="note black flat"><p>当球转移更多的时候克拉克森打得更好，他不会陷入孤立无援的状态，当然这也还因为中国队并不像苏丹、安哥拉和意大利那样天赋这么好（55赞）</p></div><h2 id="2、关于中国篮球"><a href="#2、关于中国篮球" class="headerlink" title="2、关于中国篮球"></a>2、关于中国篮球</h2><p><a href="https://www.reddit.com/r/nba/comments/165mm2a/how_is_china_still_so_weak_in_international/?utm_source=share&utm_medium=ios_app&utm_name=ioscss&utm_content=2&utm_term=1">How is China still so weak in international basketball?</a></p><p>标题：为什么中国队在国际赛场上这么弱？<br>副标题：可能篮球在中国并不是最出名的，但是中国有10亿多人，他们还有一个有竞争力的联赛。然而一旦到了国际赛场，前面所提的好像都和他们的表现无关，这届世界杯他们已经0-3了</p><div class="note black flat"><p>其实他们的联赛其实并不是很有竞争力，有的球员在那里能打出非常好的数据，但是到欧洲有竞争力的联赛就只能是平均水平（有时比平均水平更低）<br>米洛斯拉夫-拉杜利察 在CBA 的平均数据是 24分/11篮板和5助攻（<a href="https://www.sohu.com/a/588895902_121082800">数据来源</a>），但是他在欧洲篮球联赛（Euroleague ，简称EL）和 美国篮球联赛（American Basketball Association，简称 ABA，比 NBA 低级别）的贝尔格莱德红星（ Red Star Belgrade）队因为表现不佳，都没能获得上场机会（DNP）。达拉斯-摩尔 能够以 51%命中率、41%三分命中率和83%罚球命中率（51/41/83）在 CBA 拿到 26+6+4的数据，但之后的一个赛季他在欧洲杯（Eurocup ，比 Euroleague  低一个级别）却只能拿到场均6分的数据<br>CBA 受到关注的很大原因是他们为前 NBA 球员提供非常丰厚的薪水，这让他们在没有压力的情况下打比赛，也导致了中国本土球员水平更差<br>（1.1k赞）</p></div><div class="note black flat"><p>引用姚明的话：<br>“中国有14多亿人，但只有1.3w 注册球员，日本有75w，美国有2300w”（2.7赞）<br>（译者注：不过关于这点要说回来，日美是把学校打篮球的也算进来了，因为他们有校园联赛，我们没统计这部分）</p></div><div class="note black flat"><p>篮球系统太孤立了，当全世界的球员球队都在一起比赛对抗的时候，拥有自己联赛其实代表不了什么。日本有不少球员在美国大学打球，甚至在NBA打球，他们在那里进行高水平的比赛，这提升了他们国家队水平。反观中国球员并没有这样的（译者注：校园篮球还是有的，只是都没打出来，今年NBA三个落选秀）（349赞）</p></div><div class="note black flat"><p>我所看到的是他们的培养系统非常糟糕（428赞）</p><ul><li>中国人在这里回复一下，这正是原因所在<br>在美国，如果你表现出了篮球天赋，球探会在你上学的时候，甚至是读小学的时候就注意到你，让你加入更好的球队，跟着更好的教练接受培养，直到你在NBA选秀被选中。整个系统都致力于培养学生成为职业运动员，并且不会放过任何一个有天赋的学生，不管TA来自哪里<br>在中国打篮球的青年男生不计其数，我也确定在他们中一定有天赋优秀的孩子。但是这里并没有将他们看中并培养到top水平运动员的体系。绝大多数小孩只是会被教导把学习放在首要位置上，篮球当作爱好就好。我们也有一些和职业道路紧密相关的体育学校，但只有很小一部分小孩能够选择这条路，而不是常规的进学路，而且这些体育学校往往会被家长当作是垃圾学校<br>所以说，尽管中国有很多小孩在打篮球，但有可能成为职业运动员的人才库却非常干涸，这导致了现在的中国篮球缺少拿得出手的成绩（65赞）</li></ul></div><div class="note black flat"><p>据我了解，他们的篮球文化非常不同。除了 CBA，他们大部分的比赛就只是来自不同城市的业余球队之间，甚至这些业余比赛相比CBA，在民间更火，所以他们并不会把成为职业运动员当作自己的理想。他们更希望有一个普通的工作，为自己城市的球队参与比赛（58赞）</p></div><div class="note black flat"><p>他们在团体运动上表现都很差，不只是篮球（752赞）</p><ul><li>你说的一点毛病没有，从1984 年以来中国拿到的546枚奥运奖牌中，只有13枚来自团队球类项目（<a href="https://en.wikipedia.org/wiki/China_at_the_Olympics">来源</a>）（566赞）</li></ul></div><div class="note black flat"><p>在中国很多体育项目都集中精力于奥运会上，因为这对政府来说最能体现它的强大。他们的奥运团队也主要集中精力在那些能用较少精力，较大概率获得金牌的项目上（参考 <a href="https://www.nytimes.com/2021/07/29/world/asia/china-olympics.html">The Chinese Sports Machine’s Single Goal: The Most Golds, at Any Cost</a>）。从这个角度看，投资篮球或者其他大部分团队体育项目都是非常糟糕的：构建一个具有竞争力的篮球队，需要投入到基础设施的建设太多了，而且你是在参与整个奥运会上最有含金量（是真的含金）的运动，但只能获得一枚奖牌（84赞）</p></div><div class="note black flat"><p>我曾经在美国一个很大的州的高校工作，这个学校专门为有钱的国际学生开设。这个学校在我入职的那一年拿到了州冠军。一半的国际生来自亚洲（其中90%来自中国），大约3/4 的亚洲男孩会在放学后进行投篮训练，他们是真的痴迷于篮球。大部分学生都会尝试校队选拔，只有一个能进入到新生校队，没人能进入二级校队或主力校队（新生校队 -&gt; 二级校队 -&gt; 主力校队：Freshman -&gt; JV -&gt; Varsity）</p><p>我经常和他们一起打球，大部分在基础投篮表现上都不差。大部分学生运球也还可以，少数人投篮也很好，但他们完全不擅长在 5V5 这种常规，需要团队组织的模式下打球。我的一位朋友是他们的教练，他会在选拔周的时候进行一些技能特训，比如3V3，这对这些学生来说非常困难。比如他们不清楚在无球状态下如何跑位，他们知道挡拆怎么做，但并不知道背后的原理，以及应该什么时候做挡拆，什么方向去做挡拆。更不懂如何卡板，对防守的投入也很少。他们模仿的是一个并不适合实战的篮球法则，更像是游戏里面的（他们喜欢玩 2K 和 lol）。尽管这50个学生只是他们庞大人口的很小一部分，但是来自其他国家的学生更懂如何取胜（140赞）</p><ul><li>我是美籍华人，并在06年的大学暑假，在上海做过交换生（是的我上年纪了）。我的两个接近6英尺4英寸（194左右）的白人同学都喜欢打篮球，所以我们去找了一个本地球场打球。所有本地人都大声想要 And one，像机器人一样地运球，并想在高大的老美面前炫技。其次是只要我们提升一点防守强度，他们总是不停地叫犯规，甚至为这还差点打起来，直到我这个老家伙盯着他们，让他们闭嘴。好像你只要不让他们做这些行为，让他们打得爽，他们就随时要拿着球回家。真是非常非常奇怪的经历了（译者：这段比较扯淡，野球场也不能代表国家队的表现）</li></ul></div><div class="note black flat"><p>最大的原因还是他们的基层培养体系不完善。在中国，篮球系统集中依赖于体育学院运作，并且通常以身高作为新秀选拔标准。引用姚明的话，中国只有13w篮球注册人口，不及美国的 1/100 甚至还没有日本多，这真的讲到痛点上了。</p><p>他们没有像美国在初中、高中、业余体育联合会（AAU）这样组织的联赛。只有很小一部分年轻人接受了组织指导和训练。专业学院之外的培训系统几乎就是不存在的。中国大学生的技术平均水平就和美国普通高中学生差不多（我和中国大学校队打过球）</p><p>这也意味着，当中国以高个子为选拔标准的时候，真正有天赋的控卫和前锋就只能从很少的一部分人中挑选了，甚至比大部分国家的选择标准都要少。这也符合了大部分中国球星都是内线（姚明、易建联、周琦、巴特尔等）的情况，他们还小就通过身高容易被发掘并进入到体教体系。举另一个例子，林书豪来自5百万美籍华裔中，而不是14亿中国人口中（280倍之差）（46赞）</p></div><h2 id="自己再说两句"><a href="#自己再说两句" class="headerlink" title="自己再说两句"></a>自己再说两句</h2><p>reddit 上的言论看一圈下来，倒是和国内讨论的八九不离十，基本离不开青训体系建设、联赛对抗水平、海外打球的球员数量等方向。但就只是看这三点，从08到现在我们也几乎没有进步。海外打球的本土球员现在为0，大学生联赛培养出的新秀在CBA都难以立足，整个联赛水平也在退步：以前多少王牌外援，多少本土响当当的球星，现在呢？那反映在大赛上，成绩能好吗？</p><p>网上也看到不少把输球原因归结到某个球员，或者是教练，又甚至是篮协主席身上</p><p>我特别反感这种出现问题就把锅全甩给一个人的言论，除了能宣泄负面情绪没有任何用处，另外我们所看到的输球只是一瞬间的事，那我们是做了什么，为什么会制定这样的规划政策，为什么联赛会培养出这些在国际赛场打不出水平的球员，为什么要频繁换教练，导致永远没有一套自己的技战术体系，这和背后的决策、体系规划、培养方式方方面面都离不开关系</p><p>你说李凯尔打得不好，那就假设把他换了，换成场均能拿30多分的，这种水平在国际比赛赛场已经很猛了。但是我们输的三场比赛，分别输了 42分，20分，18分和21分，归化就算能多拿10多分也是无济于事。看一下隔壁的比赛，渡边雄太这场拉垮了，但是他们还有两个球员拿了20多分，我们呢？</p><p>你说教练有问题，那就说他现在手里的牌又有多少。你说他用人不当调整不及时，那就说现在中国队球员全部加起来，有一个像样的首发阵容吗？真到了比赛要紧时刻，该换谁，能换谁呢？。另一方面是没有个人能力特别突出的球员，球员之间形成不了很好的化学反应，这也直接导致了没有稳定的球队技战术体系。那这怪教练也没用，巧妇也难为无米之炊</p><p>最后，我们到底会怎么发展呢？从08年到现在，已经退步了15年了，现在还看不到答案的话，4年后再参加预选的我们又真的能找到答案吗？我不好说。</p>]]></content>
    
    
    <summary type="html">男篮世界杯表现不吐不快</summary>
    
    
    
    <category term="生活" scheme="http://smiecj.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="篮球" scheme="http://smiecj.github.io/categories/%E7%94%9F%E6%B4%BB/%E7%AF%AE%E7%90%83/"/>
    
    
    <category term="生活" scheme="http://smiecj.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="篮球" scheme="http://smiecj.github.io/tags/%E7%AF%AE%E7%90%83/"/>
    
  </entry>
  
  <entry>
    <title>开源项目观察8月报</title>
    <link href="http://smiecj.github.io/2023/08/23/opensource-monthly-202308/"/>
    <id>http://smiecj.github.io/2023/08/23/opensource-monthly-202308/</id>
    <published>2023-08-22T16:00:00.000Z</published>
    <updated>2023-09-04T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/xiaoliizi/article/details/132702146">本文csdn地址</a></p><p><a href="https://mp.weixin.qq.com/s/z7elA1hgWTRgzsIt_R_4QQ">本文公众号地址</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>要问对一门技术感兴趣的最好办法是什么，必然不是直接揪着原理、源码一点点读，那很容易只见其木不见其林。不妨从新特性去了解，先俯瞰森林全貌，再细看每一棵树的变化</p><p>于是刚旅游回来的我在想，已经这么久没关注技术行情了，那就看看这个月的更新呗，了解一下接触过的技术都有哪些更新</p><p>总览: 大数据: hue、starrocks、airflow、presto、jupyter、seatunnel、starrocks；编程语言: golang、c++</p><h2 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h2><h3 id="hue"><a href="#hue" class="headerlink" title="hue"></a>hue</h3><p><a href="https://github.com/cloudera/hue/releases/tag/release-4.11.0">1月19: 4.11</a><br><a href="https://docs.gethue.com/releases/release-notes-4.11.0/">https://docs.gethue.com/releases/release-notes-4.11.0/</a></p><p><img src="/2023/08/23/opensource-monthly-202308/hue-01.png" alt="hue release"></p><ul><li><p><a href="https://gethue.com/blog/2022-10-11-creating-iceberg-tables-in-hue/">支持 iceberg 数据源</a></p></li><li><p>通过缓存 Livy session 中的信息来加速 SparkSQL，并适配 Spark UDF</p></li><li><p><a href="https://gethue.com/blog/2022-02-01-hplsql-support/">支持 HPL/SQL: hive sql 的高级语法，支持中间结果保存、循环等</a></p></li></ul><p>总结: 基本是小改进，界面样式和4.10一致</p><h3 id="starrocks"><a href="#starrocks" class="headerlink" title="starrocks"></a>starrocks</h3><p><a href="https://docs.starrocks.io/zh-cn/main/release_notes/release-3.1">8月25: 3.1.2</a></p><p><img src="/2023/08/23/opensource-monthly-202308/starrocks-01.png" alt="starrocks release"></p><p>3.1 版本相关的新特性（部分）</p><ul><li><p>存算分离: 支持主键模型</p></li><li><p>存算分离: 抽象 存储卷（Storage Volume） 概念，方便在不重启集群的情况下，对对象存储的配置进行修改</p></li><li><p>Catalog: 支持 ES、Paimon</p></li><li><p>​物化视图: 可以通过ALTER手动重新激活失效的物化视图（之前在 base 表重建后，物化视图需要重建）</p></li><li><p>物化视图: 通过 swap 可进行视图替换（目前还不支持直接 alter 视图 sql）</p></li><li><p>物化视图: 支持随机分桶（Random Bucketing）</p></li><li><p>物化视图: 支持通过 ORDER BY 指定排序键</p></li><li><p>建表: 支持自增列属性 AUTO_INCREMENT，提供表内全局唯一 ID</p></li><li><p>建表: 通过分区表达式自动创建分区，比如 day 表示按天分区</p></li><li><p>建表: 支持随机分桶（仅支持明细表）</p></li><li><p>建表: 支持使用 colocate_group、storage_medium（存储介质 如：SSD）、storage_cooldown_time 等属性</p></li><li><p>建表: 支持生成列（generated column），自动计算表达式结果，提升查询性能</p></li><li><p>导入数据: 通过 insert into 导入数据的时候支持 files 函数，不需要先建 catalog</p></li></ul><p>总结: starrocks 作为目前比较流行的实时数仓服务，3.0 版本在物化视图的改进还是很足的，非常建议尝试</p><h3 id="airflow"><a href="#airflow" class="headerlink" title="airflow"></a>airflow</h3><p><a href="https://airflow.apache.org/docs/apache-airflow/stable/release_notes.html#airflow-2-7-0-2023-08-18">8月18: 2.7.0</a></p><p><img src="/2023/08/23/opensource-monthly-202308/airflow-04.png" alt="airflow release"></p><ul><li><p>python基础版本: 不再支持 3.7, 支持 3.8, 3.9, 3.10, 3.11</p></li><li><p>UI: 新 graph 界面</p></li><li><p>smtp: 默认使用 <a href="https://docs.python.org/3/library/ssl.html#ssl.create_default_context">ssl.create_default_context</a> 创建 ssl 客户端，可通过 <a href="https://airflow.apache.org/docs/apache-airflow/stable/configurations-ref.html#ssl-context">ssl_context</a> 配置其他校验级别<br><a href="https://github.com/apache/airflow/pull/33075">参考: Allows to choose SSL context for SMTP provider #33075</a></p></li><li><p>UI：出于安全性考虑，默认禁用在界面、API 和 CLI 侧<a href="https://airflow.apache.org/docs/apache-airflow/stable/howto/connection.html#testing-connections">对 connection 触发测试</a>，可通过 <a href="https://airflow.apache.org/docs/apache-airflow/stable/configurations-ref.html#test-connection">test_connection</a> 选项配置<br>可选值: Disabled, Enabled, Hidden</p></li></ul><p>之前版本的dag界面:<br><img src="/2023/08/23/opensource-monthly-202308/airflow-02.png" alt="airflow"></p><p>新版本dag界面:<br><img src="/2023/08/23/opensource-monthly-202308/airflow-03.png" alt="airflow"></p><p>总结: 基本功能改动不大，有两个主要特性都和安全性相关</p><h3 id="presto"><a href="#presto" class="headerlink" title="presto"></a>presto</h3><p><a href="https://prestodb.io/docs/current/release/release-0.283.html">8月8: 0.283</a></p><p>0.276 ~ 0.283 的部分改进</p><ul><li><p>JDBC: 增加 metadata 的缓存，通过三个配置控制: metadata-cache-ttl, metadata-cache-refresh-interval 和 metadata-cache-size<br><a href="https://prestodb.io/docs/current/connector/hive.html?highlight=metadata%20cache%20ttl#metastore-configuration-properties">参考 hive 配置</a></p></li><li><p><a href="https://github.com/prestodb/presto/issues/15909">ES: 支持配置用户密码校验</a>，参数将透传给ES</p></li></ul><h3 id="jupyter"><a href="#jupyter" class="headerlink" title="jupyter"></a>jupyter</h3><p><a href="https://jupyterlab.readthedocs.io/en/stable/getting_started/changelog.html#v4-0">4.0</a></p><p>快速使用:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm -p 8888:8888 jupyter/datascience-notebook:lab-4.0.5</span><br></pre></td></tr></table></figure><p><img src="/2023/08/23/opensource-monthly-202308/jupyter-02.png" alt="jupyterlab"></p><ul><li><p>code editor: 使用新版 codemirror 6，配置更有效和方便，比如只隐藏 markdown 格式的左侧行数</p></li><li><p>extension: 可以直接引用通过 pip 安装的依赖，不再需要本地再把 extension 项目重新 build 的过程</p></li><li><p>基本操作: 优化搜索功能，支持选中搜索、多行搜索</p></li><li><p>UI: 增加 ctrl + shift + H 快捷键查看热键，在 notebook 底部增加创建新代码块按钮等</p></li></ul><p><img src="/2023/08/23/opensource-monthly-202308/jupyter-01.png" alt="add cell"></p><ul><li>协作: 通过 <a href="https://github.com/jupyterlab/jupyter-collaboration">jupyter-collaboration</a> 支持多用户协作编辑同个 notebook</li></ul><p>总结: 4.0 版本之后界面样式和 3 差不多，不过还是能看到很明显的一些细节改进，值得尝试</p><h3 id="seatunnel"><a href="#seatunnel" class="headerlink" title="seatunnel"></a>seatunnel</h3><p><a href="https://github.com/apache/seatunnel/releases/tag/2.3.3">2.3.3</a></p><p><a href="https://mp.weixin.qq.com/s/vEh-n_8Oe050hm1pA47bbg">参考: Apache SeaTunnel 2.3.3 版本发布，CDC 支持 Schema Evolution！</a><br><a href="https://apacheseatunnel.medium.com/apache-seatunnel-2-3-3-released-with-cdc-support-for-schema-evolution-2fd78c81f2d6">Apache SeaTunnel 2.3.3 Released with CDC Support for Schema Evolution!</a></p><ul><li><p>实时同步: flink cdc 支持表结构同步（DDL）</p></li><li><p>实时同步: flink cdc 支持对无主键表的唯一索引列进行 split 拆分</p></li><li><p>mongo: 支持 mongo cdc</p></li></ul><h2 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h2><h3 id="golang"><a href="#golang" class="headerlink" title="golang"></a>golang</h3><p><a href="https://tip.golang.org/doc/go1.21">1.21</a></p><p><a href="https://go.dev/blog/go1.21">Go 1.21 is released!(8月8日)</a></p><p><a href="https://mp.weixin.qq.com/s/Nuj_cYFvBesaBbSSz5PuBg">Go1.21 那些事：泛型库、for 语义变更、统一 log/slog、WASI 等新特性，你知道多少？</a></p><p><a href="https://appliedgo.com/blog/go1-21">Is Go 1.21 already on your upgrade list? It should be!</a></p><ul><li><p>日志: 标准库新增 slog，支持格式化日志输出、自定义 handler 和 日志等级<br><a href="https://www.reddit.com/r/golang/comments/11sdqia/slog_proposal_accepted_for_go_121/">reddit 上的讨论</a>: 大部分开发者都很欢迎 go 官方支持了slog</p></li><li><p>内置函数: 新增 max、min、clear。不再需要通过 math.Max 调用，且通过泛型支持不同基础类型传参</p></li><li><p>内置函数: <a href="https://pkg.go.dev/cmp">cmp</a> 支持泛型</p></li><li><p>基础类型: map、slice 支持泛型，并提供支持泛型的 <a href="https://pkg.go.dev/maps">maps</a>、<a href="https://pkg.go.dev/slices@master">slices</a> 工具库<br>常用方法: slices.Sort、maps.Equal 等</p></li><li><p>泛型: 性能提升<br><a href="https://encore.dev/blog/go1.21-generics">Understanding Go 1.21 generics type inference</a></p></li><li><p>基本语法: for 循环变量赋值语义变更，可通过添加 <a href="https://github.com/golang/go/wiki/LoopvarExperiment">GOEXPERIMENT=loopvar</a> 参数控制让局部变量每次赋予新值，避免在循环内开启协程、使用指针时出现不符预期的结果，<a href="https://github.com/golang/go/wiki/CommonMistakes#using-reference-to-loop-iterator-variable">参考: Using reference to loop iterator variable</a></p></li><li><p>编译: <a href="https://go.dev/doc/pgo">PGO（Profile Guided Optimization）</a> 正式发布，通过在 main 代码目录放置 default.pgo（可通过 /debug/pprof/profile 接口生成的 profile）文件来开启 PGO build，将对程序性能有 2% - 7% 的提升</p></li><li><p>命令行和工具: go tool 支持向前（旧版本）兼容和向后（新版本）兼容<br>向前: 如设置 GODEBUG=http2client=0,http2server=0 可禁用 net/http 库的 http2 功能，<a href="https://go.dev/doc/godebug">参考</a><br>向后: 如通过 GOTOOLCHAIN=go1.21rc3 go test 参数设定 go tool 使用的版本，<a href="https://go.dev/doc/toolchain">参考</a></p></li><li><p>Context: context 新增 WithoutCancel 、WithDeadlineCause 、 WithTimeoutCause、<a href="https://github.com/golang/go/issues/57928">AfterFunc</a> 等方法</p></li><li><p>其他特性等: 支持 WASI；增加全局的 <a href="https://github.com/golang/go/issues/57179">$GOROOT/go.env</a> 配置解析（优先级: 系统环境变量 &gt; 用户路径下的 go.env，即 $HOME/.config/go/env &gt; $GOROOT/go.env）等</p></li></ul><p>总结: 相比泛型，像日志库、一些内置函数和 context 新增方法反而更让笔者眼前一亮，这些是在旧功能上进行的添彩功能，可能在平时更能用上</p><h3 id="c"><a href="#c" class="headerlink" title="c++"></a>c++</h3><p><a href="https://zhuanlan.zhihu.com/p/137646370">10分钟速览 C++20 新增特性</a></p><p><a href="https://oi-wiki.org/lang/new">新版 C++ 特性(c++11)</a></p><p><a href="https://blogs.embarcadero.com/what-is-modern-c-in-2023">What Is Modern C++ in 2023?</a></p><p><a href="https://blog.devgenius.io/what-is-new-in-c-20-a5ba62a28b9a">What is new in C++20</a></p><p><a href="https://en.cppreference.com/w/cpp/20">官方-C++20</a></p><p>注意: 使用 gcc 编译需要先升级到 10 以上版本 - <a href="https://stackoverflow.com/a/60515907">参考</a></p><ul><li><p>模块管理: 通过模块进行依赖引用，减小编译后文件大小<br><a href="https://zhuanlan.zhihu.com/p/350136757">扩展: C++20 新特性: modules 及实现现状</a><br><a href="https://github.com/Cpp-Club/Cxx_HOPL4_zh/blob/main/09.md#931-%E6%A8%A1%E5%9D%97">扩展: C++ 之父 Bjarne Stroustrup 对模块功能的介绍</a><br><a href="https://zhuanlan.zhihu.com/p/350136757">C++20 新特性: modules 及实现现状</a></p></li><li><p>基础语法: 支持 coroutine（协程）</p></li><li><p>基础语法: 支持 concept+requires 语法，可以更方便地使用泛型，<a href="https://zhuanlan.zhihu.com/p/107610017">参考</a></p></li><li><p>基础语法: <a href="https://zhuanlan.zhihu.com/p/86809598">Ranges</a>: 更方便地编写迭代器、过滤器的语法<br>但是对 ranges 的看法五花八门，<a href="https://zhuanlan.zhihu.com/p/603431999">参考一篇知乎</a></p></li><li><p>基础语法: 支持条件约束（<a href="https://www.modernescpp.com/index.php/c-core-guidelines-a-detour-to-contracts/">Contract Programming</a>）: 可定义前置条件、后置条件、错误、断言和不变量等，可以更早地在编译阶段发现程序问题<br>如: <a href="https://www.cppstories.com/2017/11/nodiscard/">nodiscard</a>: 规定方法返回值要获取，<a href="https://gavinray97.github.io/blog/adding-invariant-to-cpp-design-by-contract#implementing-the-invariant-call-code-generation">invariant</a>: 规定方法内部不对入参进行修改<br>注意: 只是在编译产生警告，不会直接导致编译错误</p></li><li><p>基础类型: 原子类型，操作方法有 store、load、fetch_add 等</p></li></ul><p>总结: 更新虽然很多，但是 coroutine 使用起来需要引入相关的如此多的关键字，着实让我敬而远之。<a href="https://news.ycombinator.com/item?id=26222342">类似的吐槽</a>，其中有人建议使用封装后的库 如 <a href="https://github.com/lewissbaker/cppcoro">cppcoro</a>，以及对比 Rust 语言的 Async 和 Await 用法: <a href="https://lights0123.com/blog/2020/07/25/async-await-for-avr-with-rust/">Async/Await for AVR with Rust</a></p>]]></content>
    
    
    <summary type="html">每月更新（可能）</summary>
    
    
    
    <category term="开源" scheme="http://smiecj.github.io/categories/%E5%BC%80%E6%BA%90/"/>
    
    
    <category term="大数据" scheme="http://smiecj.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    <category term="golang" scheme="http://smiecj.github.io/tags/golang/"/>
    
    <category term="开源" scheme="http://smiecj.github.io/tags/%E5%BC%80%E6%BA%90/"/>
    
    <category term="starrocks" scheme="http://smiecj.github.io/tags/starrocks/"/>
    
  </entry>
  
  <entry>
    <title>東京の日々</title>
    <link href="http://smiecj.github.io/2023/08/10/japan-travel-note-tokyo/"/>
    <id>http://smiecj.github.io/2023/08/10/japan-travel-note-tokyo/</id>
    <published>2023-08-09T16:00:00.000Z</published>
    <updated>2023-08-10T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/P1CZG06HA9ZI6BXlPyOR0g">本文公众号地址</a></p><h2 id="花火大会"><a href="#花火大会" class="headerlink" title="花火大会"></a>花火大会</h2><p>百闻不如一见，虽然过程有一点不小的插曲，还好把最精彩的一段看完了</p><p>当时就很好奇放出笑脸的烟花是怎么做出来的，正好今晚的 NHK 节目还科普了一下</p><p><img src="/2023/08/10/japan-travel-note-tokyo/kyoto-travel-note-01.jpg" alt="提前一个半小时已经来了不少人"></p><p><img src="/2023/08/10/japan-travel-note-tokyo/kyoto-travel-note-02.png" alt="回来后看到关于火灾的报道"></p><p><a href="https://www.nhk.jp/p/chicochan/ts/R12Z9955V3/episode/te/JYZGRL8W3W">NHK 节目: 拡大版SP▽花火の謎▽なぜ正座▽不思議なジャンプ</a></p><h2 id="新宿"><a href="#新宿" class="headerlink" title="新宿"></a>新宿</h2><p>希望是最后一次被红蓝遍天的カラオケ广告牌吸引吧😂</p><p><img src="/2023/08/10/japan-travel-note-tokyo/kyoto-travel-note-03.png" alt="歌舞伎町"></p><h2 id="浅草寺"><a href="#浅草寺" class="headerlink" title="浅草寺"></a>浅草寺</h2><p>也许是个抽签小技巧：在去浅草寺的仲见世通路边摊上，先抽中一个4等奖的小奖品，再去抽浅草寺的签</p><p><img src="/2023/08/10/japan-travel-note-tokyo/kyoto-travel-note-04.png" alt="雷门"></p><p><img src="/2023/08/10/japan-travel-note-tokyo/kyoto-travel-note-05.png" alt="背面的风神雷神"></p><h2 id="秋叶原"><a href="#秋叶原" class="headerlink" title="秋叶原"></a>秋叶原</h2><p>相比起二次元，它更配得上的符号应该是技术阿宅的天堂，包括 softmap 在内的电器店卖的各种电脑配件，能细到焊板用的各种元器件，DLY大神应该什么​电器都能做出来了</p><p><img src="/2023/08/10/japan-travel-note-tokyo/kyoto-travel-note-06.png" alt="秋叶原"></p><h2 id="J联赛"><a href="#J联赛" class="headerlink" title="J联赛"></a>J联赛</h2><p>川崎前锋主场对阵大阪钢巴，本以为是一场主队轻松把控局势的对阵，却变成了到补时阶段都一直跌宕起伏的比赛</p><p>混入客场球迷区的我们 也结结实实的被大阪球迷的欢庆包围了</p><p><img src="/2023/08/10/japan-travel-note-tokyo/kyoto-travel-note-07.png" alt="看完比赛从球场回去"></p><h2 id="东京塔-amp-东京树"><a href="#东京塔-amp-东京树" class="headerlink" title="东京塔 &amp; 东京树"></a>东京塔 &amp; 东京树</h2><p>同样是电视塔，东京塔有它的历史感，东京树有它的朝气和活力</p><p>对我来说 可能商业气氛没那么浓的东京塔更中意点吧</p><p><img src="/2023/08/10/japan-travel-note-tokyo/kyoto-travel-note-08.png" alt="从芝公园看东京塔"></p><p><img src="/2023/08/10/japan-travel-note-tokyo/kyoto-travel-note-09.png" alt="东京树"></p><h2 id="东京地铁"><a href="#东京地铁" class="headerlink" title="东京地铁"></a>东京地铁</h2><p>除了找换站难的问题，东京地铁给我最大的印象还得是座位太舒服了，所有座位都有软坐垫和靠背。要是国内也有这样的配套，家人再也不用担心我加班多晚回来了</p><h2 id="吃的"><a href="#吃的" class="headerlink" title="吃的"></a>吃的</h2><p>来东京的第一顿正餐就是拉面，差点要咸哭我了</p><p>后面吃的口味比较正常，好不好喝关键还是得在汤</p><p><img src="/2023/08/10/japan-travel-note-tokyo/kyoto-travel-note-11.png" alt="东京树下吃的还不错的拉面"></p><p>寿司和国内相比，好吃并不在肉而是在米。在筑地市场吃的这家也好，在车站买的也好，米的口感都挺不错的</p><p><img src="/2023/08/10/japan-travel-note-tokyo/kyoto-travel-note-10.png" alt="筑地市场吃的寿司"></p><p><img src="/2023/08/10/japan-travel-note-tokyo/kyoto-travel-note-12.png" alt="坐JR吃的寿司"></p><p>当然，我承认自己还是更喜欢便利店的东西，这几天把泡面、寿司、零食都吃了个遍，什么吃的都不重样，不得不感叹这就是便利店大国的实力吗</p><h2 id="一点感想"><a href="#一点感想" class="headerlink" title="一点感想"></a>一点感想</h2><p>在亲身来到了东亚之光，一个真正包容开放的大城市之后，不禁还是想写点什么。东京之所以能成为东京，有客观的原因，也有它自己的东西，而且东京在从里到外很自信地展示着，有无数抬头就能看到的现代化元素，也在行走街道的转角处，看到的历史和潮流的碰撞（神社、老房子、窄窄的小巷、地铁的设施）。这些元素可能看着和东京的定位格格不入，但是东京毫不吝啬地让我们看到。它的包容性，也不只是体现在有多少外国人在这里，而是能让任何一个来东京旅游的人，都看得到关于它的一切</p><p>一味地否定自己的文化和历史，连自己该展示的精华都没搞明白，也很难让别人看得起自己</p>]]></content>
    
    
    <summary type="html">日本旅游日记系列</summary>
    
    
    
    <category term="旅游" scheme="http://smiecj.github.io/categories/%E6%97%85%E6%B8%B8/"/>
    
    <category term="日本" scheme="http://smiecj.github.io/categories/%E6%97%85%E6%B8%B8/%E6%97%A5%E6%9C%AC/"/>
    
    
    <category term="旅游" scheme="http://smiecj.github.io/tags/%E6%97%85%E6%B8%B8/"/>
    
    <category term="日本" scheme="http://smiecj.github.io/tags/%E6%97%A5%E6%9C%AC/"/>
    
    <category term="日记" scheme="http://smiecj.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>东京景点</title>
    <link href="http://smiecj.github.io/2023/07/14/japan-travel-guide-tokyo/"/>
    <id>http://smiecj.github.io/2023/07/14/japan-travel-guide-tokyo/</id>
    <published>2023-07-13T16:00:00.000Z</published>
    <updated>2023-07-26T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本文共享文档"><a href="#本文共享文档" class="headerlink" title="本文共享文档"></a>本文共享文档</h2><p><a href="https://thorn-silkworm-729.notion.site/dd52fddbc33d43fa93b272c0544d1ea6">日本景点</a></p><h2 id="东京介绍"><a href="#东京介绍" class="headerlink" title="东京介绍"></a>东京介绍</h2><p><a href="https://zh.wikipedia.org/zh-hans/%E4%B8%9C%E4%BA%AC">东京-维基百科</a></p><p>东京（日语：東京 / とうきょう Tōkyō */?）是位于日本关东地方的都市，一般指东京都、狭义上东京都区部（即东京市区），亦可泛指东京都及周边卫星都市相连而成的“首都圈”（东京都会区）。是日本事实上的首都。<strong>东京都人口数达1399万</strong>（2022年4月），首都圈的人口数则达3800万，是目前全球规模最大的都会区。<strong>东京的GDP为全球第二</strong>，在2016年达9730亿美元，而同时东京都会区（一都三县）则高达1.8兆美元，若将东京视为一个国家，其GDP总量高于加拿大、韩国、俄罗斯等，位列世界第八。东京为亚洲最重要的世界级城市，也是传统上的全球四大世界级城市之一，全球城市指数排名前四。此外，东京亦为世界最宜居城市（英国Monocle生活品质调查）。</p><p>东京古称江户，自德川幕府时代以来开始成为日本主要都市之一，明治维新时期改为现名后，更发展为日本政治、经济、文化、交通等众多领域的枢纽中心。经过二战后的继续发展，东京不仅成为世界商业金融、流行文化与时尚重镇，亦为世界经济发展及富裕程度最高的都市之一。此外，东京还拥有复杂且密集的城市轨道交通系统，其中单就东京的两大地铁系统管辖区段每日平均运量达880万人次，繁忙程度居全球地铁第三位；如将地铁直通运转路线、私铁通勤路线及JR通勤路线纳入计算，则每日平均运量位居世界城市轨道交通运输系统第一位。</p><p>在正式的行政区划定义上，东京仅限于东京都，与道、府、县同为日本的一级行政区，辖区包含东京都区部、多摩地方以及伊豆群岛、小笠原群岛等离岛；其中，<strong>东京都区部为日本中央政府所在地</strong>。东京都同时也囊括了日本最南端（冲之鸟礁）和最东端（南鸟岛）等地理极点，拥有日本各都道府县中最多的人口数，同时也是日本人口密度最高的都道府县。</p><h2 id="23区地图"><a href="#23区地图" class="headerlink" title="23区地图"></a>23区地图</h2><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-area-02.webp" alt="东京23区地图"></p><h2 id="景点游玩整理"><a href="#景点游玩整理" class="headerlink" title="景点游玩整理"></a>景点游玩整理</h2><table><thead><tr><th>方向</th><th>区域</th><th>景点</th><th>特点</th><th>交通</th><th>开放时间</th><th>门票/购票方式</th><th>周边住宿/景点</th><th>美食</th><th>时间</th><th>其他</th></tr></thead><tbody><tr><td>中心<div style="width: 30pt"></td><td><div style="width: 40pt">新宿区</td><td><div style="width: 100pt"><a href="https://www.mafengwo.cn/poi/22535.html">新宿御苑 しんじゅくぎょえん</a></td><td><div style="width: 100pt">大型公园，赏樱花，赏枫，言叶之庭取景地</td><td><div style="width: 150pt">大江户线-国立竞技场、新宿站</td><td><a href="https://www.gotokyo.org/cn/spot/75/index.html">全日，9:00～16:30</a></td><td><div style="width: 150pt">普通票:成人500日元 (1月1日-12月31日 周一-周日) ; 半票:250日元(15岁以上青少年、65岁以上老年人)</td><td><div style="width: 250pt">新宿站步行7分钟</td><td><div style="width: 250pt">待补充</td><td><div style="width: 50pt">1-3小时</td><td></td></tr><tr><td>中心</td><td>新宿区</td><td><a href="https://www.mafengwo.cn/poi/6151659.html">新宿黄金街 新宿ゴールデン街</a></td><td>老街，居酒屋街</td><td>紧邻歌舞伎町街与花园神社，JR山手线新宿站</td><td>全年开放</td><td>无门票</td><td><a href="https://www.gotokyo.org/cn/story/guide/shinjuku-shop/index.html">购物</a>: LUMINE: 年轻潮流<br>大黑屋: 中古店<br>京王百货店:销售化妆品、时装、饰品、玩具、家居用品、日本传统工艺品</td><td><a href="https://www.gltjp.com/zh-hans/directory/item/10362/">超厉害的煮干拉面（すごい煮干(にぼし)ラーメン）</a><br><a href="https://www.klook.com/zh-TW/activity/13174-yakiniku-tei-rokkasen-shinjuku-tokyo/?aid=77&utm_medium=affiliate-alwayson&utm_source=non-network&utm_campaign=77&utm_term=">燒肉亭六歌仙</a>: 烤肉吃到饱, <a href="https://ajgogo.com/2019-09-04-2191/">具体订位方式分享</a><br><a href="https://livejapan.com/zh-tw/in-tokyo/in-pref-tokyo/in-shinjuku/article-a0002669/">其他</a></td><td>2小时</td><td>位于歌舞伎町内，晚上才热闹</td></tr><tr><td>中心</td><td>新宿区</td><td><a href="https://www.mafengwo.cn/poi/6151659.html">歌舞伎町 かぶきちょう</a></td><td>各种娱乐、风俗店</td><td>同上</td><td>全年开放</td><td>无门票</td><td>参考其他</td><td><a href="https://www.mafengwo.cn/poi/6414404.html">矶丸水产(新宿3丁目店) （Isomaru Suisan）</a>: 知名，也有人评价一般；<a href="https://www.mafengwo.cn/poi/8093848.html">蟹道乐(新宿本店)</a>: 蟹的各种吃法，味道可能一般</td><td>3小时以上</td><td>晚上热闹，人很多，也很多黑社会，最好小心，<a href="https://www.cnkirito.moe/tokyo-travel/#%E6%AD%8C%E8%88%9E%E4%BC%8E%E7%94%BA">参考</a></td></tr><tr><td>中心</td><td>千代田区</td><td><a href="https://www.mafengwo.cn/poi/6151659.html">秋叶原 秋葉原 あきはばら アキバ</a></td><td>日本三大电器街<a href="https://www.momoda8.com/morank/54.html">(另一个: 日本桥)</a>、二次元</td><td>中央、总武线 / 银座线: 秋叶原站，步行5分钟，从新宿出发公交30分钟</td><td>全年开放</td><td>无门票</td><td><a href="https://livejapan.com/zh-cn/in-tokyo/in-pref-tokyo/in-akihabara/article-a0004361/">sofmap</a>: 电脑配件</td><td><a href="https://tabelog.com/tokyo/A1310/A131001/13021102">粋な一生ラーメン</a>（评分一般）、<a href="https://tabelog.com/tw/tokyo/A1310/A131001/13219278/dtlrvwlst/">BENGAL</a>（评分居中）</td><td>3小时以上</td><td>打卡点: <a href="https://www.animate.co.jp/shop/akihabara/">ANIMATE: 漫画书、漫画周边</a></td></tr><tr><td>中心</td><td>千代田区</td><td><a href="https://www.gotokyo.org/cn/story/guide/a-noble-look-at-tokyos-imperial-palace-a-guide-to-the-royal-residence/index.html">皇居 こうきょ / 江户城 えどじょう</a></td><td>日本皇室的住所，可以参观 东御苑和外苑</td><td>千代田线 - 大手町站; 中央线 - 东京站</td><td><a href="https://zh.wikipedia.org/zh-hans/%E7%9A%87%E5%B1%85%E6%9D%B1%E5%BE%A1%E8%8B%91">东御苑</a>（皇居東御苑/こうきょひがしぎょえん）全年开放，观光游从周二到周六每天各有2次，可以<a href="https://www.bring-you.info/zh-hans/tokyo-imperial-palace#spot2">在线申请</a>（从<a href="https://sankan.kunaicho.go.jp/index.html">这里</a>看已经申请满了）</td><td><a href="https://cn.tripadvisor.com/Attraction_Review-g1066443-d479262-Reviews-Two_tiered_Bridge_Ni_ju_Bashi-Chiyoda_Tokyo_Tokyo_Prefecture_Kanto.html">二重桥 にじゅうばし</a>（需要先申请）、<a href="https://www.japan-travel.cn/spot/1736/">千鸟渊 千鳥ヶ淵 ちどりがふち</a>（皇居的护城河，赏樱）、<a href="https://www.japan-travel.cn/spot/1718/">日本武道馆</a></td><td>参考其他</td><td>1小时</td><td></td><td></td></tr><tr><td>中心</td><td>涩谷区</td><td><a href="https://www.japan-travel.cn/spot/1666/">明治神宫 明治神宮 めいじじんぐう</a></td><td>明治天皇(1852-1912)与昭宪皇太后，涩谷区中最大的一块绿地</td><td>山手线 - 原宿站; 千代田线或副都心线 - 明治神宫前站</td><td>全年开放</td><td>无门票</td><td>代代木公园</td><td>参考其他</td><td>1小时</td><td></td></tr><tr><td>中心</td><td>涩谷区</td><td><a href="https://www.japan-travel.cn/spot/2177/">涩谷全向十字路口 渋谷スクランブル交差点 Scramble</a></td><td>最经典的十字路口</td><td>涩谷车站八公出口</td><td>全年开放</td><td>无门票</td><td>参考其他</td><td>参考其他</td><td>几分钟</td><td></td></tr><tr><td>中心</td><td>涩谷区</td><td><a href="https://livejapan.com/zh-cn/in-tokyo/in-pref-tokyo/in-shibuya/spot-lj0001987">忠犬八公像 忠犬ハチ公像 ちゅうけんハチ</a></td><td><a href="https://zh.wikipedia.org/zh-sg/%E5%BF%A0%E7%8A%AC%E5%85%AB%E5%85%AC">故事</a>: 为生前习惯去东京涩谷车站迎接其主人上野英三郎教授归来，甚至在主人死后也一直等待了约10年</td><td>涩谷站</td><td>全年开放</td><td>无门票</td><td>参考其他</td><td>参考其他</td><td>几分钟</td><td></td></tr><tr><td>中心</td><td>涩谷区</td><td><a href="https://cn.tripadvisor.com/Attraction_Review-g1066456-d1373790-Reviews-Takeshita_Street-Shibuya_Tokyo_Tokyo_Prefecture_Kanto.html">竹下通 竹下通り たけしたどおり</a></td><td>时装店，小吃</td><td>山手线 - 原宿站</td><td>10:30-20:30</td><td>无门票</td><td>店: ＠cosme TOKYO 旗舰店（美妆）、WITH HARAJUKU 复合式商场</td><td><a href="https://tabelog.com/tokyo/A1306/A130601/13186805/">トッティ キャンディ ファクトリー 原宿店 （Totti Candy Factory）</a>: 巨型彩色棉花糖和粉红少女装<br><a href="https://tabelog.com/tokyo/A1306/A130601/13088711/">マリオンクレープ 原宿竹下通り店 / MARION Crepes 可丽饼</a> 招牌: 特制草莓布朗尼蛋糕＆巧克力生鲜奶油2倍<br><a href="https://tabelog.com/tokyo/A1306/A130601/13218655/">LONG! LONGER!! LONGEST</a>: 日本最长的吉拿棒、日本最长的棉花糖等</td><td>1-2小时</td><td></td></tr><tr><td>中心</td><td>港区</td><td><a href="https://www.japan-travel.cn/spot/1709/">东京塔 东京铁塔 東京タワー / とうきょうタワー</a></td><td>建于1958年，广播塔，东京第二高（2010年晴空塔建成之后），333 米（1,029 英尺），红白相间</td><td>大江户线-赤羽桥; 日比谷线-霞关</td><td>9:00-23:00</td><td>Main Deck（大眺望厅）的入场费为 1200 日元，Top Deck（特别眺望厅）的行程门票是 3,000 日元<br>在<a href="https://www.tokyotower.co.jp/cn/price/">tokyotower（官网）</a>或者<a href="https://www.klook.com/zh-CN/activity/4911-tokyo-tower-main-observatory-ticket-tokyo/">klook</a>可以预定</td><td><a href="https://tokyo.letsgojp.cn/archives/321054/">拍摄地点</a>: 芝公园4号地、赤羽桥车站～「东京铁塔下」（东京タワー下）路口、<a href="https://www.gltjp.com/zh-hant/article/item/12052/#zh-1-12">東京鐵塔停車場樓梯</a>、増上寺（增上寺） × 東京鐵塔、彩虹大橋北側遊步道</td><td><a href="https://beauty-upgrade.tw/23723">东京铁塔内美食</a></td><td>1-2小时</td><td>晚上的票可能比较火爆，需要提前1-2周预订<br>可购买礼品: 千分之一東京鐵塔</td></tr><tr><td>中心</td><td>港区</td><td><a href="https://www.gltjp.com/zh-hans/directory/item/10114/">芝公园 芝公園 しばこうえん</a></td><td>1873 年建成，日本最早的公园，赏花，东京铁塔拍摄地</td><td>浅草线-大门<br>三田线-御成门</td><td>全年开放</td><td>无门票</td><td>东京塔</td><td><a href="https://tabelog.com/matome/3394">参考</a>: クレッセント(法国料理)<br><a href="https://majohouse.com/2016/01/07/nodaiwa-minato/">野田岩</a>（鳗鱼之神）</td><td>1小时</td><td></td></tr><tr><td>中心</td><td>港区</td><td><a href="https://www.mafengwo.cn/poi/6151659.html">台场 台場 だいば</a></td><td>东京湾右下角，看整个东京湾</td><td>山手线-&gt;临海线-东京电讯; 新宿出发约50分钟</td><td>全年开放</td><td>空中列车百合鸥号，可现场或者<a href="https://www.kkday.com/zh-cn/product/28490-asakusa-to-odaiba-tokyo-waterside-water-bus-ride-japan">kkday</a>购买</td><td><a href="https://livejapan.com/zh-cn/in-tokyo/in-pref-tokyo/in-odaiba/spot-lj0002127/?sc_lid=lj_pc_article_spot01">调色板城大摩天轮 パレットタウン</a>（现场购票）<br><a href="https://www.gotokyo.org/cn/spot/39/index.html">台场海滨公园</a>（人工岛，风景不错）<br><a href="https://www.gotokyo.org/cn/story/walks-and-tours/waterfront/rainbow-bridge/index.html">彩虹大桥 レインボーブリッジ，Rainbow Bridge</a>（眺望整个东京湾，看东京塔，步行30分钟）</td><td>参考其他</td><td>2-3小时</td><td><a href="https://japantravel.navitime.com/zh-cn/area/jp/guide/NTJarea0120-zh-cn/">线路推荐: ①筑地→②丰洲→③有明→④台场</a></td></tr><tr><td>中心</td><td>港区</td><td><a href="https://bobby.tw/blog/post/227736584-%E3%80%90%E6%9D%B1%E4%BA%AC%E6%99%AF%E9%BB%9E%E3%80%91%E5%85%AD%E6%9C%AC%E6%9C%A8%E4%B9%8B%E4%B8%98hills%28%E6%96%B0%E5%9F%8E%E5%B1%95%E6%9C%9B%E5%8F%B0%29%EF%BC%9A">六本木之丘 六本木新城森大楼 ろっぽんヒルズ森タワー</a></td><td>观景台，六本木: 最多企业总部的区域，新城</td><td>日比谷线-六本木; 大江户线-六本木</td><td>全年开放</td><td>最晚8点，<a href="https://www.kkday.com/zh-my/product/18946-tokyo-roppongi-hills-mori-tower-observation-deck-ticket-japan">kkday预订</a>，可提前一个月，93元</td><td>参考其他</td><td><a href="https://www.bring-you.info/zh-hans/afuri-ramen">AFURI阿夫利</a>: 拉面店</td><td>1-3小时</td><td><a href="https://www.bring-you.info/zh-hans/roppongi-hot-spots#spot9">【东京六本木景点】六本木之丘、夜景拍摄、逛街、美食、交通、一日游攻略</a></td></tr><tr><td>中心</td><td>中央区</td><td><a href="https://www.mafengwo.cn/poi/6151659.html">银座 銀座 / ぎんざ</a></td><td>逛街<br>主要街区: 銀座通り<br>四丁目</td><td>丸之内线-银座<br>银座线-银座</td><td>全年开放</td><td>无门票</td><td><a href="https://www.gotokyo.org/cn/destinations/central-tokyo/nihombashi/index.html">日本桥 日本橋 / にほんばし</a>: 江户时代，历史和现代的融合</td><td><a href="https://tabelog.com/tokyo/A1301/A130101/13228602/">银座八五</a>: 米其林，「无酱油」淡丽系拉面<br><a href="https://www.bring-you.info/zh-hans/ginzakagari">银座篝(gou)(かがり) 松露鸡白汤拉面</a>: 鸡白汤（鶏パイタン）拉面<br><a href="https://www.bigfang.tw/blog/post/hanayamaudon-ginza">五代目 花山乌冬 银座店</a>: 五公分宽的「鬼ひも川」</td><td>3小时</td><td><a href="https://www.bring-you.info/zh-hans/ginza#musteat">【银座景点】银座一日游逛街去：必逛购物百货公司 &amp; 美食餐厅 &amp; 下午茶甜点 &amp; 住宿推荐</a></td></tr><tr><td>中心</td><td>中央区</td><td><a href="https://www.gotokyo.org/cn/spot/65/index.html">筑地场外市场 築地場外市場 築地市場 / つきじしじょう </a></td><td>海鲜街，小吃</td><td>银座走路7分钟</td><td>全年开放</td><td>无门票</td><td>银座</td><td><a href="https://venuslin.tw/tamagoyaki-tsukiji">筑地山长玉子烧</a><br><a href="https://www.tsukiji.or.jp/shoplist/cat-b/cat-4/230/">吉澤商店 よしざわしょうてん</a>: 肉饼（6:00～13:00）<br><a href="https://tabelog.com/tokyo/A1313/A131301/13145358/">まぐろのみやこ</a>: 海鲜烧<br><a href="https://tabelog.com/tokyo/A1313/A131301/13180099/">そらつき</a>: 草莓大福</td><td>1-3小时</td><td>考虑到吃的东西多，建议早上来<br>参考<a href="https://www.youtube.com/watch?v=ImqrkgHIXGw">自由行视频</a>: 筑地场外市场 -&gt; 东京塔 -&gt; 银座篝</td></tr><tr><td>城南</td><td>世田谷区</td><td><a href="https://www.klook.com/zh-TW/blog/gotokuji-temple-tokyo/">豪德寺 ごうとくじ</a></td><td>充满猫的神社</td><td>千代田线-代代木上原 -&gt; odakyu line: 豪德寺</td><td>全年开放</td><td>无门票</td><td>附近好像没啥其他景点</td><td>参考其他</td><td>1小时，从中心出发时间半小时+</td><td></td></tr><tr><td>城南</td><td>世田谷区</td><td><a href="https://www.mafengwo.cn/poi/6151659.html">下北泽 下北沢 / しもきたざわ</a></td><td>复古安静的购物街道，文艺风</td><td>京王井之头线</td><td>全年开放</td><td>无门票</td><td>明治大学、东京大学</td><td><a href="https://tokyo.letsgojp.cn/archives/72489/">推荐美食</a>: <a href="https://tabelog.com/tokyo/A1318/A131802/13164953/">ポニピリカ: 异国风情汤咖哩</a><br><a href="https://tabelog.com/tokyo/A1318/A131802/13054105/">シティー カントリー シティ （CITY COUNTRY CITY）</a>: 民谣，意大利面，咖啡</td><td>1-2小时</td><td>适合中午下午逛</td></tr><tr><td>城南</td><td>品川区</td><td><a href="https://www.gltjp.com/zh-hant/directory/item/12810/">品川花海道</a></td><td>长2公里的花田</td><td>山手线-&gt;京滨东北线 大井町, 新宿出发1小时</td><td>全年开放</td><td>无门票</td><td>无</td><td><a href="https://www.gltjp.com/zh-hant/directory/item/10742/">東京洋食屋神田Grill Atre大井町店</a>: 洋食老店<br><a href="https://www.gltjp.com/zh-hant/directory/item/12914/">南品川茶箱</a>: 茶屋、甜品，日本茶: 深蒸煎茶; 草莓餡蜜<br><a href="https://www.gltjp.com/zh-hant/directory/item/10221/">Homemade Ramen麥苗</a>: 豚骨汤拉面</td><td>1小时</td><td></td></tr><tr><td>城南</td><td>大田区</td><td><a href="https://www.gotokyo.org/cn/spot/494/index.html">Jonanjima Seaside Park 城南岛海滨公园 城南島海浜公園 じょうなんじまかいひんこうえん</a></td><td>东京湾边缘，沙滩和飞机</td><td>山手线-&gt;京滨东北线 大大森 -&gt; 森32公交, 城南岛四丁目</td><td>全年开放</td><td>无门票</td><td>参考其他</td><td>参考其他</td><td>1-2小时</td><td></td></tr><tr><td>城西</td><td>中野区</td><td><a href="https://www.gotokyo.org/cn/spot/72/index.html">中野百老汇 中野ブロードウェイ</a></td><td>比秋叶原更安静的动漫周边店</td><td>宿08<br>东西线-中野</td><td>全年开放</td><td>无门票</td><td>无</td><td><a href="https://tabelog.com/tokyo/P000094/premiseLst/">参考tabelog</a>: 都比较普通</td><td>1-3小时</td><td></td></tr><tr><td>城北</td><td>板桥区</td><td><a href="https://www.gotokyo.org/cn/spot/ev046/index.html">板桥花火大会</a></td><td><a href="https://itabashihanabi.jp/">官网</a>: 7:00-8:30; <a href="https://itabashihanabi.jp/guide.html">荒天中止</a>, <a href="https://trip.iko-yo.net/events/1404">时隔四年</a>，约 1w3k 发</td><td><a href="https://itabashihanabi.jp/access.html">官方交通说明</a><br>河川敷（カセンシキ）: 从市区出发，银座线-&gt;中阳线-&gt;南武线-&gt;矢川</td><td>8月5日</td><td><a href="https://itabashihanabi.jp/paidseat.html">付费: 陸上競技場席</a>: 凳子 5500 日元</td><td>参考其他</td><td>参考其他</td><td>2小时</td><td><a href="https://cn.tripadvisor.com/Attraction_Review-g1066446-d8820262-Reviews-Itabashi_Fireworks-Itabashi_Tokyo_Tokyo_Prefecture_Kanto.html">观景免费的</a>: 河川敷, Kasenjikikouen Soccer Field<br>需要提前1-2个小时</td></tr><tr><td>城东</td><td>台东区</td><td><a href="https://www.bring-you.info/zh-hans/sensoji-temple">浅草寺 せんそうじ</a></td><td>浅草寺创建于628年，是东京都内最古老的寺院。东京都历史最早的寺院</td><td>银座线; 从住宿出发20分钟, 神田-&gt;浅草 6个站</td><td>全年开放</td><td><a href="https://www.bring-you.info/zh-hans/asakusa-hana-kimono">和服出租(需要提前预约)</a></td><td>路线建议: 雷门 → 接仲见世通（边吃边买约0.5~1hr）  → 穿过宝藏门 → 到浅草寺参拜 → 旁边的浅草神社 → 前往上野、阿美横町、谷中银座、晴空塔<br>雷门: 670公斤重, 1960年重建, 写着风雷神门，象征了两侧的风神和雷神<br><a href="https://www.gotokyo.org/cn/spot/73/index.html">仲见世通(なかみせどおり)</a>: 小吃，工艺品<br>宝藏门后的大草鞋，400公斤重<br>进入浅草寺之前: 把香炉（こうろ）的烟揽到自己身上<br><a href="https://japantravel.navitime.com/zh-cn/area/jp/guide/NTJhowto0142-zh-cn/">洗手</a>: 鞠躬-&gt;右手拿勺清洗左手，左手拿勺清洗右手-&gt;右手拿勺清洗左手-&gt;右手给左手盛水漱口（流过嘴唇就好了）-&gt; 剩下点水清洗左手 -&gt; 倒水，直立柄勺清洗柄勺 -&gt; 再次鞠躬<br>进入神社时尽量靠两边走，中间留给神明<br>参拜:因为是佛教寺院，因此进入山门前鞠躬一次即可，不用击掌<br>投入100元鞠躬-&gt;抽签<br>买御守<br>浅草神社, 1945年空袭中幸免于难 ｜ 参考其他</td><td><a href="https://www.bring-you.info/zh-hans/sensoji-temple">UNIQLO浅草概念店</a>: 浅草寺风格的寺庙</td><td>3小时</td><td></td></tr><tr><td>城东</td><td>台东区</td><td><a href="https://www.japan-travel.cn/spot/1673/">上野公园 上野公園 / うえのこうえん</a></td><td>交通枢纽区的公园，寺庙、各种美术馆和博物馆（东京国立博物馆、国立西洋美术馆、国立科学博物馆、上野动物园）、赏樱，日本的第一座公园</td><td>大江户线-上野御徒町，新宿出发35分钟</td><td>全年开放</td><td>无门票</td><td>阿美横丁、镰仓小町通、上野恩赐公园上野樱花祭</td><td>参考其他</td><td>1小时</td><td></td></tr><tr><td>城东</td><td>台东区</td><td><a href="https://www.japan-travel.cn/spot/1706/">雨横购物街 上野阿美横町 アメヤ横丁 アメヤよこちょう</a></td><td>曾经的黑市，现在的购物天堂</td><td>上野公园走路10分钟</td><td>全年开放</td><td>无门票</td><td><a href="https://www.bring-you.info/zh-hans/ame-yoko">参考</a><br>药妆店: OS drug（オーエスドラッグ）、松本清一店（薬 マツモトキヨシ）、Sundrug（サンドラッグ）<br><a href="https://www.daikokudrug.com/">大国药妆 大國藥妝</a><br><a href="https://bobby.tw/blog/post/228013178-%E3%80%90%E6%9D%B1%E4%BA%AC%E3%80%91%E4%B8%8A%E9%87%8E%E4%BA%8C%E6%9C%A8%E8%8F%93%E5%AD%90%E5%BF%85%E8%B2%B7%EF%BC%9A%E6%9C%80%E5%A4%AF%E6%9A%A2%E9%8A%B7%E6%B8%85%E5%96%AE%EF%BC%8C">二木的菓子 二木の菓子</a>: Alfort帆船餅乾（巧克力）、明治果汁軟糖（100%果汁）、ORIHIRO蒟蒻果凍、iFactory梅干片、UHA味覺糖、日清兵衛豆皮烏龍麵、干贝</td><td><a href="https://www.bring-you.info/zh-hans/yakitori-bunraku">やきとり文乐</a>: 烤鸡</td><td>1-2小时</td><td></td></tr><tr><td>城东</td><td>墨田区</td><td><a href="https://www.gotokyo.org/cn/destinations/eastern-tokyo/skytree-and-around/index.html">东京天空树 东京晴空塔 東京スカイツリー とうきょうスカイツリー</a></td><td>世界第三高，可远观富士山</td><td>从浅草寺出发走路17分钟<br>半藏门线-押上<br>浅草线-押上</td><td>10:00~21:00</td><td><a href="https://www.tokyo-skytree.jp/cn_s/ticket/individual/">官方在线购买</a>, 比线下优惠300日元<br>天望回廊+天望甲板: 2700<br>天望甲板: 1800</td><td>参考其他</td><td>参考其他</td><td>1-2小时</td><td></td></tr><tr><td>城东</td><td>墨田区</td><td><a href="https://www.tokyo-solamachi.jp/cn/">晴空街道 晴空塔城 東京スカイツリータウン Tokyo Skytree Town</a></td><td>商业中心</td><td>东京树旁</td><td>全年开放</td><td>无门票</td><td>晴空街道3楼: 西馆（JUMP SHOP 等动漫专卖店、美食街）、东馆（Uniqlo等平价品牌）<br>4楼: 纪念品</td><td>参考<a href="https://www.tokyo-solamachi.jp/cn/restaurant/">官方推荐</a></td><td>1小时</td><td></td></tr><tr><td>城东</td><td>墨田区</td><td><a href="https://www.gotokyo.org/cn/spot/1745/index.html">江户东京博物馆 東京都江戸東京博物館 とうきょうとえどとうきょうはくぶつかん</a></td><td>江户时代的文物展示</td><td>大江户线-Ryogoku Sta.<br>门33-TOEI-RYŌGOKU-EKI-MAE</td><td>除周一</td><td>600日元门票</td><td>参考其他</td><td>参考其他</td><td>1-2小时</td><td></td></tr><tr><td>城东</td><td>江户川区</td><td><a href="https://www.gltjp.com/zh-hans/directory/item/13909/">Diamond and Flower Ferris Wheel 钻石与花之大摩天轮 ダイヤと花の大観覧车</a></td><td>日本最大的摩天轮，每圈17分钟，东京的右下角</td><td>新宿出发: 新宿线-市谷-&gt;有乐町线-新木场-&gt;京叶线-葛西临海公园</td><td>平时10:00 - 19:00 节假日 10:00 - 20:00</td><td>800日元</td><td>无</td><td>无</td><td>1小时</td><td></td></tr></tbody></table><p>当前: 添加其他城市的攻略， 如 热海、三岛、镰仓、千叶等</p><p><a href="https://www.youtube.com/watch?v=KlF1VIU_tIM">https://www.youtube.com/watch?v=KlF1VIU_tIM</a></p><p>注意: 这里添加了一些东京都周边城市，因为他们离 东京不远，可以放在当天打卡的范围去</p><h3 id="各个景区图片和评论参考"><a href="#各个景区图片和评论参考" class="headerlink" title="各个景区图片和评论参考"></a>各个景区图片和评论参考</h3><h4 id="新宿-新宿御苑"><a href="#新宿-新宿御苑" class="headerlink" title="新宿-新宿御苑"></a>新宿-新宿御苑</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-gyoen-01.jpeg" alt="新宿御苑"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-gyoen-02.jpeg" alt="新宿御苑"></p><h4 id="新宿-新宿黄金街"><a href="#新宿-新宿黄金街" class="headerlink" title="新宿-新宿黄金街"></a>新宿-新宿黄金街</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-shinjukugoruden-01.jpeg" alt="新宿黄金街"></p><h4 id="新宿-歌舞伎町"><a href="#新宿-歌舞伎町" class="headerlink" title="新宿-歌舞伎町"></a>新宿-歌舞伎町</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-kabukicho-01.jpeg" alt="歌舞伎町"></p><h4 id="千代田-秋叶原"><a href="#千代田-秋叶原" class="headerlink" title="千代田-秋叶原"></a>千代田-秋叶原</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-akihabara-01.jpeg" alt="秋叶原"></p><h4 id="千代田-皇居"><a href="#千代田-皇居" class="headerlink" title="千代田-皇居"></a>千代田-皇居</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-koukyo-01.jpeg" alt="皇居"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-koukyo-02.webp" alt="皇居"></p><h4 id="涩谷-明治神宫"><a href="#涩谷-明治神宫" class="headerlink" title="涩谷-明治神宫"></a>涩谷-明治神宫</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-meijijinguu-01.jpeg" alt="明治神宫"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-meijijinguu-02.jpeg" alt="明治神宫"></p><h4 id="涩谷-渋谷スクランブル交差点"><a href="#涩谷-渋谷スクランブル交差点" class="headerlink" title="涩谷-渋谷スクランブル交差点"></a>涩谷-渋谷スクランブル交差点</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-scramble-01.jpeg" alt="涩谷全向十字路口"></p><h4 id="涩谷-忠犬ハチ公像"><a href="#涩谷-忠犬ハチ公像" class="headerlink" title="涩谷-忠犬ハチ公像"></a>涩谷-忠犬ハチ公像</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-chukenhachi-01.jpeg" alt="忠犬ハチ公像"></p><h4 id="涩谷-竹下通り"><a href="#涩谷-竹下通り" class="headerlink" title="涩谷-竹下通り"></a>涩谷-竹下通り</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-takeshitadoori-01.jpeg" alt="竹下通り"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-takeshitadoori-02.jpeg" alt="竹下通り"></p><p>Totti Candy Factory</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-takeshitadoori-03.jpeg" alt="竹下通り"></p><p>MARION Crepes</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-takeshitadoori-04.jpeg" alt="竹下通り"></p><h4 id="港区-东京塔"><a href="#港区-东京塔" class="headerlink" title="港区-东京塔"></a>港区-东京塔</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-tokyotawa-01.webp" alt="东京塔"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-tokyotawa-02.jpeg" alt="东京塔"></p><h4 id="港区-芝公园"><a href="#港区-芝公园" class="headerlink" title="港区-芝公园"></a>港区-芝公园</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-shibakouen-01.jpeg" alt="芝公园"></p><h4 id="港区-台场"><a href="#港区-台场" class="headerlink" title="港区-台场"></a>港区-台场</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-daiba-01.jpeg" alt="台场"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-daiba-02.jpeg" alt="台场"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-daiba-03.jpeg" alt="台场"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-daiba-04.jpeg" alt="台场"></p><h4 id="中央区-银座"><a href="#中央区-银座" class="headerlink" title="中央区-银座"></a>中央区-银座</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-ginza-01.webp" alt="银座"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-ginza-02.jpeg" alt="银座"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-nihonbashi-01.jpeg" alt="日本桥"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-nihonbashi-02.jpeg" alt="日本桥"></p><h4 id="中央区-筑地场外市场"><a href="#中央区-筑地场外市场" class="headerlink" title="中央区-筑地场外市场"></a>中央区-筑地场外市场</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-tukijishi-01.jpeg" alt="築地場外市場"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-tukijishi-02.jpeg" alt="築地場外市場"></p><h4 id="千代田区-豪德寺"><a href="#千代田区-豪德寺" class="headerlink" title="千代田区-豪德寺"></a>千代田区-豪德寺</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-goutokuji-01.jpeg" alt="豪德寺"></p><h4 id="千代田区-下北泽"><a href="#千代田区-下北泽" class="headerlink" title="千代田区-下北泽"></a>千代田区-下北泽</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-shimokitazawa-01.jpeg" alt="下北泽"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-shimokitazawa-02.jpeg" alt="下北泽"></p><h4 id="板桥区-板桥花火大会"><a href="#板桥区-板桥花火大会" class="headerlink" title="板桥区-板桥花火大会"></a>板桥区-板桥花火大会</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-itabashi-hanabitaikai-01.jpeg" alt="板桥花火大会"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-itabashi-hanabitaikai-02.png" alt="板桥花火大会"></p><h4 id="台东区-浅草寺"><a href="#台东区-浅草寺" class="headerlink" title="台东区-浅草寺"></a>台东区-浅草寺</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-sensouji-01.jpeg" alt="浅草寺"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-sensouji-02.jpeg" alt="浅草寺"></p><h4 id="台东区-上野公园"><a href="#台东区-上野公园" class="headerlink" title="台东区-上野公园"></a>台东区-上野公园</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-uenokouen-01.webp" alt="上野公园"></p><h4 id="台东区-上野阿美横町"><a href="#台东区-上野阿美横町" class="headerlink" title="台东区-上野阿美横町"></a>台东区-上野阿美横町</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-ameya-01.jpeg" alt="上野阿美横町"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-ameya-02.jpeg" alt="上野阿美横町"></p><h4 id="墨田区-东京天空树"><a href="#墨田区-东京天空树" class="headerlink" title="墨田区-东京天空树"></a>墨田区-东京天空树</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-skytree-01.jpeg" alt="东京天空树"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-skytree-02.jpeg" alt="东京天空树"></p><h4 id="墨田区-晴空塔城"><a href="#墨田区-晴空塔城" class="headerlink" title="墨田区-晴空塔城"></a>墨田区-晴空塔城</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-skytree-town-01.jpeg" alt="晴空塔城"></p><h4 id="墨田区-東京都江戸東京博物館"><a href="#墨田区-東京都江戸東京博物館" class="headerlink" title="墨田区-東京都江戸東京博物館"></a>墨田区-東京都江戸東京博物館</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-tokyohakubutukan-01.jpeg" alt="東京都江戸東京博物館"></p><h4 id="江户川区-钻石与花之大摩天轮"><a href="#江户川区-钻石与花之大摩天轮" class="headerlink" title="江户川区-钻石与花之大摩天轮"></a>江户川区-钻石与花之大摩天轮</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-diamondkanlansha-01.jpeg" alt="钻石与花之大摩天轮"></p><h3 id="其他非必逛-未整理景区"><a href="#其他非必逛-未整理景区" class="headerlink" title="其他非必逛/未整理景区"></a>其他非必逛/未整理景区</h3><p>新宿区<br><a href="https://www.gltjp.com/zh-hans/directory/item/10148/">东京都厅观景台</a><br>原因: 开放时间非常少: 每月第1・第3个星期二，观景台</p><p><a href="https://cn.tripadvisor.com/Attraction_Review-g1066457-d1373765-Reviews-Meijijingu_Gaien-Shinjuku_Tokyo_Tokyo_Prefecture_Kanto.html">明治神宫外苑</a><br>原因: 公园类型，赏银杏，秋季比较适合</p><p><a href="https://cn.tripadvisor.com/Attraction_Review-g14133673-d1173749-Reviews-Omoide_Yokocho-Nishishinjuku_Shinjuku_Tokyo_Tokyo_Prefecture_Kanto.html">新宿西口照相机街</a><br>原因: 逛街类型</p><p><a href="https://cn.tripadvisor.com/Attraction_Review-g14133673-d1594916-Reviews-Shinjuku_Chuo_Park-Nishishinjuku_Shinjuku_Tokyo_Tokyo_Prefecture_Kanto.html">新宿中央公园</a><br>公园</p><p>千代田区</p><p><a href="https://www.mafengwo.cn/gonglve/ziyouxing/283852.html">东京站</a><br>最繁忙车站，很复杂，可以购物，打个卡就好，周围的景点适合逛（皇居外苑）</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-tokyoeki-01.webp" alt="东京站"></p><p><a href="https://cn.tripadvisor.com/Attraction_Review-g1066443-d555799-Reviews-Yasukuni_Shrine-Chiyoda_Tokyo_Tokyo_Prefecture_Kanto.html">靖国神社</a><br>你懂的</p><p><a href="https://ikidane-nippon.com/zh-Hans/spots/nippon-budokan">日本武道馆</a><br>竞技场，演唱会</p><p>涩谷区<br><a href="https://cn.tripadvisor.com/Attraction_Review-g1066456-d561514-Reviews-Yoyogi_Park-Shibuya_Tokyo_Tokyo_Prefecture_Kanto.html">代代木公园</a></p><p>港区</p><p><a href="https://cn.tripadvisor.com/Attraction_Review-g14129743-d1574646-Reviews-Tokyo_Midtown-Akasaka_Minato_Tokyo_Tokyo_Prefecture_Kanto.html">东京中城</a><br>购物中心，奢侈品</p><p>中央区</p><p><a href="https://cn.tripadvisor.com/Attraction_Review-g14129573-d1373683-Reviews-Kabukiza_Theater-Ginza_Chuo_Tokyo_Tokyo_Prefecture_Kanto.html">歌舞伎剧场</a></p><p><a href="https://www.japan-travel.cn/spot/1653/">滨离宫恩赐庭园</a><br>曾经的皇家庭园</p><p>文京区</p><p><a href="https://www.gotokyo.org/cn/spot/22/index.html">六义园</a><br>江户代表性回游式假山泉水庭园</p><p><a href="https://www.gotokyo.org/cn/spot/24/index.html">小石川后乐园 小石川後楽園</a><br>东京最美的日本庭园</p><p><a href="https://www.gotokyo.org/tc/destinations/central-tokyo/tokyo-dome-and-around/index.html">东京巨蛋</a><br>体育项目，餐厅</p><p>世田谷区<br><a href="https://www.gotokyo.org/cn/spot/901/index.html">Kinuta Park 砧公园 砧公園 / きぬたこうえん</a><br>840棵樱花树</p><p>目黑区</p><p><a href="https://topmuseum.jp/chi/contents/pages/about_history.html">东京摄影美术馆</a><br>摄影和影像作品的综合性美术馆</p><p><a href="https://www.aquarium.gr.jp/">品川水族馆</a><br>水族馆<br>门票: <a href="https://www.klook.com/zh-CN/activity/5609-aqua-park-shinagawa-ticket-tokyo/">klook</a>、<a href="https://www.kkday.com/zh-cn/product/18689-tokyo-maxell-aqua-park-shinagawa-ticket-japan">kkday</a></p><p>杉并区</p><p><a href="https://cn.tripadvisor.com/Attraction_Review-g1066458-d1594552-Reviews-Wadabori_Park-Suginami_Tokyo_Tokyo_Prefecture_Kanto.html">Wadabori Park 和田堀公園</a><br>赏樱</p><p>练马区</p><p><a href="https://www.gotokyo.org/cn/spot/656/index.html">东京千寻美术馆 ちひろ美術館</a><br>水彩画主题展，美术作品</p><p><a href="https://www.gotokyo.org/cn/spot/433/index.html">石神井公园</a><br>东京最大的绿地, 新宿40分钟</p><p>荒川区</p><p><a href="https://www.gotokyo.org/jp/destinations/northern-tokyo/nippori/index.html">日暮里繊維街 日暮里ガイド</a><br>购物</p><p>丰岛区<br><a href="https://cn.tripadvisor.com/Attraction_Review-g1066460-d1425386-Reviews-Sunshine_Aquarium-Toshima_Tokyo_Tokyo_Prefecture_Kanto.html">阳光水族馆</a></p><p>台东区<br><a href="https://cn.tripadvisor.com/Attraction_Review-g14134311-d2492312-Reviews-Asakusa_Shrine-Asakusa_Taito_Tokyo_Tokyo_Prefecture_Kanto.html">浅草神社</a><br>可以体验和服</p><p><a href="https://www.japan-travel.cn/spot/663/">东京国立博物馆</a><br>日本艺术、其他国家的文物, <a href="https://www.mafengwo.cn/poi/7408.html">东洋馆</a>中展示的大部分中国的，如<a href="https://zh.wikipedia.org/zh-sg/%E7%A5%AD%E5%A7%AA%E6%96%87%E7%A8%BF">祭侄文稿</a></p><p>丰岛区</p><p><a href="https://www.gltjp.com/zh-hans/directory/item/10844/">目白庭园</a><br>典型日本庭院</p><p>参考资料:</p><p><a href="https://zhuanlan.zhihu.com/p/457227817">你了解东京吗？全方位详解日本东京23个区</a></p><p><a href="https://cn.tripadvisor.com/Attractions-g1066444-Activities-a_allAttractions.true-Chuo_Tokyo_Tokyo_Prefecture_Kanto.html">中央区景点玩乐</a></p><p><a href="https://travo.guide/japan/tokyo/best-attractions-in-minato/">【2023東京旅遊攻略】東京港區熱門景點推薦 (東京鐵塔、台場、六本木之丘)</a></p><p><a href="https://zhuanlan.zhihu.com/p/429339891">东京大田区，这些漂亮的小众拍照景点，不要错过</a></p><p>新宿区</p><p><a href="https://cn.tripadvisor.com/Attractions-g1066457-Activities-Shinjuku_Tokyo_Tokyo_Prefecture_Kanto.html">新宿区景点玩乐</a></p><p><a href="https://livejapan.com/zh-cn/in-tokyo/in-pref-tokyo/in-shinjuku/article-a0003768/">新宿散策必备！新宿各区域必访推荐景点指南</a></p><p>涩谷区</p><p><a href="https://www.bring-you.info/zh-hans/harajuku">【原宿逛街地图】原宿、竹下通好逛平价潮流服饰&amp;美食攻略，东京年轻人的购物景点</a></p><p><a href="https://tabelog.com/matome/22451/">tabelog-竹下通りで人気の食べ物！食べ歩き・イートイングルメ20選</a></p><p><a href="https://cn.tripadvisor.com/Tourism-g1066854-Shinagawa_Tokyo_Tokyo_Prefecture_Kanto-Vacations.html">品川区</a></p><p><a href="https://tokyo.letsgojp.cn/archives/525311/">东京「练马区」景点推荐！朝圣动漫圣地、松屋创始店、哈利波特主题乐园</a></p><p><a href="https://newtaipei.travel/zh-cn/regional/sightseeing/1">newtaipei-板桥</a></p><p><a href="https://www.adachikanko.net/zh-CHS/recommend/adachi_spot">足立区的观光路线和景点介绍</a></p><p>目黑区<br><a href="https://resources.realestate.co.jp/zh_CN/area-guide/%E7%9B%AE%E9%BB%91%E5%8C%BA%E6%8C%87%E5%8D%97-%E4%B8%9C%E4%BA%AC%E5%9C%B0%E5%8C%BA%E6%8C%87%E5%8D%97/">樱花道</a></p><p><a href="http://www.bytravel.cn/view/top10/index4091.html">台东区十大旅游景点</a></p><p><a href="https://www.gltjp.com/zh-hans/article/item/20114/">观光&amp;体验&amp;购物&amp;美食！东京都江东区观光指南！</a></p><p><a href="http://digjapan.travel/zh_cn/digest/katsushika.html">东 京 葛 饰</a></p><h2 id="东京地图和区域介绍"><a href="#东京地图和区域介绍" class="headerlink" title="东京地图和区域介绍"></a>东京地图和区域介绍</h2><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-area-03.jpeg" alt="东京23区治安地图"></p><p><a href="https://tokyo.letsgojp.com/archives/459880/">参考: 東京23區「治安最差」是哪區？喜歡一人旅行的要注意！</a></p><h3 id="23区"><a href="#23区" class="headerlink" title="23区"></a>23区</h3><h4 id="基本划分"><a href="#基本划分" class="headerlink" title="基本划分"></a>基本划分</h4><p>城南地区<br>世田谷区、目黑区、品川区、大田区</p><p>城西地区<br>杉並区、中野区</p><p>都心六区<br>新宿区、千代田区、涩谷区、港区、中央区、文京区</p><p>城北地区<br>练马区、板桥区、北区、豊岛区</p><p>城东地区<br>足立区、荒川区、台东区、墨田区、江东区、葛饰区、江户川区</p><p><a href="https://zhuanlan.zhihu.com/p/355390878">日本东京城南地区、城西地区（解析）</a></p><p><a href="https://zhuanlan.zhihu.com/p/357462159">日本东京城北地区、城东地区（解析）</a></p><h4 id="表格整理"><a href="#表格整理" class="headerlink" title="表格整理"></a>表格整理</h4><p><a href="https://www.zhihu.com/question/24494333">东京各区的特点是怎样的？</a></p><table><thead><tr><th>方向</th><th>区域</th><th>特点</th><th>主要景点</th></tr></thead><tbody><tr><td>中心<div style="width: 30pt"></td><td>新宿区</td><td>交通枢纽，商业街，不眠</td><td>歌舞伎町，新宿车站</td></tr><tr><td>中心</td><td>千代田区</td><td>大部分行政机关所在地，大型企业</td><td>东京展、秋叶原、日本武道馆</td></tr><tr><td>中心</td><td>涩谷区</td><td>商业百货</td><td>井ノ頭通り（十字路口）</td></tr><tr><td>中心</td><td>港区</td><td>最有逼格，电视台总部</td><td>六本木，东京塔，芝公园</td></tr><tr><td>中心</td><td>中央区</td><td>位于东京中心，经济中心</td><td>日本桥、银座</td></tr><tr><td>中心</td><td>文京区</td><td>文化和住宅</td><td>东京大学，东京巨蛋</td></tr><tr><td>城南</td><td>世田谷区</td><td>人口最多，密集住宅</td><td>豪德寺，下北泽</td></tr><tr><td>城南</td><td>目黑区</td><td>住宅，樱花</td><td>东京摄影美术馆，品川水族馆</td></tr><tr><td>城南</td><td>品川区</td><td>港口</td><td>品川花海道</td></tr><tr><td>城南</td><td>大田区</td><td>机场，高档住宅</td><td>城南岛海滨公园</td></tr><tr><td>城东</td><td>足立区</td><td>人气不高，治安不好</td><td>タカラ湯 Takarayu</td></tr><tr><td>城东</td><td>荒川区</td><td>穷，路面电车</td><td>Nippori Fabric Town</td></tr><tr><td>城东</td><td>台东区</td><td>以前也穷，日本人不想住</td><td>浅草寺，上野公园，上野阿美横町</td></tr><tr><td>城东</td><td>墨田区</td><td>相扑文化</td><td>江户东京博物馆，东京晴空塔</td></tr><tr><td>城东</td><td>江东区</td><td>东南面，填海，年轻人喜欢</td><td>丰洲市场，森大厦数位艺术美术馆：teamLab无界，日本科学未来馆</td></tr><tr><td>城东</td><td>葛饰区</td><td>老东京，安静，漫画家</td><td>葛饰纳凉花火大会，水元公园</td></tr><tr><td>城东</td><td>江户川区</td><td>外国人多</td><td>葛西临海水族园、东京葛西临海公园、钻石与花之大摩天轮</td></tr><tr><td>城西</td><td>杉並区</td><td>高级住宅，文化底蕴</td><td>大田黑公園、大宮八幡宮</td></tr><tr><td>城西</td><td>中野区</td><td>交通非常方便，人口密度高，低层住宅</td><td>中野百老匯、薬師あいロード商店街、昭和新道</td></tr></tbody></table><h4 id="千代田区"><a href="#千代田区" class="headerlink" title="千代田区"></a>千代田区</h4><p><a href="https://zh.wikipedia.org/wiki/%E5%8D%83%E4%BB%A3%E7%94%B0%E5%8D%80">千代田区</a>（日语：千代田区／ちよだく Chiyoda ku */?）是日本东京都的特别区之一，位于东京都区部的中心位置，在1947年（昭和22年）3月15日由麹町区与神田区合并而来，名称来自于江户城的别名“千代田城”。日本国会、首相官邸、最高法院、大部分中央行政机关，以及天皇住所皆座落于此，而区内的<strong>大手町、丸之内、有乐町</strong>等商圈，是许多日本大型企业总部的聚集地，因而使该区成为日本首屈一指的政治与经济中枢。<strong>东京站、秋叶原</strong>、靖国神社、神保町古书街、<strong>日本武道馆</strong>等著名景点亦位于该区内，该区住有许多政治家及公务员</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-chiyoda-01.png" alt="千代田区"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-chiyoda-02.webp" alt="千代田区"></p><h4 id="中央区"><a href="#中央区" class="headerlink" title="中央区"></a>中央区</h4><p><a href="https://zh.wikipedia.org/zh-sg/%E4%B8%AD%E5%A4%AE%E5%8D%80_(%E6%9D%B1%E4%BA%AC%E9%83%BD)">中央区</a>（日语：中央区／ちゅうおうく Chūō ku */?）是日本东京都内的23个特别区之一，由于其位于23区的正中央位置之故，因而得名。</p><p>中央区不仅地理位置处于东京的中心地，更是日本经济、信息、商业等的中心。著名的日本银行、东京证券交易所等日本经济核心都位于中央区。除此之外，包括银座、大型布庄与百货公司总社聚集的<strong>日本桥</strong>、以及以鱼货市场闻名的筑地皆位于本区范围之内。</p><p>大约位于东京23区的中央。区内有日本桥、八重洲・筑地、月岛、银座等街区。</p><p>面积为10.094km²，是东京23区中第二小的特别区，仅次于台东区。</p><p>人口130,483人，次于千代田区（2013年6月1日）。（2013年4月定居人口达13万人，是1967年以来的新高）区内有日本桥与银座等大型商业区域，让日间人口达60.6万人。此外，本区商业强烈，高楼林立，住宅方面以高层公寓与团地等集合住宅为主，独户低层住宅或低层分租公寓较为少见（多在南部的佃和月岛附近）。</p><p>道路呈现棋盘状，与他区相比较为整齐。</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-chuo-01.png" alt="中央区"></p><h4 id="港区"><a href="#港区" class="headerlink" title="港区"></a>港区</h4><p><a href="https://zhuanlan.zhihu.com/p/508954033">港区</a>（日语：港区 みなとく Minato ku */?）是日本东京都23个特别区之一，位于东京都心东南方、紧邻东京湾，以聚集诸多外国大使馆、<strong>国际气氛浓厚</strong>著称。区内较著名的商圈，包括聚集众多企业的赤坂、新桥、滨松町等商务街，外国观光客与酒吧云集的<strong>六本木</strong>，高级住宅区的麻布和白金台，高级商店街的青山，新兴观光区台场、以及进入2002年以来逐步开发完成的三个大型复合开发区——六本木新城、东京中城、以及汐留SIO-SITE。东京地标之一的东京铁塔亦位于区内</p><p>港区设立于1947年，由旧芝区、旧麻布区、旧赤坂区三区合并诞生。港区位于东京23区中央偏南，是拥有最多企业总部的区域，可说是日本企业的中心。其中、虎之门、新桥、芝为重要的办公商区，经济活动十分活跃。青山、赤坂等商业地区，六本木等娱乐重镇，麻布、白金台等住宅区，汐留、台场等大规模开发区，为港区展现各种不同风貌。东宫御所、迎宾馆（赤坂离宫）与芝公园、白金台的国立科学博物馆附属自然教育园等绿色地带带来丰富的自然环境。驻日大使馆与外资企业的大量进驻，让本地的外国人居住者比例达一成之多</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-minato-01.png" alt="港区"></p><h4 id="新宿"><a href="#新宿" class="headerlink" title="新宿"></a>新宿</h4><p><a href="https://zh.wikipedia.org/zh-sg/%E6%96%B0%E5%AE%BF%E5%8D%80">新宿区</a>（日语：新宿区／しんじゅくく Shinjuku ku */?）是日本东京都的特别区之一，为东京都厅（都政府）所在地。区内的新宿站为东京主要的交通枢纽之一，而以新宿站为中心的商圈（包括新宿副都心），为东京乃至于整个日本首要的中心商业区</p><p>新宿区位在东京市区内中央偏西的地带，区内的新宿车站是东京市区西侧最重要的交通要冲之一，包括JR山手线、JR中央本线、JR总武线与私铁公司京王电铁、小田急电铁的总部都位在新宿车站，周围还有数条地铁线行经。日本各地往来东京的长途巴士也大多停靠新宿，或以新宿为起站、终站。</p><p>以新宿车站为中心，以西（新宿西口）的西新宿是东京都政府在战后规划的中心商业区，又称为“新宿新都心”，东京都的行政中心东京都厅舍就位在此处，除此之外周遭还包围了许多大型企业总部所使用的摩天大楼，此超高层建筑群是东京最早形成的类似区域。新宿车站南口方向则是百货公司与商店街云集的商业地区，其中最著名的包括连锁百货公司高岛屋的旗舰店“高岛屋时代广场”（Takashimaya Times Square）与知名日本连锁书店纪伊国屋的总店。</p><p>相对于西新宿的现代化与整齐，新宿车站以东的东新宿地区（新宿东口），则是最热闹也是最混乱的传统商业街地区，其中，闻名海外的红灯区——<strong>歌舞伎町</strong>，便位于新宿东口范围内。</p><p>在非常受欢迎的日本漫画《城市猎人》中，就是以新宿车站东口公园作为最主要的舞台。</p><p>2016年大卖的动画电影《你的名字。》中，新海诚导演从新宿区多处景点取景，如：新宿警察署地景、<strong>新宿车站</strong>、千駄谷站、信浓町陆桥、四谷须贺町等</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-shinjuku-01.png" alt="新宿"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-shinjuku-02.png" alt="新宿"></p><h4 id="文京区"><a href="#文京区" class="headerlink" title="文京区"></a>文京区</h4><p><a href="https://zhuanlan.zhihu.com/p/510447669">文京区</a>（日语：文京区／ぶんきょうく Bunkyō ku */?）是日本东京都的23个特别区之一，划分上属于23区西部，实际位于中央偏北的位置，现任区长是成泽广修[2]。文京区的面积11.31平方千米，在23区中位列倒数第4，占东京都区部的50分之一[3]。</p><p>该区以文化教育机关和住宅街区为主，有“文之京”的美名。从明治时期以来，这里居住过夏目漱石、森鸥外、宫泽贤治等著名的文人、学者和政治家。除此以外出版、印刷业也很繁盛，并设有先进医疗设施和大型医院。区内著名的设施包括日本最高学府东京大学本部（本乡校区）、<strong>东京巨蛋</strong>和讲道馆等，六义园、后乐园和小石川植物园等古老而宽广的日本庭园也坐落于文京区内</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-bunkyo-01.png" alt="文京区"></p><h4 id="品川区"><a href="#品川区" class="headerlink" title="品川区"></a>品川区</h4><p><a href="https://zhuanlan.zhihu.com/p/506260123">品川区</a>（日语：品川区 しながわく Shinagawa ku */?）是日本东京都的特别区之一，位于东京都的南部，东濒东京湾，为东京市区聚集较多<strong>港口及工业设施</strong>的地带。名称是由境内河川目黑川的别名“品川”而来</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-shinagawa-01.jpeg" alt="品川"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-shinagawa-02.png" alt="品川"></p><h4 id="目黑区"><a href="#目黑区" class="headerlink" title="目黑区"></a>目黑区</h4><p><a href="https://zhuanlan.zhihu.com/p/513564096">目黑区</a>（日语：目黒区／めぐろく Meguro ku */?）是日本东京都下辖的特别区之一<br>东京23区西南部，主要为住宅区</p><p>目黑区位于东京的中央六区的西侧、涩谷区的南侧，是东京主要的住宅行政区之一。目黑区内有许多以低调高级住宅区而闻名的社区，例如柿之木坂、碑文谷、青叶台和驹场，以及自由之丘和中目黑等住商混合的区域。目黑区以其宁静悠闲的居住环境、富饶绿地、池塘和河川以及靠近涩谷、代官山、惠比寿和六本木的便利交通位置，成为居住在东京的欧美人士的人气居住选择</p><p>目黑区最广为人知的是目黑川沿岸种植的<strong>樱花树道</strong>，在一年一度的樱花季，河川两旁的人行道上挤满了前来赏樱花盛开的游客。目黑川沿岸也是受欢迎的高档住宅区，这里可以找到许多适合外国人居住的买/租房选择。 例如，距离目黑车站仅7分钟路程、位于目黑川畔、25层高的高层塔楼公寓MFPR目黑塔（MFPR目黒タワー）。目黑川畔沿岸还有许多中低层的公寓楼，很适合外国人的生活</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-meguro-01.png" alt="目黑"></p><h4 id="大田区"><a href="#大田区" class="headerlink" title="大田区"></a>大田区</h4><p><a href="https://zh.wikipedia.org/wiki/%E5%A4%A7%E7%94%B0%E5%8C%BA">大田区</a>（日语：大田区／おおたく Ōta ku */?）是日本东京都的特别区之一，位于东京都<strong>东南、正对东京湾</strong>。自古以来是捕鱼业发达的地区、大正时代以后形成小作坊的聚集地、至今形成了京滨工业地带。区内的东京国际机场（羽田机场）是东京的空中门户。</p><p>日本著名的高级住宅区田园调布的部分地区位于该区西部。</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-oota-02.png" alt="大田"></p><h4 id="世田谷区"><a href="#世田谷区" class="headerlink" title="世田谷区"></a>世田谷区</h4><p><a href="https://zhuanlan.zhihu.com/p/514865103">世田谷区</a>（日语：世田谷区／せたがやく Setagaya ku */?），是日本东京都区部之一，位于东京23区的<strong>西南</strong>部，以其居住环境良好的住宅区而闻名。世田谷区为东京都特别区中面积第2大，也是全日本人口最多的特别区；人口密度亦排在第14位。</p><p>世田谷区是东京23区中人口最多、面积第二大的行政区。不仅日本人，对于外国人来说也是广为人知的高档<strong>住宅区</strong>所在地，距离新宿和涩谷的车程极短，非常方便通往东京市中心。世田谷区位于东京23区的西南部，其南侧的多摩川邻接神奈川县，在地理上和象征意义上是东京郊区与市中心的边界线。</p><p>世田谷区由北到南可以分为五个地域：乌山、北泽、砧、世田谷和玉川。世田谷区域相当辽阔，从充满文青艺术气息的下北泽个性商店街（北泽地域）、寺庙群聚有如小京都的千岁乌山（乌山地域）、东京人理想居住街区的三轩茶屋（世田谷地域）、东京知名高级住宅区的成城（砧地域）、到乐天总部所在地、商业购物大楼、家庭社区和自然公园一应具全的二子玉川（玉川地域）。</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-setagaya-01.jpeg" alt="世田谷区"></p><h4 id="涩谷区"><a href="#涩谷区" class="headerlink" title="涩谷区"></a>涩谷区</h4><p><a href="https://zh.wikipedia.org/zh-sg/%E6%BE%80%E8%B0%B7%E5%8D%80">涩谷区</a>（日语：渋谷区／しぶやく Shibuya ku */?）[1]是日本东京都的特别区之一，其名称源自于位于该区<strong>中央</strong>、以涩谷站为中心的涩谷地区。</p><p>与新宿、池袋等因为位处于交通要冲上而发展出的商业街相同，涩谷也是因为位居山手线重要转运站的地位而发展成今日的盛况。其为东急集团的大本营，且各种商业活动兴旺，这尤其表现在涩谷站忠犬八公出口处，著名的百货店、时装专卖店、饮食店、咖啡店、休闲设施、特种行业等密集如云，是与新宿同样并列为“24小时不眠之街”的地区。另外，以西武百货、东急百货、巴而可（パルコ）与109百货为中心，再加上周边许多服饰店所构成的商店街街区，是最受东京年轻消费族群喜爱的购物胜地，向来拥有“年轻人之街”之美称，也使得涩谷成为日本国内外各种流行风尚的发源地。而<strong>涩谷车站八公口外</strong>、具有行人保护时相配置、属井之头通（<strong>井ノ頭通り いのかしらどおり</strong>）一部分的大型五叉路口，由于超高的行人穿越量经常被誉称为“全世界最大的交叉路口”，其庞大的行人流通量成为许多观光客参访与摄影、拍照的圣地，也经常出现在电视或电影剧情中，成为东京的象征</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-shibuya-01.png" alt="涩谷区"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-shibuya-02.png" alt="涩谷区"></p><p><a href="https://bienetrevoyage.blogspot.com/2016/04/shibuya-map.html">图片来源</a></p><h4 id="中野区"><a href="#中野区" class="headerlink" title="中野区"></a>中野区</h4><p><a href="https://zh.wikipedia.org/zh-sg/%E4%B8%AD%E9%87%8E%E5%8D%80">中野区</a>（日语：中野区／なかのく Nakano ku */?）是日本人口密度最高的底层住宅区域，位处东京都<strong>西部</strong>。区内产业主要以<strong>第三产业的服务业</strong>为中心，而事业所及从业人员个数则处于东京23区的中下位。</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-nakano-01.png" alt="中野区"></p><h4 id="杉并区"><a href="#杉并区" class="headerlink" title="杉并区"></a>杉并区</h4><p><a href="https://zhuanlan.zhihu.com/p/514857580">杉并区</a>（すぎなみく）是东京23个特别区中最内陆的行政区之一，它被夹在同属属于城西地区的练马区和世田谷区之间。对于在东京市区上班或念书的人来说，此区是一个相当不错的住宅区选择。因为 JR中央线上的许多车站位于杉并区（例如荻洼、阿佐谷、高圆寺）。</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-suginami-01.png" alt="中野区"></p><h4 id="丰岛区"><a href="#丰岛区" class="headerlink" title="丰岛区"></a>丰岛区</h4><p>丰岛区（日语：豊島区／としまく Toshima ku */?）是日本东京都内23个特别区之一，位在旧东京市的区域内西北角一带。其命名由来源自日本政府进行“废藩置县”之前，武藏国丰岛郡的古名，当东京市在进行行政区域扩大时，四个原属北丰岛郡的町被合并划入东京市的范围之内，而赋予丰岛区的命名。</p><p>丰岛区是一个人口密度高，且集时尚与传统、年轻与老年于一体、富有个性的区域。境内最重要的市街为<strong>池袋</strong>车站为中心的商业区，除此之外，驹込、有“老年人的原宿”之称的巢鸭、大冢、高级住宅区的目白等地区都是丰岛区境内比较知名的市街，东京市区内最重要的铁路路线JR山手线在这几个地区都设有车站。</p><p>曾经是东京都内第一高楼的太阳城（サンシャインシティ）就位在区内的池袋地区。区役所位于JR山手线池袋站东口。</p><p>根据1965年的国势调查结果，本区为日本人口密度最高的自治体（前回调查的第一名为1东京都台东区）[1]（页面存档备份，存于互联网档案馆）。2005年的国势调查，仅次于东京都中野区为全日本第二位，2010年再次成为第一。</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-toshima-01.jpeg" alt="丰岛区"></p><h4 id="北区"><a href="#北区" class="headerlink" title="北区"></a>北区</h4><p><a href="https://zhuanlan.zhihu.com/p/514567481">北区</a>实际上就是东南西北的“北区”，因其地处东京最北端的地区之一，北侧隔着荒川与埼玉县的川口市和户田市相邻，东侧隔着隅田川与足立区相邻、东南侧和荒川区接壤、西侧和板桥区接壤、南侧则和丰岛区和文京区接壤。</p><p>与东京北部的大部分地区一样，北区的居民主要是劳工阶级家庭、单身上班族以及越来越多的外国居民（主要来自亚洲国家）。北区有四条河川纵横交错，拥有富饶的绿色空间，并且平民化的物价，使其成为非常适合家庭居住的行政区。</p><p>北区是东京23区中车站最多的行政区，主要车站前往崎玉县、东京市中心甚至神奈川县都相当方便。北区的主要住宅区包括：十条、赤羽和王子。北区的外国居民主要来自亚洲（依序是中国、韩国、越南、菲律宾、尼泊尔和台湾）。当东京国际法国学校（Lycée Français International de Tokyo）于2012年将校舍迁移至北区泷野川时，也为北区增添了点西洋国际色彩。但总体而言，北区给人蓝领阶级和下町风情的印象。</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-kita-01.png" alt="北区"></p><h4 id="板桥区"><a href="#板桥区" class="headerlink" title="板桥区"></a>板桥区</h4><p><a href="https://zhuanlan.zhihu.com/p/512959361">板桥区</a>（いたばし）是东京北部行政区之一，其北侧隔着荒川和埼玉县户田市相邻、西侧和埼玉县和光市接壤。板桥区的气氛宁静、朴素低调、适合家庭居住，许多自然公园和河川河堤蜿蜒穿过恬静住宅区。</p><p>板桥区的外国居民主要来自亚洲（依序是中国、韩国、越南、菲律宾、尼泊尔）板桥区是东京23区中，中国居民第3多的行政区。但东京国际法国学校（Lycée Français International de Tokyo）于当2012年将校舍迁移至北区泷野川时，由于板桥区的新板桥站实际上是离该校最近的车站，大多数乘电车上下课的法国学生都会在新板桥站或板桥站上下车，因此也为板桥区添增了西方色彩。</p><p>板桥区虽然不是东京市中心（除了住宅区就是以日用品制造业为主的中小工场）。但是，这种远离城市喧嚷的环境提供当地居民悠闲生活和亲近绿色空间的优势。板桥区主要车站都在搭电车至池袋、新宿和大手町等主要车站不到30分钟或约30分钟的通勤范围内</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-itabashi-01.png" alt="板桥区"></p><h4 id="练马区"><a href="#练马区" class="headerlink" title="练马区"></a>练马区</h4><p><a href="https://zhuanlan.zhihu.com/p/510946883">练马区</a>（日语：練馬区／ねりまく Nerima ku */?）是东京23区中人口第二多的行政区（仅次于世田谷区），突显了其作为住宅区的受欢迎程度。练马区北侧与埼玉县和光市接壤、东侧为板桥区、其西侧与西东京市接壤，南侧则与中野区、杉并区和武藏野市接壤。练马区和这些相邻接的地区都是东京西郊的主要居住社区。</p><p>练马区以拥有众多的漫画家而闻名，有“日本动漫发祥地”之称。著名的日本漫画《哆啦A梦》《忍者小灵精》以及《机器人少女Z》、《四月是你的谎言》的故事场景就在本区（光丘）。这里是《东京食尸鬼》故事的主要舞台，包括著名经典恐怖片《咒怨》的那座“鬼屋”也在此行凶作恶。闻名的游乐地丰岛园亦在本区。练马区是加速世界(AW)中日珥（Prominence) 的领土</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-rerimaku-01.png" alt="练马区"></p><h4 id="城东地区"><a href="#城东地区" class="headerlink" title="城东地区"></a>城东地区</h4><h4 id="台东区"><a href="#台东区" class="headerlink" title="台东区"></a>台东区</h4><p><a href="https://zhuanlan.zhihu.com/p/511277935">台东区</a>（日语：台東区／たいとうく Taitō ku */?）是东京23区中面积最小的行政区，却是最古老最著名的江户下町街区所在地。广受外国游客欢迎的<strong>浅草</strong>位于台东，在那里可以找到东京历史最悠久的寺庙“<strong>浅草寺</strong>”。探索浅草周边地区是了解东京历史的绝佳方式，因为这里是东京最古老的市街区许多神社每年都会举行各种传统节日祭典，例如每年5月于浅草神社举行的三社祭。</p><p>台东区也是<strong>上野阿美横丁、上野恩赐公园</strong>（含博物馆、美术馆）和<strong>上野动物园</strong>的所在地，非常受当地居民和国内外游客欢迎。台东区以商业市街主，也有一部分住宅区。商业市街和观光区以外的街区大都安静并保有昭和初期东京市街风貌。住宅以公寓和大厦居多，但也有部分独栋住宅。由于台东区<strong>近邻文京区和千代田区的学术和商业区</strong>，因此对于在东京市中心工作/念书又喜爱传统下町的人来说，住在台东区是个不错的选择</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-taitou-01.jpeg" alt="台东区"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-taitou-02.png" alt="台东区"></p><h4 id="墨田区"><a href="#墨田区" class="headerlink" title="墨田区"></a>墨田区</h4><p><a href="https://zhuanlan.zhihu.com/p/511823310">墨田区</a>（日语：墨田区／すみだく Sumida ku */?）是夹于荒川和隅田川之间的行政区，区内有许多知名地标，例如两国国技馆、江户东京博物馆和<strong>东京晴空塔</strong>。晴空塔是到访东京的外国游客的人气观光景点，由押上(晴空塔)搭乘电车可直达羽田机场或成田机场，因此晴空塔附近有许多住宿比市中心便宜的短期出租公寓。江户东京博物馆和大相扑比赛会场的两国国技馆位在两国，到访这些设施可以了解昔日东京的悠久历史。</p><p>墨田区除了作为观光区受欢迎之外，墨田区的住宅区相当适合居住，由于部分车站通勤至主要商业区相当快速，是个可以享受观光休闲和交通之便的宜居之地</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-sumida-02.png" alt="墨田区"></p><h4 id="江东区"><a href="#江东区" class="headerlink" title="江东区"></a>江东区</h4><p><a href="https://zhuanlan.zhihu.com/p/504335320">江东区</a> （日语：江東区／こうとうく Kōtō ku */?） 位于中央区以东、墨田区以南，隅田川和荒川分别构成了江东区的西边和东边的天然边界。由于区内运河与桥梁众多，亦被称作为“水彩都市”。以海产闻名的<strong>筑地市场</strong>（场内市场）也在2018年10月搬迁至此区，成为丰洲市场。该区有七成面积都是通过填海产生。历史上，江东区的内陆地区是庶民社区，随着日本现代化，江东区出现许多中小型下町工厂，龟户与锦糸町（墨田区）周边形成了繁华的副都心商业区。近年，随着都市开发，东京湾岸的填海地兴建了许多高层办公大楼、公园绿地与超高层公寓大楼，吸引了许多白领阶级家庭在此置产居住。</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-koutou-01.png" alt="江东区"></p><h4 id="荒川区"><a href="#荒川区" class="headerlink" title="荒川区"></a>荒川区</h4><p><a href="https://zhuanlan.zhihu.com/p/502047369">荒川区</a>（日语：荒川区／あらかわく Arakawa ku */?）位于东京的东北部，北面是足立区，南面是台东区和文京区。荒川区的区名来自”荒川”，但荒川区北面边境实为”隅田川”。荒川是老市区和新兴住宅区的混合体，可以找到<strong>日暮里纤维街</strong>和南千住的高层塔楼公寓。荒川区最南端的<strong>日暮里</strong>是区内最大的交通枢纽，搭乘京成Skyliner（Keisei Skyliner）前往成田机场仅约36分钟车程。</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-arakawa-01.png" alt="荒川区"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-arakawa-02.png" alt="荒川区"></p><h4 id="足立区"><a href="#足立区" class="headerlink" title="足立区"></a>足立区</h4><p><a href="https://zhuanlan.zhihu.com/p/512370279">足立区</a> （日语：足立区／あだちく Adachi ku */?）是以住宅为主的行政区，是东京23区中平均租金最便宜的区之一。虽然足立区被认为是庶民居住的下町，但足立区最具代表性的北千住是一个相当发达且繁忙的转运站、商业区、大学城和住宅区。车站有两家百货公司和充满活力的商店街。</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-adachi-01.png" alt="足立区"></p><h4 id="葛饰区"><a href="#葛饰区" class="headerlink" title="葛饰区"></a>葛饰区</h4><p>位于东京23区东北角的葛饰区给人的印象与新宿都心摩天高楼相去甚远。<a href="https://zhuanlan.zhihu.com/p/505021340">葛饰区</a> （日语：葛飾区／かつしかく Katsushika ku */?）与周围的台东区、足立区、墨田区和江户川区都被视为下町（下町地区在历史上被认为是庶民居住的工商社区、老街、老社区）。但与经过规划、观光业盛行的台东区和墨田区相比，葛饰区的下町给人一种更传统、安静、更慢活的老东京生活方式。</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-katushika-01.png" alt="葛饰区"></p><h4 id="江户川区"><a href="#江户川区" class="headerlink" title="江户川区"></a>江户川区</h4><p><a href="https://zhuanlan.zhihu.com/p/517606696">江户川区</a>（日语：江戸川区／えどがわく Edogawa ku */?）位于东京23区的最东侧，为荒川和江户川之间的狭长地带。江户川区区名来自东侧的江户川，区的西侧为荒川、南侧面向东京湾、北侧与葛饰区接壤。江户川区的中心地区由中川南北向贯穿，南部地区的葛西临海公园一带则主要为海埔新生地。</p><p>由于江户川区东西南侧面向河川和海洋，区内有非常多公园和绿地，例如河堤公园和葛西临海公园，这些绿地提供了当地居民非常多的户外活动选项，希望远离城市喧嚣的家庭非常适合在此悠闲生活。</p><p>除了公园绿地，房租低廉、适合养育子女以及前往东京市中心的便利通勤等条件也使江户川区发展成以家庭居住为主的行政区。该区大多数社区拥有安静住宅氛围，吸引许多追求较低住房成本的日本、中国、印度家庭搬到这里。</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-edogawa-01.png" alt="江户川区"></p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="2023之后的新景点"><a href="#2023之后的新景点" class="headerlink" title="2023之后的新景点"></a>2023之后的新景点</h3><p><a href="https://www.bring-you.info/zh-hans/harry-potter-studio-tour-tokyo">板桥区-阿利波特地方</a></p>]]></content>
    
    
    <summary type="html">日本旅游攻略系列</summary>
    
    
    
    <category term="旅游" scheme="http://smiecj.github.io/categories/%E6%97%85%E6%B8%B8/"/>
    
    <category term="日本" scheme="http://smiecj.github.io/categories/%E6%97%85%E6%B8%B8/%E6%97%A5%E6%9C%AC/"/>
    
    
    <category term="旅游" scheme="http://smiecj.github.io/tags/%E6%97%85%E6%B8%B8/"/>
    
    <category term="日本" scheme="http://smiecj.github.io/tags/%E6%97%A5%E6%9C%AC/"/>
    
    <category term="攻略" scheme="http://smiecj.github.io/tags/%E6%94%BB%E7%95%A5/"/>
    
  </entry>
  
  <entry>
    <title>ES数据同步到hive</title>
    <link href="http://smiecj.github.io/2023/06/10/emr-es-to-hive/"/>
    <id>http://smiecj.github.io/2023/06/10/emr-es-to-hive/</id>
    <published>2023-06-09T16:00:00.000Z</published>
    <updated>2023-06-10T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>来自用户的需求: 用户有一部分数据来自 elasticsearch ，我们已经支持了通过 presto 查询 es 数据。但是用户需要将 es 表 和 hive 表做关联查询，而 presto 是不能跨数据源进行 join 查询的。所以需要先把 es 数据导入到 hive 中</p><p>用户对数据同步周期的要求并不高 一天1-2次就可以了，所以继续使用我们emr集群中已有的 azkaban 服务进行调度，把 es 数据同步到 hive 的过程写到 azkaban 中，实现了7张表的定期同步</p><h2 id="hive-创建-es-外表"><a href="#hive-创建-es-外表" class="headerlink" title="hive 创建 es 外表"></a>hive 创建 es 外表</h2><p><a href="https://blog.csdn.net/baichoufei90/article/details/104246011">参考教程-Elasticsearch-Hive</a></p><h3 id="hive-引入-elasticsearch-hadoop-依赖包"><a href="#hive-引入-elasticsearch-hadoop-依赖包" class="headerlink" title="hive 引入 elasticsearch-hadoop 依赖包"></a>hive 引入 elasticsearch-hadoop 依赖包</h3><p>hive 默认不支持创建 es 外表，需要引入 <a href="https://mvnrepository.com/artifact/org.elasticsearch/elasticsearch-hadoop">elasticsearch-hadoop</a> 依赖包</p><p>修改 hive.aux.jars.path 配置, 多个可以用逗号分隔，如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive.aux.jars.path=file:///usr/hdp/2.6.3.0-235/hive/auxlib/elasticsearch-hadoop-hive-8.8.0.jar</span><br></pre></td></tr></table></figure><h3 id="创建-hive-外表"><a href="#创建-hive-外表" class="headerlink" title="创建 hive 外表"></a>创建 hive 外表</h3><p>sql 示例:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">EXTERNAL</span> <span class="keyword">TABLE</span> temp.es_external_table ( fieldNameA STRING, fieldNameB STRING ) STORED <span class="keyword">BY</span> <span class="string">&#x27;org.elasticsearch.hadoop.hive.EsStorageHandler&#x27;</span></span><br><span class="line">TBLPROPERTIES(</span><br><span class="line">    <span class="string">&#x27;es.resource&#x27;</span><span class="operator">=</span><span class="string">&#x27;es索引名&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;es.nodes&#x27;</span><span class="operator">=</span><span class="string">&#x27;es_host&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;es.port&#x27;</span><span class="operator">=</span><span class="string">&#x27;es_port&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;es.mapping.names&#x27;</span><span class="operator">=</span><span class="string">&#x27;fieldNameA:fieldNameA,fieldNameB:fieldNameB&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>这里踩了一个坑: 由于 hive 创建表会忽略大小写，不管 sql 中定义的字段是什么样子，都会统一转成小写。所以导致es 中的驼峰名称字段 会映射失败，最后查出的数据都是 null</p><p><a href="https://blog.csdn.net/qq_40999403/article/details/103929305">类似的坑</a>-创建mongodb 外表时遇到的</p><p>因此需要显式地通过 <strong>es.mapping.names</strong> 配置指定字段名称的关联关系，像示例那样</p><h2 id="同步脚本"><a href="#同步脚本" class="headerlink" title="同步脚本"></a>同步脚本</h2><p>从 es 表到 hive 表，大致步骤为: 创建 hive 外表，关联 es 数据 =&gt; 创建 hive 内表 =&gt; 同步外表数据到内表</p><p>过程写到脚本中如下: (create_hive_to_es_table.sh)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 获取指定索引的所有 es 表字段</span></span><br><span class="line">get_index_field_ret=`curl http://<span class="variable">$&#123;es_address&#125;</span>/<span class="variable">$&#123;index_name&#125;</span>?pretty=<span class="literal">true</span>`</span><br><span class="line">field_arr=`<span class="built_in">echo</span> <span class="variable">$&#123;get_index_field_ret&#125;</span> | jq -r <span class="string">&quot;.<span class="variable">$&#123;index_name&#125;</span>.mappings.properties | keys | join(\&quot; \&quot;)&quot;</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建 hive 外表</span></span><br><span class="line">temp_table_name=<span class="string">&quot;temp.es_<span class="variable">$&#123;index_name&#125;</span>&quot;</span></span><br><span class="line">temp_rename_table_name=<span class="string">&quot;<span class="variable">$&#123;hive_db&#125;</span>.es_<span class="variable">$&#123;index_name&#125;</span>_bak&quot;</span></span><br><span class="line">actual_table_name=<span class="string">&quot;<span class="variable">$&#123;hive_db&#125;</span>.es_<span class="variable">$&#123;index_name&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">create_external_table_sql=<span class="string">&quot;CREATE EXTERNAL TABLE <span class="variable">$&#123;temp_table_name&#125;</span> (&quot;</span></span><br><span class="line"><span class="keyword">for</span> current_field <span class="keyword">in</span> <span class="variable">$&#123;field_arr[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    create_external_table_sql=<span class="string">&quot;<span class="variable">$&#123;create_external_table_sql&#125;</span> <span class="variable">$&#123;current_field&#125;</span> STRING,&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">create_external_table_sql=`<span class="built_in">echo</span> <span class="variable">$&#123;create_external_table_sql&#125;</span> | sed <span class="string">&#x27;s/,$//g&#x27;</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment">### 组装 es.mapping.names</span></span><br><span class="line">create_external_table_sql=<span class="string">&quot;<span class="variable">$&#123;create_external_table_sql&#125;</span>) STORED BY &#x27;org.elasticsearch.hadoop.hive.EsStorageHandler&#x27; TBLPROPERTIES(&#x27;es.resource&#x27;=&#x27;<span class="variable">$&#123;index_name&#125;</span>&#x27;,&#x27;es.nodes&#x27;=&#x27;<span class="variable">$&#123;es_host&#125;</span>&#x27;,&#x27;es.port&#x27;=&#x27;<span class="variable">$&#123;es_port&#125;</span>&#x27;,&#x27;es.mapping.names&#x27;=&#x27;&quot;</span></span><br><span class="line"><span class="keyword">for</span> current_field <span class="keyword">in</span> <span class="variable">$&#123;field_arr[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    create_external_table_sql=<span class="string">&quot;<span class="variable">$&#123;create_external_table_sql&#125;</span><span class="variable">$&#123;current_field&#125;</span>:<span class="variable">$&#123;current_field&#125;</span>,&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">create_external_table_sql=`<span class="built_in">echo</span> <span class="variable">$&#123;create_external_table_sql&#125;</span> | sed <span class="string">&#x27;s/,$//g&#x27;</span>`</span><br><span class="line"></span><br><span class="line">create_external_table_sql=<span class="string">&quot;<span class="variable">$&#123;create_external_table_sql&#125;</span>&#x27;)&quot;</span></span><br><span class="line">drop_external_table_sql=<span class="string">&quot;drop table if exists <span class="variable">$&#123;temp_table_name&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;create external sql: <span class="variable">$&#123;create_external_table_sql&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">beeline -n <span class="variable">$&#123;hive_user&#125;</span> -u <span class="variable">$&#123;hive_server&#125;</span> -e <span class="string">&quot;<span class="variable">$&#123;drop_external_table_sql&#125;</span>&quot;</span></span><br><span class="line">beeline -n <span class="variable">$&#123;hive_user&#125;</span> -u <span class="variable">$&#123;hive_server&#125;</span> -e <span class="string">&quot;<span class="variable">$&#123;create_external_table_sql&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建 hive 临时内表</span></span><br><span class="line">create_temp_table_sql=<span class="string">&quot;CREATE TABLE <span class="variable">$&#123;temp_rename_table_name&#125;</span> AS SELECT * FROM <span class="variable">$&#123;temp_table_name&#125;</span>&quot;</span></span><br><span class="line">drop_temp_table_sql=<span class="string">&quot;drop table if exists <span class="variable">$&#123;temp_rename_table_name&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;create temp table sql: <span class="variable">$&#123;create_temp_table_sql&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">beeline -n <span class="variable">$&#123;hive_user&#125;</span> -u <span class="variable">$&#123;hive_server&#125;</span> -e <span class="string">&quot;<span class="variable">$&#123;drop_temp_table_sql&#125;</span>&quot;</span></span><br><span class="line">beeline -n <span class="variable">$&#123;hive_user&#125;</span> -u <span class="variable">$&#123;hive_server&#125;</span> -e <span class="string">&quot;<span class="variable">$&#123;create_temp_table_sql&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 重命名表（用于快速重建用户直接用的表）</span></span><br><span class="line"></span><br><span class="line">create_actual_table_sql=<span class="string">&quot;ALTER TABLE <span class="variable">$&#123;temp_rename_table_name&#125;</span> RENAME TO <span class="variable">$&#123;actual_table_name&#125;</span>&quot;</span></span><br><span class="line">drop_actual_table_sql=<span class="string">&quot;drop table if exists <span class="variable">$&#123;actual_table_name&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;create actual table sql: <span class="variable">$&#123;create_actual_table_sql&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">beeline -n <span class="variable">$&#123;hive_user&#125;</span> -u <span class="variable">$&#123;hive_server&#125;</span> -e <span class="string">&quot;<span class="variable">$&#123;drop_actual_table_sql&#125;</span>&quot;</span></span><br><span class="line">beeline -n <span class="variable">$&#123;hive_user&#125;</span> -u <span class="variable">$&#123;hive_server&#125;</span> -e <span class="string">&quot;<span class="variable">$&#123;create_actual_table_sql&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><h2 id="azkaban-任务"><a href="#azkaban-任务" class="headerlink" title="azkaban 任务"></a>azkaban 任务</h2><h3 id="定义任务流程"><a href="#定义任务流程" class="headerlink" title="定义任务流程"></a>定义任务流程</h3><p>需要重建7张表，因此定义成 父任务 -&gt; 7个子任务</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># es_to_hive_parent.job</span></span><br><span class="line"><span class="attr">type</span>=command</span><br><span class="line"></span><br><span class="line"><span class="attr">command</span>=echo <span class="string">&quot;es to hive success!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dependencies</span>=table1,table2,table3,table4,table5,table6,table7</span><br></pre></td></tr></table></figure><p>因为前面具体外表的创建流程 已经写在脚本中了，所以子任务这里直接调用 create_hive_to_es_table.sh 就行</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># table1.job</span></span><br><span class="line"><span class="attr">type</span>=flow</span><br><span class="line"></span><br><span class="line"><span class="attr">job.name</span>=table1</span><br><span class="line"><span class="attr">flow.name</span>=ES_TO_HIVE</span><br><span class="line"></span><br><span class="line"><span class="attr">index.name</span>=es索引名</span><br><span class="line"><span class="attr">hive_db</span>=目标 hive 库名</span><br><span class="line"></span><br><span class="line"><span class="comment"># ES_TO_HIVE.job</span></span><br><span class="line"><span class="attr">type</span>=command</span><br><span class="line"></span><br><span class="line"><span class="attr">command</span>=sh create_hive_to_es_table.sh <span class="variable">$&#123;es.address&#125;</span> <span class="variable">$&#123;index.name&#125;</span> <span class="variable">$&#123;hive.server&#125;</span> <span class="variable">$&#123;hive.user&#125;</span> <span class="variable">$&#123;hive.db&#125;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>基于目前的资料搜索 这种方案应该是 es数据同步到 hive 比较通用的。但是确实不适合大批量数据同步的场景，也不能直接同步增量数据</p><p>想同步增量数据的话 应该需要从数据源头入手了，比如 es 数据是来自 kafka 的，那么需要通过类似 canal 的服务来同步增量数据，架构和这里说到的远远不同</p>]]></content>
    
    
    <summary type="html">一次用户数据的处理过程</summary>
    
    
    
    <category term="大数据" scheme="http://smiecj.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="大数据" scheme="http://smiecj.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    <category term="emr" scheme="http://smiecj.github.io/tags/emr/"/>
    
    <category term="hive" scheme="http://smiecj.github.io/tags/hive/"/>
    
    <category term="azkaban" scheme="http://smiecj.github.io/tags/azkaban/"/>
    
  </entry>
  
  <entry>
    <title>【翻译】世界の秘密 歌曲鉴赏</title>
    <link href="http://smiecj.github.io/2023/05/07/vaundy-sekainohimitu/"/>
    <id>http://smiecj.github.io/2023/05/07/vaundy-sekainohimitu/</id>
    <published>2023-05-06T16:00:00.000Z</published>
    <updated>2023-06-21T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/Leegilq_cWkseBxgAg25fQ">本文公众号</a></p><p><a href="https://media.framu.world/columns/lyrics_consideration/sekainohimitsu">原文-世界の秘密【Vaundy】歌詞の意味を考察！世界の秘密に気づいても日々を楽しむ方法とは？</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这次我们来欣赏 Vaundy 于2020年12月创作的数字单曲 「世界の秘密」（世界的秘密）。这首后续被作为 大学生SNS 平台 「Dtto」的 CM 曲，WOWOW（日本第一家付费商业卫星电视台）的原创剧 「こころのフフフ」的主题曲，以及 マルハニチロ 冷冻食品公司的新中华街系列电视广告「こだわりが、見えてきた」的主题曲</p><div style="position: relative; padding: 30% 45%;"><iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="https://player.bilibili.com/player.html?id=357742772&bvid=BV1tX4y1q7bt&cid=1174643073&page=1&as_wide=1&high_quality=1&danmaku=1&autoplay=1" frameborder="no" scrolling="no"></iframe></div><h2 id="歌曲部分"><a href="#歌曲部分" class="headerlink" title="歌曲部分"></a>歌曲部分</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">きっと僕ら何かに追われてる</span><br><span class="line">漠然としてるけど</span><br><span class="line">四六時中グダグダと</span><br><span class="line">チクチクが流れる</span><br><span class="line">波に乗せて</span><br><span class="line">ネットサーフィン</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">一直在被什么推着前进的我们</span><br><span class="line">有时也会陷入迷茫</span><br><span class="line">即使这样，也会选择无所事事地度过一天</span><br><span class="line">任由不安的声音拂过耳边</span><br><span class="line">跟着网络的节奏</span><br><span class="line">思想随波逐流</span><br></pre></td></tr></table></figure><p>「世界の秘密」创作于新冠病毒盛行的2020年，当时社会呼吁民众非特殊情况不外出。也正因如此，在家过着孤单无聊、需要靠网络充实生活的人也更多了</p><p>不过即便是新冠之前，年轻人对网络产生依赖的社会问题也已经逐渐浮现出来了</p><p>被时间追赶着，被焦虑推怂着，离开了网络，仿佛就无法生存下去，这首歌主要描绘了这样一群人的样子。也揭示着这样的一种社会现象: 人们对社会形势、日常生活漠不关心，内心时而混乱，时而焦虑，时而感伤。也不限于年轻人，<strong>在当下社会中过得茫然而又不安，只能把内心寄托于网络世界的人们确实是越来越多了</strong></p><p><img src="/2023/05/07/vaundy-sekainohimitu/09.png" alt="MV画面"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">何か、これはあーだこーだ言って</span><br><span class="line">古臭いな</span><br><span class="line">それはそれで、なんだかんだ言って</span><br><span class="line">新しいな</span><br><span class="line">そんな無駄な繰り返しを、また繰り返して</span><br><span class="line">僕ら、生きていくうちに</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">我们总是说着 「啊，这不就是那个啥吗</span><br><span class="line">早就过气了呀」</span><br><span class="line">「咦，快看那个那个</span><br><span class="line">有点新意哦」</span><br><span class="line">就这样无聊的对话，重复来重复去</span><br><span class="line">我们就是按这种方式生活的吧</span><br></pre></td></tr></table></figure><p>接着第一句歌词「在被什么推着前进的我们」，这个东西是什么，相比「时间」来说，社会中的 「流行趋势」可能更加准确</p><p>更具体的，包括网络世界中的各种「话题」、「人气」（打榜）、SNS （social network software）上的 「点赞」等等</p><p><strong>我们每天都要从网络上接收庞大的信息量，（大脑不知疲倦地打着标签），脑海里无休止地做着 「那个是新事物，还是旧东西」的选择题，某种程度上也可以说是 「毫无意义的周而复始」</strong>罢了</p><p>不过，即使是过着日复一日和 SNS 深度绑定的生活，「我」注意到自己身上，还是发生了一些不起眼的变化</p><p><img src="/2023/05/07/vaundy-sekainohimitu/04.png" alt="MV画面"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">アイムソーリー</span><br><span class="line">気づいちゃったよ</span><br><span class="line">アイムソーリー</span><br><span class="line">気づいちゃったよ</span><br><span class="line">世界のこと</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">I am sorry</span><br><span class="line">我注意到了</span><br><span class="line">I am sorry</span><br><span class="line">我发现了</span><br><span class="line">关于世界的事情</span><br></pre></td></tr></table></figure><p>「我」在为 「发现了世界的事情」而“感到抱歉”</p><p>「世界的事情」也照应了歌名「世界的秘密」，不过虽然「我」发现了它，歌词中也没有直接说明是什么。顺着思路联想的话， 「我」或许是对「世界的起源、组成、运作和趋势」有点理解了</p><p>年少时候一直没有发现的「世界的事情」，直到长大（有了一些社会阅历）才理解一些事，那一瞬间多少会感到“遗憾”吧</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ステップだけ、ステップだけ、置いてきちゃってよ</span><br><span class="line">僕ら、涙に合わせて</span><br><span class="line">リズムに乗っている</span><br><span class="line">はず</span><br><span class="line">ステップだけ、ステップだけ、置いてきちゃっても</span><br><span class="line">僕ら、笑顔の数だけ</span><br><span class="line">ブレイクできるはず</span><br><span class="line">だから</span><br><span class="line">アイムソーリー</span><br><span class="line">気づいちゃっても</span><br><span class="line">アイムソーリー</span><br><span class="line">忘れといてよ</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">唯有前进，唯有前进，放下内心的烦恼</span><br><span class="line">我们啊，就是这样 感动落泪 感同身受</span><br><span class="line">才能跟着旋律，悠然起舞吧</span><br><span class="line">那么</span><br><span class="line">唯有向前，唯有向前，释放内心的负担</span><br><span class="line">我们啊，就是这样 无忧无虑 无数次欢笑</span><br><span class="line">才能了解自己，突破瓶颈吧</span><br><span class="line"></span><br><span class="line">所以啊</span><br><span class="line">I am sorry</span><br><span class="line">即使是注意到了</span><br><span class="line">I am sorry</span><br><span class="line">还是把它忘了吧</span><br></pre></td></tr></table></figure><p>本来很多道理都是简单易懂的，花上大篇幅去解释和表现，反而会适得其反，更难理解。Vaundy 就通过音乐的表现方式，将年轻人比较感性的社会问题通过自由的形式表现了出来</p><p>诸如「step、rhythm、break」这种舞蹈和音乐上的用语，向着同样依托着音乐之力生活下去的人们传递着自己的思考</p><p>思考之后，给出的就是面对这样一个网络世界的答案: 即使是在面对人生的一些重要阶段，比如一个难以迈过的台阶（step），<strong>即使是在这个过程充满着苦涩和悲伤，最后也一定能在某个时刻回身微笑</strong>。所以啊，即使世界上、社会上有让你在意的细枝末节，也请你忘记它们，继续前进</p><!----- bgm: 隐形的翅膀--><p><img src="/2023/05/07/vaundy-sekainohimitu/06.png" alt="MV画面"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">今日どっかで悪者が死んだらしい</span><br><span class="line">でもたくさんの命が救われたらしい</span><br><span class="line">正義と倫理と命を天秤にかけて</span><br><span class="line">量った声明で</span><br><span class="line">難しいことはもう分からない</span><br><span class="line">けれど</span><br><span class="line">実は僕らが悪者だったかもしれない</span><br><span class="line">なんて考えると</span><br><span class="line">彼の気持ちが分かるかもしれない</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">今天好像在哪里有“坏人”离开了世界</span><br><span class="line">但也有很多人的生命因此得救了</span><br><span class="line">我们总是端量着正义、伦理和生命的天平</span><br><span class="line">然后说出自己的见解</span><br><span class="line">复杂点的东西我也说不准</span><br><span class="line">然而</span><br><span class="line">我们是否也曾经站在了坏人那一边呢</span><br><span class="line">有时也这么想着</span><br><span class="line">也许就能理解那个人的心情了吧</span><br></pre></td></tr></table></figure><p>「让我们在疫情管控而百无聊赖的日子里，寻找一些和音乐相关的乐子吧」作者传达着这样的想法。不过有时候呢，本来「我」已经选择「忘记」的「世界的秘密」，还是会让我忍不住又去注意（它到底是什么）</p><p>这一段是对「世界的秘密」逐渐清晰的认识，对应着前面歌词的「感伤之中的笑容和乐趣」。「<strong>善恶的判断和区别并不是绝对的，而是相对的</strong>」，这些「善恶的价值判断」们，也是「世界组成」的一部分</p><p><img src="/2023/05/07/vaundy-sekainohimitu/07.png" alt="MV画面"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">アイムソーリー</span><br><span class="line">気づいちゃったよ</span><br><span class="line">アイムソーリー</span><br><span class="line">気づいちゃったよ</span><br><span class="line">自分のこと</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">I am sorry</span><br><span class="line">我注意到了哦</span><br><span class="line">I am sorry</span><br><span class="line">我发现了哦</span><br><span class="line">关于自己的秘密</span><br></pre></td></tr></table></figure><p>这一段的视角，从「世界」转向了「自己」。<strong>之前对「世界」的思考还是比较宏观的（正义、伦理、生命价值的思考，都是人类的价值取向），把视角缩小到「自身」之后，「我」也有了一些之前没有的见解</strong></p><p>小时候的「我」觉得「善恶的评判标准是绝对的」，认为「正义最后一定会邪恶」，但成了「大人」之后发现，即使是在「坏人」那边，有时也会存在「正义」的一面</p><p>「坏人死了，但是因为他的死，改变了一部分人的想法，从而拯救了他们」如果站在这种「伦理观」，会发现社会需要在人权问题上实现「生命平等」，其实是很难的</p><p>类似这样在「世界」各个国家，各个区域都存在的矛盾问题，在「自身」也会有类似的存在</p><p><img src="/2023/05/07/vaundy-sekainohimitu/11.png" alt="MV画面"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ステップだけ、ステップだけ、置いてきちゃってよ</span><br><span class="line">僕ら、涙に合わせて</span><br><span class="line">リズムに乗っている</span><br><span class="line">はず</span><br><span class="line">ステップだけ、ステップだけ、置いてきちゃっても</span><br><span class="line">僕ら、笑顔の数だけ</span><br><span class="line">ブレイクできるはず</span><br><span class="line">そうだろ？</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">唯有前进，唯有前进，放下内心的烦恼</span><br><span class="line">我们啊，就是这样 感动落泪 感同身受</span><br><span class="line">才能跟着旋律，悠然起舞吧</span><br><span class="line">那么</span><br><span class="line">唯有向前，唯有向前，释放内心的负担</span><br><span class="line">我们啊，就是这样 无忧无虑 无数次欢笑</span><br><span class="line">才能突破自己，创造未来</span><br><span class="line">就是这样的吧？</span><br></pre></td></tr></table></figure><p>和第一段副歌基本相同，「所以…把它忘了吧」变成了「就是这样的吧」</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">探してた未来に追いついて</span><br><span class="line">その時初めて気づいたんだ</span><br><span class="line">これが良い事か悪い事か</span><br><span class="line">これが「世界の秘密」ってやつか</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">向着曾经憧憬的未来追寻而去</span><br><span class="line">到那时，才终于发觉</span><br><span class="line">这种追求，到底是不是个好事呢</span><br><span class="line">这其实就是所谓的「世界的秘密」吧</span><br></pre></td></tr></table></figure><p>作者再对他所追求的「世界的秘密」说明了他的理解: 「<strong>善恶的评判只是相对的，世界就是不停地围绕着正义、伦理和生命的平衡而转</strong>」</p><p>「step」有「阶梯」的一层意味，这里Vaundy或许也表达着一种希望: 「<strong>登上了大人阶梯的我们，如果还能够保持那一份对世界的秘密 不那么深虑的童心，偶尔苦中作乐，欣赏音乐的同时不断寻求突破，那就更好了</strong>」</p><!--## 最后在这个通过「上网冲浪」就能知道「世界发生的事情」的时代，看起来获取一手信息更容易了，但反而因此感到混乱、迷茫的人也更多了随着日复一日的生活，脑海中日积月累地冒出越来越多伤心事情的时候，通过音乐让自己心情放松一些，就显得更加重要了不管发生了什么事，都让我们背起行囊，及时寻乐吧--><p><img src="/2023/05/07/vaundy-sekainohimitu/01.png" alt="MV画面"></p><h2 id="译者后言"><a href="#译者后言" class="headerlink" title="译者后言"></a>译者后言</h2><p>如今在网络媒体看到的各种时事热点，很多都自带着事物的「新旧」，思想的「善恶」，选择的「对错」等等标签，新闻和评论区的吵吵闹闹，仿佛都在让我们做个选择，一定要站队到某一边去</p><p>这种日复一日地打着标签、做着选择的生活，是不是偶尔跳出来看，把这些看似对立的标签放在一起，当作是人们的不同价值观而已。不论对错，而论这些价值观形成的原因，再从当事人角度出发，为什么现实中他做了这个选择，她又做了那种选择，能让我们更看得清这个「世界的秘密」呢</p><!--社会的复杂是不可能改变的，唯一能改变的就是自己。别人，但是自己想变成什么样还是可以决定的其他角度: 想起罗翔所说的，乌托邦的世界是不存在的，但是人类的意义就是去追求，去实现这样的乌托邦--><p><img src="/2023/05/07/vaundy-sekainohimitu/08.png" alt="MV画面"></p>]]></content>
    
    
    <summary type="html">网络世界的那些选择题们</summary>
    
    
    
    <category term="音乐" scheme="http://smiecj.github.io/categories/%E9%9F%B3%E4%B9%90/"/>
    
    <category term="Vaundy" scheme="http://smiecj.github.io/categories/%E9%9F%B3%E4%B9%90/Vaundy/"/>
    
    
    <category term="音乐" scheme="http://smiecj.github.io/tags/%E9%9F%B3%E4%B9%90/"/>
    
    <category term="日语" scheme="http://smiecj.github.io/tags/%E6%97%A5%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>一次内存爆的问题处理</title>
    <link href="http://smiecj.github.io/2023/04/30/emr-maintain-cmdincontainer/"/>
    <id>http://smiecj.github.io/2023/04/30/emr-maintain-cmdincontainer/</id>
    <published>2023-04-29T16:00:00.000Z</published>
    <updated>2023-04-29T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>又是到了周五下午，手忙脚乱的自己接到了以下几个需求</p><p>这次虽然没有给线上环境带来太严重的后果，只是和前端相关的服务一段时间的不可用，但是给的教训也足够深刻了</p><h3 id="当前-完善故障描述"><a href="#当前-完善故障描述" class="headerlink" title="当前: 完善故障描述"></a>当前: 完善故障描述</h3><h3 id="当前-总结到-tapd"><a href="#当前-总结到-tapd" class="headerlink" title="当前: 总结到 tapd"></a>当前: 总结到 tapd</h3><h2 id="背景-1"><a href="#背景-1" class="headerlink" title="背景"></a>背景</h2><p>数据从最原始的状态，可能是一个 excel，一个文本，或者是来自业务数据库的数据，格式各种各样，落地到<a href="https://www.oracle.com/cn/database/what-is-a-data-warehouse/">数据仓库</a>、<a href="https://www.sap.cn/products/technology-platform/hana/what-is-a-data-lake.html">数据湖</a>中，数据的同步过程 是必不可少的</p><p><img src="/16.png" alt="数据同步"></p><p><a href="https://www.cnblogs.com/liugp/p/17297756.html">图片来源</a></p><p>传统的数据同步方式主要是基于定时任务的模式，通过任务调度服务，每天定时将原始数据提取（<strong>extract</strong>），进行清洗处理，比如过滤掉重复数据（<strong>transform</strong>），最后存入数仓（<strong>load</strong>），即 <a href="https://www.ibm.com/cn-zh/topics/etl">ETL</a> 任务模式。这种模式对数据的实时性要求不高，常见的同步工具有 datax、sqoop</p><p><img src="/17.png" alt="ETL"></p><p>实时同步，则需要让同步任务一直处于运行状态，有新数据进来需要在<strong>秒级别内</strong>更新。这种情况下传统的调度模式就不能满足了，需要能时刻监测数据同步状态、管理和启停任务、甚至动态分配任务资源。一种常见的模式是 任务通过 <strong>spark / flink</strong> 等流式任务引擎去执行，然后在上层通过 k8s 或其他任务管理平台 进行调度</p><p>本质上实时同步数据的模式和 ETL 是一样的，对数据依然有 抽取、清洗和写入的操作。只是<strong>时效性、任务管理复杂度、资源动态分配能力</strong>上，要求会更高</p><p><img src="/18.png" alt="流批一体"></p><p><a href="https://zhuanlan.zhihu.com/p/531318115">图片来源-DataFunTalk：阿里建设一站式实时数仓的经验分享</a></p><p>搭建可以在公司内通用的 EMR 平台，除了满足数据同步的功能，还需要提供任务调度的功能，因为用户的任务各种各样，可能是自定义的 spark / flink 任务，python 脚本 对数据自行处理的任务 等等，所以需要提供能让用户自行上传任务、执行任务的平台</p><p><img src="/19.png" alt="xxl-job"></p><p><a href="https://www.cnblogs.com/gaoqiaoliangjie/p/15390703.html">图片来源-xxl-job工作原理解析</a></p><p>不过相比数据同步 离线和实时同步架构相差较大，任务调度平台架构的发展则不离其宗，基本变化不大</p><p>本文将会对业界主流的任务调度服务 和 数据同步服务 做一些介绍，大家可以参考，择优选择更适合自己业务需求的服务 进行尝试</p><h2 id="任务调度组件"><a href="#任务调度组件" class="headerlink" title="任务调度组件"></a>任务调度组件</h2><p>这里列举三个主流的任务调度服务: <a href="https://github.com/azkaban/azkaban">azkaban</a>、<a href="https://github.com/apache/airflow">airflow</a> 和 <a href="https://github.com/apache/dolphinscheduler">dolphinscheduler</a>。我们先分别看基于这三个组件 数仓的架构可能是什么样的，然后系统对比，最后大致看下使用页面</p><h3 id="传统离线数仓-azkaban"><a href="#传统离线数仓-azkaban" class="headerlink" title="传统离线数仓: azkaban"></a>传统离线数仓: azkaban</h3><p><img src="/01.png" alt="离线数仓"></p><p><a href="https://winway.github.io/2022/05/24/bigdata-stack-dw">大数据开发之路-离线数仓</a></p><h3 id="实时离线融合-airflow"><a href="#实时离线融合-airflow" class="headerlink" title="实时离线融合: airflow"></a>实时离线融合: airflow</h3><p><img src="/02.png" alt="airflow"></p><p><a href="https://kids-first.github.io/kf-airflow-dags/warehouse.html">Data Warehouse</a></p><h3 id="实时离线融合-dolphinscheduler"><a href="#实时离线融合-dolphinscheduler" class="headerlink" title="实时离线融合: dolphinscheduler"></a>实时离线融合: dolphinscheduler</h3><p><img src="/03.png" alt="dolphinscheduler"></p><p><a href="https://blog.csdn.net/weixin_42138677/article/details/119685577">基于DolphinScheduler的使用浅谈数仓分层及模型设计</a></p><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p><a href="https://cloud.tencent.com/developer/article/1979180">大数据调度平台分类大对比(Oozie/Azkaban/AirFlow/XXL-Job/DolphinScheduler)</a></p><p><a href="https://blog.csdn.net/kyle0349/article/details/108947115">【大数据】【调度】Airflow 和 Azkaban的选型</a></p><table><thead><tr><th>特性\组件</th><th>airflow</th><th>dolphinscheduler</th><th>azkaban</th></tr></thead><tbody><tr><td>web界面</td><td>有，功能比较多</td><td>有，且支持中文</td><td>有，比较简单</td></tr><tr><td>工作流语法</td><td>python代码内定义，可通过界面查看但不能编辑</td><td>可视化编辑，对小白很友好，但不适合通过代码编排</td><td>配置文件</td></tr><tr><td>跨dag/project依赖</td><td>支持，可通过 <a href="https://airflow.apache.org/docs/apache-airflow/stable/howto/operator/external_task_sensor.html">ExternalTaskSensor</a> 配置</td><td>不支持</td><td>不支持</td></tr><tr><td>易用程度</td><td>安装和维护上手难度高，<a href="https://airflow.apache.org/docs/apache-airflow/stable/core-concepts/overview.html">组件</a>包括 WebServer、Scheduler、Worker</td><td>安装维护上手难度高，<a href="https://dolphinscheduler.apache.org/zh-cn/docs/3.1.5/about/glossary">组件</a>包括 master、api、alert、worker 等，不过界面支持中文，可视化编辑任务比较友好</td><td>上手难度低，只有 webserver、executor 两个组件</td></tr><tr><td>变量定义</td><td>支持全局参数，和一些内置模板变量，如 </td><td>不支持全局变量</td><td>不支持全局变量</td></tr><tr><td>调度中心HA</td><td><a href="https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/scheduler.html#running-more-than-one-scheduler">支持</a> ，对 db 版本有要求（mysql &gt;= 8）</td><td>支持</td><td><a href="https://github.com/azkaban/azkaban/issues/952">不支持</a></td></tr><tr><td>执行器HA</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>权限管控</td><td>支持用户、任务级别配置</td><td>用户角色支持管理员、普通用户两种，不支持项目层级配置</td><td>支持用户、任务级别配置</td></tr><tr><td>任务监控</td><td>可通过定义 <a href="https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/callbacks.html">on_failure_callback</a> 在任务结束后触发提醒，<a href="https://feijin.github.io/2021/03/14/airflow-alert-example/">示例</a>，支持<a href="https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/metrics.html">metrics</a></td><td><a href="https://dolphinscheduler.apache.org/zh-cn/docs/3.1.5/guide/alert/alert_plugin_user_guide">支持任务告警</a>，支持通过企业微信、飞书等方式发送</td><td>可配置 job 的 failure.emails 让任务失败后发送邮件提醒</td></tr></tbody></table><p>总结: ds 对各种 ETL 任务类型的界面化配置支持更好，airflow 更适合 python 基础较好的团队使用，编排任务代码化 笔者认为也是一种趋势。azkaban 较为传统，使用起来更简单，也更适合定义流程简单的 ETL 任务，但是相比前两个组件，更新不是特别活跃</p><h3 id="airflow-架构和界面"><a href="#airflow-架构和界面" class="headerlink" title="airflow 架构和界面"></a>airflow 架构和界面</h3><p><img src="/04.png" alt="airflow"></p><p><img src="/05.png" alt="airflow"></p><p><a href="https://airflow.apache.org/docs/apache-airflow/stable/core-concepts/overview.html">Architecture Overview</a></p><h3 id="dolphinscheduler-界面"><a href="#dolphinscheduler-界面" class="headerlink" title="dolphinscheduler 界面"></a>dolphinscheduler 界面</h3><p><img src="/06.png" alt="dolphinscheduler"></p><h3 id="azkaban-架构和界面"><a href="#azkaban-架构和界面" class="headerlink" title="azkaban 架构和界面"></a>azkaban 架构和界面</h3><p><img src="/07.png" alt="azkaban"></p><p><img src="/08.png" alt="azkaban"></p><p><a href="https://www.hnbian.cn/posts/5d59c988.html">1. Azkaban 介绍</a></p><h2 id="数据同步组件"><a href="#数据同步组件" class="headerlink" title="数据同步组件"></a>数据同步组件</h2><p>对数据同步而言，支持更多的数据源是更重要的，传统数据同步工具，如 <a href="https://github.com/apache/sqoop">sqoop</a>、<a href="https://github.com/alibaba/DataX">datax</a> ，都是对基于hadoop的传统数仓、基于关系型数据库 支持更好，不过对更现代的 <a href="https://en.wikipedia.org/wiki/Online_analytical_processing">OLAP</a>、甚至<a href="https://www.oracle.com/cn/big-data/what-is-data-lakehouse">湖仓一体</a>的架构支持并不够好</p><p>随着发展，功能更强大的同步组件 如 <a href="https://github.com/apache/incubator-seatunnel">seatunnel</a>、<a href="https://github.com/DTStack/chunjun">chunjun</a> 也逐渐占有了一席之地，在业务使用实际场景中可以优先选择它们</p><h3 id="sqoop"><a href="#sqoop" class="headerlink" title="sqoop"></a>sqoop</h3><p><img src="/09.png" alt="sqoop"></p><p><a href="https://blog.csdn.net/mamamalululu00000000/article/details/100013482">Sqoop原理和架构</a></p><p><a href="https://www.jianshu.com/p/23ec3a386dc9">【知识】ETL大数据集成工具Sqoop、dataX、Kettle、Canal、StreamSets大比拼</a></p><p>特点：</p><ul><li>离线全量同步，不支持增量导入</li><li>仅支持关系型数据库，比如从 mysql 同步到 hive</li><li>任务运行方式: mapreduce</li></ul><h3 id="datax"><a href="#datax" class="headerlink" title="datax"></a>datax</h3><p><img src="/10.png" alt="datax"></p><p><a href="https://github.com/alibaba/DataX/blob/master/introduction.md">阿里云开源离线同步工具DataX3.0介绍</a></p><p><img src="/11.png" alt="datax"></p><p><a href="https://dengchuncui.github.io/2020/10/22/%E3%80%90%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E3%80%91DATAX%20%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/">数据同步 DATAX 工作原理及源码解读</a></p><p>特点：</p><ul><li>相比 sqoop 支持的数据源更丰富，支持非关系型数据库（如从 mysql 写到 hdfs、mongodb、es 等） </li><li>表字段的映射，必须提前写成json配置</li><li>同步任务在单节点运行（在执行 datax 的节点运行）</li></ul><h3 id="canal"><a href="#canal" class="headerlink" title="canal"></a>canal</h3><p><img src="/12.png" alt="canal"></p><p><a href="https://www.cnblogs.com/caoweixiong/p/11824423.html">Canal——原理架构及应用场景</a></p><p>特点：</p><ul><li>只能同步增量数据（本质：模拟 mysql slave 进行数据同步）</li><li>支持数据源: kafka、rocketmq、hbase、elasticsearch</li><li>实时任务管理：需要单独部署管理服务，如 cloudin-datax、Canal Admin</li></ul><h3 id="datalink"><a href="#datalink" class="headerlink" title="datalink"></a>datalink</h3><p><img src="/13.png" alt="datalink"></p><p><a href="https://github.com/ucarGroup/DataLink">git-ucarGroup/DataLink</a></p><p>特点：</p><ul><li>支持增量数据同步任务的管理，基本任务启停、同步状态检查等</li><li>对 canal 、datax 等同步工具进行了封装，支持数据源: mysql、hbase、elasticsearch、kafka、kudu</li><li>神州租车开源，现在不再维护，不过基本功能比较完善</li></ul><p><a href="https://mp.weixin.qq.com/s?__biz=MzkwOTIxNDQ3OA==&mid=2247533077&idx=1&sn=2034a6897883e149b350b39facc98f6a&source=41#wechat_redirect">神州优车数据交换平台的架构、建设与痛点难点详解</a></p><h3 id="seatunnel"><a href="#seatunnel" class="headerlink" title="seatunnel"></a>seatunnel</h3><p><img src="/14.png" alt="seatunnel"></p><p><a href="https://www.cnblogs.com/liugp/p/17297756.html">【大数据】什么是数据集成？（SeaTunnel 集成工具介绍）</a></p><p>特点：</p><ul><li>通过spark / flink 方式同步数据，支持更多现代数据源（clickhouse、doris、iceberg 等）</li><li>UI 还不是很完善</li><li>笔者后续会更详细地体验这个工具，补充和更多实时同步组件的使用对比</li></ul><h3 id="airbyte"><a href="#airbyte" class="headerlink" title="airbyte"></a>airbyte</h3><p><img src="/15.png" alt="airbyte"></p><p><a href="https://docs.airbyte.com/understanding-airbyte/high-level-view">Architecture overview</a></p><p>特点：</p><ul><li>完全云原生化的数据同步服务，一个同步任务对应一个容器</li><li>适用ETL 场景（配置定时任务，最小周期<a href="https://discuss.airbyte.io/t/does-airbyte-sync-near-real-time-or-streaming-syncs/354">5分钟</a>，并不是完全实时）</li><li>上手难度高，学有余力可以尝试</li></ul><h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><p>对于任务调度平台来说，本质上都是 <strong>定时 + 触发任务 + 管理任务</strong> 的使用机制，基本架构都离不开 <strong>scheduler + task worker</strong>，相差不大</p><p>但对于数据同步组件来说，现在有一种离线往实时迁移的趋势。所以 诸如 sqoop、datax 这种传统离线数据同步方式应该会逐渐淡出，相比较，seatunnel 、 airbyte 这种后起之秀 一定会越来越强大。不过，实时也意味着需要更灵活的资源分配方式，需要掌握更深的技术栈，对开发人员要求也会更高</p><p>Anyway，所有大数据架构的底层都是存储。数据如果是存放在 hdfs + hive 这种传统数仓架构，对实时性要求不高，那么 sqoop + azkaban / airflow 模式就完全足够了。数据需要存放在 clickhouse / kudu 这种 OLAP 存储，业务需要获取实时数据进行分析，那么就需要 seatunnel 这种实时同步的服务。没有绝对的哪个更好，只有更合适</p>]]></content>
    
    
    <summary type="html">大数据集群维护的问题处理</summary>
    
    
    
    <category term="大数据" scheme="http://smiecj.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="大数据" scheme="http://smiecj.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    <category term="emr" scheme="http://smiecj.github.io/tags/emr/"/>
    
  </entry>
  
  <entry>
    <title>大数据任务调度和数据同步组件初探</title>
    <link href="http://smiecj.github.io/2023/04/30/emr-scheduler/"/>
    <id>http://smiecj.github.io/2023/04/30/emr-scheduler/</id>
    <published>2023-04-29T16:00:00.000Z</published>
    <updated>2023-04-29T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/xiaoliizi/article/details/130569690">本文csdn博客地址</a><br><a href="https://mp.weixin.qq.com/s/peTA227Wt336hWj14wWKwg">本文公众号地址</a></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>数据从最原始的状态，可能是一个 excel，一个文本，或者是来自业务数据库的数据，格式各种各样，落地到<a href="https://www.oracle.com/cn/database/what-is-a-data-warehouse/">数据仓库</a>、<a href="https://www.sap.cn/products/technology-platform/hana/what-is-a-data-lake.html">数据湖</a>中，数据的同步过程 是必不可少的</p><p><img src="/2023/04/30/emr-scheduler/16.png" alt="数据同步"></p><p><a href="https://www.cnblogs.com/liugp/p/17297756.html">图片来源</a></p><p>传统的数据同步方式主要是基于定时任务的模式，通过任务调度服务，每天定时将原始数据提取（<strong>extract</strong>），进行清洗处理，比如过滤掉重复数据（<strong>transform</strong>），最后存入数仓（<strong>load</strong>），即 <a href="https://www.ibm.com/cn-zh/topics/etl">ETL</a> 任务模式。这种模式对数据的实时性要求不高，常见的同步工具有 datax、sqoop</p><p><img src="/2023/04/30/emr-scheduler/17.png" alt="ETL"></p><p>实时同步，则需要让同步任务一直处于运行状态，有新数据进来需要在<strong>秒级别内</strong>更新。这种情况下传统的调度模式就不能满足了，需要能时刻监测数据同步状态、管理和启停任务、甚至动态分配任务资源。一种常见的模式是 任务通过 <strong>spark / flink</strong> 等流式任务引擎去执行，然后在上层通过 k8s 或其他任务管理平台 进行调度</p><p>本质上实时同步数据的模式和 ETL 是一样的，对数据依然有 抽取、清洗和写入的操作。只是<strong>时效性、任务管理复杂度、资源动态分配能力</strong>上，要求会更高</p><p><img src="/2023/04/30/emr-scheduler/18.png" alt="流批一体"></p><p><a href="https://zhuanlan.zhihu.com/p/531318115">图片来源-DataFunTalk：阿里建设一站式实时数仓的经验分享</a></p><p>搭建可以在公司内通用的 EMR 平台，除了满足数据同步的功能，还需要提供任务调度的功能，因为用户的任务各种各样，可能是自定义的 spark / flink 任务，python 脚本 对数据自行处理的任务 等等，所以需要提供能让用户自行上传任务、执行任务的平台</p><p><img src="/2023/04/30/emr-scheduler/19.png" alt="xxl-job"></p><p><a href="https://www.cnblogs.com/gaoqiaoliangjie/p/15390703.html">图片来源-xxl-job工作原理解析</a></p><p>不过相比数据同步 离线和实时同步架构相差较大，任务调度平台架构的发展则不离其宗，基本变化不大</p><p>本文将会对业界主流的任务调度服务 和 数据同步服务 做一些介绍，大家可以参考，择优选择更适合自己业务需求的服务 进行尝试</p><h2 id="任务调度组件"><a href="#任务调度组件" class="headerlink" title="任务调度组件"></a>任务调度组件</h2><p>这里列举三个主流的任务调度服务: <a href="https://github.com/azkaban/azkaban">azkaban</a>、<a href="https://github.com/apache/airflow">airflow</a> 和 <a href="https://github.com/apache/dolphinscheduler">dolphinscheduler</a>。我们先分别看基于这三个组件 数仓的架构可能是什么样的，然后系统对比，最后大致看下使用页面</p><h3 id="传统离线数仓-azkaban"><a href="#传统离线数仓-azkaban" class="headerlink" title="传统离线数仓: azkaban"></a>传统离线数仓: azkaban</h3><p><img src="/2023/04/30/emr-scheduler/01.png" alt="离线数仓"></p><p><a href="https://winway.github.io/2022/05/24/bigdata-stack-dw">大数据开发之路-离线数仓</a></p><h3 id="实时离线融合-airflow"><a href="#实时离线融合-airflow" class="headerlink" title="实时离线融合: airflow"></a>实时离线融合: airflow</h3><p><img src="/2023/04/30/emr-scheduler/02.png" alt="airflow"></p><p><a href="https://kids-first.github.io/kf-airflow-dags/warehouse.html">Data Warehouse</a></p><h3 id="实时离线融合-dolphinscheduler"><a href="#实时离线融合-dolphinscheduler" class="headerlink" title="实时离线融合: dolphinscheduler"></a>实时离线融合: dolphinscheduler</h3><p><img src="/2023/04/30/emr-scheduler/03.png" alt="dolphinscheduler"></p><p><a href="https://blog.csdn.net/weixin_42138677/article/details/119685577">基于DolphinScheduler的使用浅谈数仓分层及模型设计</a></p><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p><a href="https://cloud.tencent.com/developer/article/1979180">大数据调度平台分类大对比(Oozie/Azkaban/AirFlow/XXL-Job/DolphinScheduler)</a></p><p><a href="https://blog.csdn.net/kyle0349/article/details/108947115">【大数据】【调度】Airflow 和 Azkaban的选型</a></p><table><thead><tr><th>特性\组件</th><th>airflow</th><th>dolphinscheduler</th><th>azkaban</th></tr></thead><tbody><tr><td>web界面</td><td>有，功能比较多</td><td>有，且支持中文</td><td>有，比较简单</td></tr><tr><td>工作流语法</td><td>python代码内定义，可通过界面查看但不能编辑</td><td>可视化编辑，对小白很友好，但不适合通过代码编排</td><td>配置文件</td></tr><tr><td>跨dag/project依赖</td><td>支持，可通过 <a href="https://airflow.apache.org/docs/apache-airflow/stable/howto/operator/external_task_sensor.html">ExternalTaskSensor</a> 配置</td><td>不支持</td><td>不支持</td></tr><tr><td>易用程度</td><td>安装和维护上手难度高，<a href="https://airflow.apache.org/docs/apache-airflow/stable/core-concepts/overview.html">组件</a>包括 WebServer、Scheduler、Worker</td><td>安装维护上手难度高，<a href="https://dolphinscheduler.apache.org/zh-cn/docs/3.1.5/about/glossary">组件</a>包括 master、api、alert、worker 等，不过界面支持中文，可视化编辑任务比较友好</td><td>上手难度低，只有 webserver、executor 两个组件</td></tr><tr><td>变量定义</td><td>支持全局参数，和一些内置模板变量，如 </td><td>不支持全局变量</td><td>不支持全局变量</td></tr><tr><td>调度中心HA</td><td><a href="https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/scheduler.html#running-more-than-one-scheduler">支持</a> ，对 db 版本有要求（mysql &gt;= 8）</td><td>支持</td><td><a href="https://github.com/azkaban/azkaban/issues/952">不支持</a></td></tr><tr><td>执行器HA</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>权限管控</td><td>支持用户、任务级别配置</td><td>用户角色支持管理员、普通用户两种，不支持项目层级配置</td><td>支持用户、任务级别配置</td></tr><tr><td>任务监控</td><td>可通过定义 <a href="https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/callbacks.html">on_failure_callback</a> 在任务结束后触发提醒，<a href="https://feijin.github.io/2021/03/14/airflow-alert-example/">示例</a>，支持<a href="https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/metrics.html">metrics</a></td><td><a href="https://dolphinscheduler.apache.org/zh-cn/docs/3.1.5/guide/alert/alert_plugin_user_guide">支持任务告警</a>，支持通过企业微信、飞书等方式发送</td><td>可配置 job 的 failure.emails 让任务失败后发送邮件提醒</td></tr></tbody></table><p>总结: ds 对各种 ETL 任务类型的界面化配置支持更好，airflow 更适合 python 基础较好的团队使用，编排任务代码化 笔者认为也是一种趋势。azkaban 较为传统，使用起来更简单，也更适合定义流程简单的 ETL 任务，但是相比前两个组件，更新不是特别活跃</p><h3 id="airflow-架构和界面"><a href="#airflow-架构和界面" class="headerlink" title="airflow 架构和界面"></a>airflow 架构和界面</h3><p><img src="/2023/04/30/emr-scheduler/04.png" alt="airflow"></p><p><img src="/2023/04/30/emr-scheduler/05.png" alt="airflow"></p><p><a href="https://airflow.apache.org/docs/apache-airflow/stable/core-concepts/overview.html">Architecture Overview</a></p><h3 id="dolphinscheduler-界面"><a href="#dolphinscheduler-界面" class="headerlink" title="dolphinscheduler 界面"></a>dolphinscheduler 界面</h3><p><img src="/2023/04/30/emr-scheduler/06.png" alt="dolphinscheduler"></p><h3 id="azkaban-架构和界面"><a href="#azkaban-架构和界面" class="headerlink" title="azkaban 架构和界面"></a>azkaban 架构和界面</h3><p><img src="/2023/04/30/emr-scheduler/07.png" alt="azkaban"></p><p><img src="/2023/04/30/emr-scheduler/08.png" alt="azkaban"></p><p><a href="https://www.hnbian.cn/posts/5d59c988.html">1. Azkaban 介绍</a></p><h2 id="数据同步组件"><a href="#数据同步组件" class="headerlink" title="数据同步组件"></a>数据同步组件</h2><p>对数据同步而言，支持更多的数据源是更重要的，传统数据同步工具，如 <a href="https://github.com/apache/sqoop">sqoop</a>、<a href="https://github.com/alibaba/DataX">datax</a> ，都是对基于hadoop的传统数仓、基于关系型数据库 支持更好，不过对更现代的 <a href="https://en.wikipedia.org/wiki/Online_analytical_processing">OLAP</a>、甚至<a href="https://www.oracle.com/cn/big-data/what-is-data-lakehouse">湖仓一体</a>的架构支持并不够好</p><p>随着发展，功能更强大的同步组件 如 <a href="https://github.com/apache/incubator-seatunnel">seatunnel</a>、<a href="https://github.com/DTStack/chunjun">chunjun</a> 也逐渐占有了一席之地，在业务使用实际场景中可以优先选择它们</p><h3 id="sqoop"><a href="#sqoop" class="headerlink" title="sqoop"></a>sqoop</h3><p><img src="/2023/04/30/emr-scheduler/09.png" alt="sqoop"></p><p><a href="https://blog.csdn.net/mamamalululu00000000/article/details/100013482">Sqoop原理和架构</a></p><p><a href="https://www.jianshu.com/p/23ec3a386dc9">【知识】ETL大数据集成工具Sqoop、dataX、Kettle、Canal、StreamSets大比拼</a></p><p>特点：</p><ul><li>离线全量同步，不支持增量导入</li><li>仅支持关系型数据库，比如从 mysql 同步到 hive</li><li>任务运行方式: mapreduce</li></ul><h3 id="datax"><a href="#datax" class="headerlink" title="datax"></a>datax</h3><p><img src="/2023/04/30/emr-scheduler/10.png" alt="datax"></p><p><a href="https://github.com/alibaba/DataX/blob/master/introduction.md">阿里云开源离线同步工具DataX3.0介绍</a></p><p><img src="/2023/04/30/emr-scheduler/11.png" alt="datax"></p><p><a href="https://dengchuncui.github.io/2020/10/22/%E3%80%90%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E3%80%91DATAX%20%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/">数据同步 DATAX 工作原理及源码解读</a></p><p>特点：</p><ul><li>相比 sqoop 支持的数据源更丰富，支持非关系型数据库（如从 mysql 写到 hdfs、mongodb、es 等） </li><li>表字段的映射，必须提前写成json配置</li><li>同步任务在单节点运行（在执行 datax 的节点运行）</li></ul><h3 id="canal"><a href="#canal" class="headerlink" title="canal"></a>canal</h3><p><img src="/2023/04/30/emr-scheduler/12.png" alt="canal"></p><p><a href="https://www.cnblogs.com/caoweixiong/p/11824423.html">Canal——原理架构及应用场景</a></p><p>特点：</p><ul><li>只能同步增量数据（本质：模拟 mysql slave 进行数据同步）</li><li>支持数据源: kafka、rocketmq、hbase、elasticsearch</li><li>实时任务管理：需要单独部署管理服务，如 cloudin-datax、Canal Admin</li></ul><h3 id="datalink"><a href="#datalink" class="headerlink" title="datalink"></a>datalink</h3><p><img src="/2023/04/30/emr-scheduler/13.png" alt="datalink"></p><p><a href="https://github.com/ucarGroup/DataLink">git-ucarGroup/DataLink</a></p><p>特点：</p><ul><li>支持增量数据同步任务的管理，基本任务启停、同步状态检查等</li><li>对 canal 、datax 等同步工具进行了封装，支持数据源: mysql、hbase、elasticsearch、kafka、kudu</li><li>神州租车开源，现在不再维护，不过基本功能比较完善</li></ul><p><a href="https://mp.weixin.qq.com/s?__biz=MzkwOTIxNDQ3OA==&mid=2247533077&idx=1&sn=2034a6897883e149b350b39facc98f6a&source=41#wechat_redirect">神州优车数据交换平台的架构、建设与痛点难点详解</a></p><h3 id="seatunnel"><a href="#seatunnel" class="headerlink" title="seatunnel"></a>seatunnel</h3><p><img src="/2023/04/30/emr-scheduler/14.png" alt="seatunnel"></p><p><a href="https://www.cnblogs.com/liugp/p/17297756.html">【大数据】什么是数据集成？（SeaTunnel 集成工具介绍）</a></p><p>特点：</p><ul><li>通过spark / flink 方式同步数据，支持更多现代数据源（clickhouse、doris、iceberg 等）</li><li>UI 还不是很完善</li><li>笔者后续会更详细地体验这个工具，补充和更多实时同步组件的使用对比</li></ul><h3 id="airbyte"><a href="#airbyte" class="headerlink" title="airbyte"></a>airbyte</h3><p><img src="/2023/04/30/emr-scheduler/15.png" alt="airbyte"></p><p><a href="https://docs.airbyte.com/understanding-airbyte/high-level-view">Architecture overview</a></p><p>特点：</p><ul><li>完全云原生化的数据同步服务，一个同步任务对应一个容器</li><li>适用ETL 场景（配置定时任务，最小周期<a href="https://discuss.airbyte.io/t/does-airbyte-sync-near-real-time-or-streaming-syncs/354">5分钟</a>，并不是完全实时）</li><li>上手难度高，学有余力可以尝试</li></ul><h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><p>对于任务调度平台来说，本质上都是 <strong>定时 + 触发任务 + 管理任务</strong> 的使用机制，基本架构都离不开 <strong>scheduler + task worker</strong>，相差不大</p><p>但对于数据同步组件来说，现在有一种离线往实时迁移的趋势。所以 诸如 sqoop、datax 这种传统离线数据同步方式应该会逐渐淡出，相比较，seatunnel 、 airbyte 这种后起之秀 一定会越来越强大。不过，实时也意味着需要更灵活的资源分配方式，需要掌握更深的技术栈，对开发人员要求也会更高</p><p>Anyway，所有大数据架构的底层都是存储。数据如果是存放在 hdfs + hive 这种传统数仓架构，对实时性要求不高，那么 sqoop + azkaban / airflow 模式就完全足够了。数据需要存放在 clickhouse / kudu 这种 OLAP 存储，业务需要获取实时数据进行分析，那么就需要 seatunnel 这种实时同步的服务。没有绝对的哪个更好，只有更合适</p>]]></content>
    
    
    <summary type="html">大数据组件调研</summary>
    
    
    
    <category term="大数据" scheme="http://smiecj.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="大数据" scheme="http://smiecj.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    <category term="emr" scheme="http://smiecj.github.io/tags/emr/"/>
    
  </entry>
  
  <entry>
    <title>不妨与众不同</title>
    <link href="http://smiecj.github.io/2023/04/17/tomoo-rashiku/"/>
    <id>http://smiecj.github.io/2023/04/17/tomoo-rashiku/</id>
    <published>2023-04-16T16:00:00.000Z</published>
    <updated>2023-04-16T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/tn5yrKOxwKbg7vxFuwO3cg">本文公众号</a></p><h2 id="歌词和翻译"><a href="#歌词和翻译" class="headerlink" title="歌词和翻译"></a>歌词和翻译</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">あの服に 釘付けなのに</span><br><span class="line">なんでまた 後ずさり</span><br><span class="line">僕じゃなくて服が僕をきちゃいそう</span><br><span class="line"></span><br><span class="line">对那件衣服，突然有点爱不释手</span><br><span class="line">但为什么之后又临阵退却</span><br><span class="line">仿佛穿上之后就不是我自己了</span><br><span class="line"></span><br><span class="line">やーやー 続けてみれば</span><br><span class="line">みんなから慣れてくるのさ</span><br><span class="line">おしゃれボーイはそうそそのかしてた</span><br><span class="line"></span><br><span class="line">呀，不过再多保持这种风格的话</span><br><span class="line">大家说不定就能习惯了吧</span><br><span class="line">对面那位帅哥，似乎还在邀请我共舞呢</span><br><span class="line"></span><br><span class="line">らしくもなくたっていいでしょう</span><br><span class="line">着こなせるか NO かはあとじゃない鏡をにらんで迷ううちに</span><br><span class="line">You, your, you, I my, me</span><br><span class="line">季節が変わるよ</span><br><span class="line"></span><br><span class="line">不妨与众不同</span><br><span class="line">合身 Yes or No，这问题就先抛到一边去吧</span><br><span class="line">面对镜子前精心装扮的自己，陶醉之时</span><br><span class="line">身边无数的你和我</span><br><span class="line">还有窗外的季节，仿佛都在改变</span><br><span class="line"></span><br><span class="line">昨日までの僕がこうなら</span><br><span class="line">今日もこうじゃなくちゃ</span><br><span class="line">なんてな訳ないな引っ張られなくていい</span><br><span class="line"></span><br><span class="line">昨天的我是这种风格</span><br><span class="line">今天的我想尝试非同寻常</span><br><span class="line">这种太过勉强的执念，就暂时放在一边好啦</span><br><span class="line"></span><br><span class="line">「あの人」になりたいんじゃない</span><br><span class="line">「パーフェクト」も違うなあ</span><br><span class="line">ただ 僕は僕を引き伸ばしたいだけ</span><br><span class="line"></span><br><span class="line">不能成为「那样的人」为好</span><br><span class="line">达不到「perfect」的程度也罢</span><br><span class="line">只是想展示，就这样原原本本的自我</span><br><span class="line"></span><br><span class="line">あるのはいつも願いだけ</span><br><span class="line">あるのはいつも願いだけ</span><br><span class="line">あるのはいつも願いだけ</span><br><span class="line">残るのはいつも願いだけ</span><br><span class="line"></span><br><span class="line">唯有让我坚持的愿望</span><br><span class="line">唯有期待改变的愿望</span><br><span class="line">唯有和你相关的愿望</span><br><span class="line">唯有这些愿望，留存于心</span><br><span class="line"></span><br><span class="line">らしくもなくたっていいでしょう</span><br><span class="line">真似でもふりでもやって損じゃない</span><br><span class="line">もっと楽しくなれるよ You you</span><br><span class="line">No one knows who I am</span><br><span class="line">No one knows who you are</span><br><span class="line"></span><br><span class="line">不妨与众不同</span><br><span class="line">真心或是伪装，都无计得失</span><br><span class="line">你呀，不妨卸下更多的重负</span><br><span class="line">谁也不会在意我的真面目</span><br><span class="line">也不会在意你酒量有几度</span><br><span class="line"></span><br><span class="line">らしくもなくたっていいでしょう</span><br><span class="line">大通りに出るしかないのさ</span><br><span class="line">しれっと着替えて歩いてれば</span><br><span class="line">You are you, I am I</span><br><span class="line">季節が笑うよ</span><br><span class="line">ドキドキしてるよ</span><br><span class="line"></span><br><span class="line">那就特立独行吧</span><br><span class="line">大道理他们爱说，也没办法</span><br><span class="line">换身轻装，说走就走</span><br><span class="line">你就是你，我还是我</span><br><span class="line">季节随风笑</span><br><span class="line">内心跟你跳</span><br></pre></td></tr></table></figure><h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><p>现实中真能这么随意任性就好了</p><p>– 当前: 添加封面</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/tn5yrKOxwKbg7vxFuwO3cg&quot;&gt;本文公众号&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;歌词和翻译&quot;&gt;&lt;a href=&quot;#歌词和翻译&quot; class=&quot;headerlink&quot; title=&quot;歌词和翻译</summary>
      
    
    
    
    <category term="音乐" scheme="http://smiecj.github.io/categories/%E9%9F%B3%E4%B9%90/"/>
    
    <category term="TOMOO" scheme="http://smiecj.github.io/categories/%E9%9F%B3%E4%B9%90/TOMOO/"/>
    
    
    <category term="音乐" scheme="http://smiecj.github.io/tags/%E9%9F%B3%E4%B9%90/"/>
    
    <category term="日语" scheme="http://smiecj.github.io/tags/%E6%97%A5%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>shell 常用工具指令</title>
    <link href="http://smiecj.github.io/2023/04/14/shell-tools/"/>
    <id>http://smiecj.github.io/2023/04/14/shell-tools/</id>
    <published>2023-04-13T16:00:00.000Z</published>
    <updated>2023-04-14T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/xiaoliizi/article/details/130158402">本文csdn博客地址</a></p><h2 id="常用组件-服务安装"><a href="#常用组件-服务安装" class="headerlink" title="常用组件/服务安装"></a>常用组件/服务安装</h2><p>背景: 不同语言组件开发需求，需要经常快速切换开发环境，或者在新机器安装开发环境。于是将常用开发语言的安装 固化成脚本，方便后续使用</p><p>项目: <a href="https://github.com/smiecj/shell-tools">shell-tools</a></p><p>举例: 安装 trino 较高版本，需要 jdk17，通过这个项目 直接执行 <strong>make java-new</strong> 即可</p><p>安装完成后，环境变量中自动就配置了 jdk17</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># java</span><br><span class="line">export JAVA_HOME=/usr/java/jdk-17.0.6+10 # java</span><br></pre></td></tr></table></figure><h2 id="hive-表迁移"><a href="#hive-表迁移" class="headerlink" title="hive 表迁移"></a>hive 表迁移</h2><p><a href="https://www.jianshu.com/p/82af10e8249e">参考-hive数据迁移</a></p><p>背景: 需要跨集群迁移 hive 表结构，涉及两步: 迁移表数据 和 迁移表结构</p><h3 id="表数据迁移"><a href="#表数据迁移" class="headerlink" title="表数据迁移"></a>表数据迁移</h3><p>如果两个集群环境相通，可直接迁移 hdfs 数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su ods -c &quot;hadoop distcp hdfs://source_cluster/apps/hive/warehouse/db_name.db hdfs://target_cluster/apps/hive/warehouse/db_name/db&quot;</span><br></pre></td></tr></table></figure><p>如果网络不互通，需要先把数据下载下来，再手动传到目标集群。如果数据量不大还是可行的<br>su hdfs -c “hdfs dfs -get hdfs://cluster_name/apps/hive/warehouse/db_name.db/table_name”</p><p>for current_table in ${table_arr[@]}<br>do<br>    su hdfs -c “hdfs dfs -get hdfs://cluster_name/apps/hive/warehouse/db_name.db/${current_table}”<br>done</p><h3 id="表结构迁移"><a href="#表结构迁移" class="headerlink" title="表结构迁移"></a>表结构迁移</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">table_arr=(需要导出的表列表)</span><br><span class="line"></span><br><span class="line">echo &quot;&quot; &gt;&gt; /tmp/ddl.sql</span><br><span class="line">for current_table in $&#123;table_arr[@]&#125;</span><br><span class="line">do</span><br><span class="line">beeline -u jdbc:hive2://hive_server_host:10000/dw -n hive -e &quot;show create table $&#123;current_table&#125;&quot; 2&gt;/dev/null | sed &#x27;s/.*createtab_stmt.*//g&#x27; | sed &#x27;s/.*--.*//g&#x27; | sed &#x27;s/| //g&#x27; | sed -E &#x27;s/ +\|//g&#x27; &gt;&gt; /tmp/ddl.sql</span><br><span class="line">echo &quot;;&quot; &gt;&gt; /tmp/ddl.sql</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>然后在目标环境 执行导出的 ddl.sql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">beeline -n user -u jdbc:hive2://hive_server_host:10000/db_name -f /tmp/ddl.txt</span><br></pre></td></tr></table></figure><h2 id="批量添加-ssh-key"><a href="#批量添加-ssh-key" class="headerlink" title="批量添加 ssh key"></a>批量添加 ssh key</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ip_list=(需要添加的机器列表)</span><br><span class="line">ssh_port=22</span><br><span class="line"></span><br><span class="line">ssh_public_key_arr=(&quot;ssh-rsa ...&quot;)</span><br><span class="line"></span><br><span class="line">IFS=&quot;&quot;</span><br><span class="line">for current_ip in $&#123;ip_list[@]&#125;</span><br><span class="line">do</span><br><span class="line">ssh -p$&#123;ssh_port&#125; $&#123;current_ip&#125; &quot;echo &#x27;&#x27; | sudo tee -a /root/.ssh/authorized_keys&quot;</span><br><span class="line">for current_ssh_key in $&#123;ssh_public_key_arr[@]&#125;</span><br><span class="line">do</span><br><span class="line">ssh -p$&#123;ssh_port&#125; $&#123;current_ip&#125; &quot;echo &#x27;$&#123;current_ssh_key&#125;&#x27; | sudo tee -a /root/.ssh/authorized_keys&quot;</span><br><span class="line">done</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="frp-反向代理批量安装"><a href="#frp-反向代理批量安装" class="headerlink" title="frp 反向代理批量安装"></a>frp 反向代理批量安装</h2><p>公司内网禁用了 服务部署环境 ssh 端口和本地开发环境的连接，登录机器需要通过 <a href="https://docs.jumpserver.org/zh/master/">jumpserver</a> 非常不方便</p><p>参考 <a href="https://github.com/fatedier/frp">frp</a> 项目，写了一个批量在多节点安装 frpc 的脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># frps 安装</span><br><span class="line">echo &quot;sshd:127.0.0.1&quot; &gt;&gt; /etc/hosts.allow</span><br><span class="line"></span><br><span class="line">mkdir -p /opt/modules/frps</span><br><span class="line">pushd /opt/modules/frps</span><br><span class="line">curl -LO https://github.com/fatedier/frp/releases/download/v0.40.0/frp_0.40.0_linux_amd64.tar.gz</span><br><span class="line">tar -xzvf frp_0.40.0_linux_amd64.tar.gz</span><br><span class="line">cd frp_0.40.0_linux_amd64</span><br><span class="line">echo &quot;&quot;&quot;</span><br><span class="line">[common]</span><br><span class="line">bind_port = 7001</span><br><span class="line">authenticate_new_work_conns = true</span><br><span class="line">authenticate_heartbeats = true</span><br><span class="line">authentication_method = token</span><br><span class="line">token = frp认证token</span><br><span class="line">&quot;&quot;&quot; &gt; frps.ini</span><br><span class="line">nohup ./frps -c ./frps.ini &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">popd</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># frpc 批量安装</span><br><span class="line"></span><br><span class="line">ip_list=(需要安装的节点列表)</span><br><span class="line">remote_port=6001</span><br><span class="line">ssh_port=22</span><br><span class="line"></span><br><span class="line">for current_ip in $&#123;ip_list[@]&#125;</span><br><span class="line">do</span><br><span class="line"></span><br><span class="line">ssh -p$&#123;ssh_port&#125; $&#123;current_ip&#125; &quot;mkdir -p /opt/modules/frpc &amp;&amp; cd /opt/modules/frpc &amp;&amp; curl -LO https://github.com/fatedier/frp/releases/download/v0.40.0/frp_0.40.0_linux_amd64.tar.gz &amp;&amp; tar -xzvf frp_0.40.0_linux_amd64.tar.gz &amp;&amp; cd frp_0.40.0_linux_amd64 &amp;&amp; hostname=`hostname | sed &#x27;s/\..*//g&#x27;` &amp;&amp; echo -e &quot;\n[common]\nserver_addr = router1\nserver_port = 7001\nauthenticate_new_work_conns = true\nauthenticate_heartbeats = true\nauthentication_method = token\ntoken = frp认证token\n[ssh_$&#123;remote_port&#125;]\ntype = tcp\nlocal_port = $&#123;ssh_port&#125;\nremote_port = $&#123;remote_port&#125;&quot; | tee frpc.ini&quot;</span><br><span class="line"></span><br><span class="line">ssh -p$&#123;ssh_port&#125; $&#123;current_ip&#125; &quot;ps -ef | grep &#x27;frpc&#x27; | grep -v grep | awk &#x27;&#123;print \$2&#125;&#x27; | xargs --no-run-if-empty kill -9&quot;</span><br><span class="line">ssh -p$&#123;ssh_port&#125; $&#123;current_ip&#125; &quot;nohup /opt/modules/frpc/frp_0.40.0_linux_amd64/frpc -c /opt/modules/frpc/frp_0.40.0_linux_amd64/frpc.ini &gt; /dev/null 2&gt;&amp;1 &amp;&quot;</span><br><span class="line"></span><br><span class="line">ssh -p$ $&#123;current_ip&#125; &#x27;echo &quot;sshd:127.0.0.&quot; | tee -a /etc/hosts.allow&#x27;</span><br><span class="line"></span><br><span class="line">remote_port=$((remote_port+1))</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="快速访问指定容器名"><a href="#快速访问指定容器名" class="headerlink" title="快速访问指定容器名"></a>快速访问指定容器名</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># /usr/bin/goto</span><br><span class="line"></span><br><span class="line">#!/bin/bash</span><br><span class="line"># set -euxo pipefail</span><br><span class="line"></span><br><span class="line">echo &quot;hello go!&quot;</span><br><span class="line"></span><br><span class="line">if [ $# -lt 2 ]; then</span><br><span class="line">        echo &quot;Invalid input!&quot;</span><br><span class="line">        exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">node_name=$1</span><br><span class="line">env_name=$2</span><br><span class="line"></span><br><span class="line"># goto container dev_zsh</span><br><span class="line">if [ &quot;$node_name&quot; == &quot;container&quot; ]; then</span><br><span class="line">        container_name=$env_name</span><br><span class="line">        container_count=`docker ps -a --filter name=^$container_name\$ | grep -v &quot;CREATED&quot; | wc -l | sed &#x27;s/\t//g&#x27; | sed &#x27;s/ //g&#x27;`</span><br><span class="line">        if [ &quot;1&quot; == &quot;$container_count&quot; ]; then</span><br><span class="line">                container_id=`docker ps -a --filter name=^$container_name\$ | grep -v &quot;CREATED&quot; | sed &#x27;s/ .*//g&#x27;`</span><br><span class="line">                docker exec -it $container_id /bin/zsh</span><br><span class="line">                if [ 0 -ne $? ]; then</span><br><span class="line">                        docker exec -it $container_id /bin/bash</span><br><span class="line">                fi</span><br><span class="line">        else</span><br><span class="line">                echo &quot;container: $env_name, get count $container_count, will not enter&quot;</span><br><span class="line">        fi</span><br><span class="line">        exit</span><br><span class="line">else</span><br><span class="line">        echo &quot;command not valid&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># goto container dev: bash into container name &quot;dev&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">分享最近自己常用的shell脚本</summary>
    
    
    
    <category term="开发工具" scheme="http://smiecj.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    <category term="shell" scheme="http://smiecj.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/shell/"/>
    
    
    <category term="Linux" scheme="http://smiecj.github.io/tags/Linux/"/>
    
    <category term="shell" scheme="http://smiecj.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>github action 基于个人项目实践</title>
    <link href="http://smiecj.github.io/2023/04/04/github-action/"/>
    <id>http://smiecj.github.io/2023/04/04/github-action/</id>
    <published>2023-04-03T16:00:00.000Z</published>
    <updated>2023-06-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/xiaoliizi/article/details/131145170">本文csdn地址</a></p><h2 id="DevOps-和-Jenkins"><a href="#DevOps-和-Jenkins" class="headerlink" title="DevOps 和 Jenkins"></a>DevOps 和 Jenkins</h2><p>作为一名开发，虽然也没有经常听到 <strong><a href="https://en.wikipedia.org/wiki/DevOps">Devops</a> （研发和运维一体化）这个概念</strong>，但日常工作中已经无处不在地用着 DevOps 工具。自研也好，基于开源项目改造也好，互联网公司基本都会有自已的一套 DevOps 工具</p><p>所谓 DevOps 这个概念，不过是在我们日常开发流程上抽象一层，把<strong>开发、测试、运维</strong>等角色，日常的手动操作，都<strong>抽象成特定的语言/模板表述</strong>。有了这一层抽象之后，任务的<strong>自动化</strong>就有基础了。自动化之后 各个角色也能够从杂事中解放出来，分担其他角色的事情，或是更专注于领域深层的技术</p><p>一个完全没有实现自动化的研发体系，会是什么样的呢？想象一下：开发需要三头六臂，一边忙着开发需求，一边因为单元测试不够完善，不停地改着来自线上环境退回的 bug 单，甚至还要和运维 battle 服务部署的细节；测试一边要用 jmeter 给开发刚发布到测试环境的服务做压测，一边还要被测试组长批评: 这么基本的 bug 你怎么没有测出来？运维，那就更不用说了，这边数据库需要扩容，那边服务需要发布，根本没有停下休息的时候</p><!--开发需要完成需求功能开发，进行编写代码、提交到仓库、保证。测试需要保证上线生产环境的服务完整想象一下如果整个开发流程 都需要手动，会是一个什么场景: **开发人员**准时准点（下划线）并跟**测试人员**通知说 需求已经开发完成，可以**测试**了，测试人员又回头跟你说，那你在测试环境**发布一下版本**，开发就说好，于是**在开发机器上**执行 mvn package 给**项目打好了包**，把文件传给测试，测试开始**在测试机上执行测试用例**，所有用例都通过之后，又**通知开发**: 好你这个服务可以发布了，于是开发又要把包发给**运维人员**，**运维在生产环境把服务包部署好**，最后由**用户验收需求**。好了，整个过程 大家都掉了不少头发--><p>光是想象一下就已经头大了。如果不依靠成熟的工具 去分担一些琐事，不管是什么角色，都无法专注自己应该做的事</p><p>于是我们要先说到 <strong><a href="https://github.com/jenkinsci/jenkins">Jenkins</a></strong>: 一个开源的 <a href="https://en.wikipedia.org/wiki/CI/CD">CI/CD</a> （持续集成、持续开发） 服务，对 DevOps 流程做了很好的抽象，上面说到的所有过程，在 Jenkins 中都变成了<strong>插件</strong>。不管你是开发 测试 还是运维，总能在<a href="https://plugins.jenkins.io/">插件市场</a>中找到适合自己的，只需要按照既定的模板写好任务流程 ，就能自动化地执行任务了</p><p><img src="/2023/04/04/github-action/11.png" alt="Jenkins 插件市场"></p><p>举个例子，<a href="https://plugins.jenkins.io/golang">Go</a> 这个插件，就可以帮你做好 golang 环境的初始化工作。你只需要把服务编译、打包指令写好就行，以后都可以用同一个模板<br>官方示例:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">  <span class="comment">// 选择任意执行机器</span></span><br><span class="line">  agent any</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义 golang 版本为 1.19，插件会自动帮我们在执行器中安装这个版本</span></span><br><span class="line">  tools &#123; go &#x27;1.19&#x27; &#125;</span><br><span class="line"></span><br><span class="line">  stages &#123;</span><br><span class="line">    stage(&#x27;Build&#x27;) &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">        <span class="comment">// 打印 golang 版本</span></span><br><span class="line">        sh &#x27;go version&#x27;</span><br><span class="line">        <span class="comment">// 编译产生可执行文件</span></span><br><span class="line">        sh &#x27;go build -o main ./main.go&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过正是因为Jenkins对流程的抽象程度很高，上手难度也并不低。它的<strong>任务定义语法、插件系统、容器化部署、集群部署</strong> ，每一块都可以深度展开。本文的重点并不是要深入介绍 Jenkins，也不是把目光放到公司级别: 几千上万人使用的DevOps工具是什么样子的，而是<strong>专注于我们自己</strong>，在自己项目的日常开发中，是否也能用上这样能给我们带来便利的工具呢？</p><p>笔者遇到的场景是，自己开发了一个服务镜像仓库（包含各种服务的 Dockerfile），以及一个后台服务。镜像更新了什么功能，需要在本地重新构建镜像提交到 docker hub 仓库；后台项目实现了新功能，想跑跑单元测试 验证完整性，也需要在本地手动执行所有单测方法。虽然说熟能生巧，但总归是<strong>需要自己去“亲力亲为”的事</strong></p><p>正好，今天的主角 <strong><a href="https://docs.github.com/en/actions">Github Action</a></strong>: 这样一个Github直接提供给我们的 自动化CI/CD 工具，就派上了用场。有了它，不管我的服务什么时候需要更新，我都只管把代码提交到 github，剩下的部署和测试过程，都交给 action 帮我执行就好，是真的 <strong>save my time</strong> 了</p><h2 id="本文内容概览"><a href="#本文内容概览" class="headerlink" title="本文内容概览"></a>本文内容概览</h2><p>本文将从 github action 的使用方式入手，介绍它的基本语法，了解如何从零开始构建 action 任务。然后从笔者个人的实践出发，探讨 action 是否真的可以帮助我们提升开发效率<!--。最后扩展了解一下其他的公有云持续构建产品，看看网上其他人对这些产品的使用体验--></p><h2 id="github-action"><a href="#github-action" class="headerlink" title="github action"></a>github action</h2><h3 id="创建-action-任务"><a href="#创建-action-任务" class="headerlink" title="创建 action 任务"></a>创建 action 任务</h3><p><a href="https://docs.github.com/en/actions/quickstart">官方教程-Quickstart for GitHub Actions</a></p><p>Github Action 任务和 Github 代码仓库之间是绑定关系，<strong>一个 action 任务的描述文件最终会挂载到项目的 .github/workflows 目录下</strong>。我们可以在Github 上创建一个项目，然后按照官方文档的 quickstart 示例来提交一个 action 任务，就能体验基本功能了</p><p>这个任务不需要和仓库代码有任何关系，一个空项目都可以提交 action 任务</p><p>示例任务: （触发条件为 push 代表任意提交都会触发执行）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">name: GitHub Actions Demo</span><br><span class="line">run-name: $&#123;&#123; github.actor &#125;&#125; is testing out GitHub Actions 🚀</span><br><span class="line">on: [push]</span><br><span class="line">jobs:</span><br><span class="line">  Explore-GitHub-Actions:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      # 打印一些 github action 自带的环境变量，如 github.event_name: 时间名称（push）、github.ref: 分支名（refs/heads/smiecj-patch-1）</span><br><span class="line">      - run: echo &quot;🎉 The job was automatically triggered by a $&#123;&#123; github.event_name &#125;&#125; event.&quot;</span><br><span class="line">      - run: echo &quot;🐧 This job is now running on a $&#123;&#123; runner.os &#125;&#125; server hosted by GitHub!&quot;</span><br><span class="line">      - run: echo &quot;🔎 The name of your branch is $&#123;&#123; github.ref &#125;&#125; and your repository is $&#123;&#123; github.repository &#125;&#125;.&quot;</span><br><span class="line">      - name: Check out repository code</span><br><span class="line">        uses: actions/checkout@v3</span><br><span class="line">      - run: echo &quot;💡 The $&#123;&#123; github.repository &#125;&#125; repository has been cloned to the runner.&quot;</span><br><span class="line">      - run: echo &quot;🖥️ The workflow is now ready to test your code on the runner.&quot;</span><br><span class="line">      - name: List files in the repository</span><br><span class="line">        run: |</span><br><span class="line">          ls $&#123;&#123; github.workspace &#125;&#125;</span><br><span class="line">      - run: echo &quot;🍏 This job&#x27;s status is $&#123;&#123; job.status &#125;&#125;.&quot;</span><br></pre></td></tr></table></figure><p>提交任务过程: 首先在仓库的 Action 一栏 创建一个自定义任务</p><p><img src="/2023/04/04/github-action/06.png" alt="创建 github action"></p><p>然后会提示 是选择直接 commit 到主分支 还是创建一个单独分支 并创建 pr，这里建议选择后者</p><p><img src="/2023/04/04/github-action/07.png" alt="提交 github action"></p><p>pr创建完成后，将自动触发 action 任务的执行，如下图 显示任务执行中</p><p><img src="/2023/04/04/github-action/08.png" alt="action 状态"></p><p>action 执行的每一个步骤（step）都有非常详细的日志</p><p><img src="/2023/04/04/github-action/10.png" alt="action 日志"></p><p>如果我们需要把刚才创建的 action 流程保存下来，可以把这个 pr 合并。也可以直接在本地开发时手动创建 .github/workflows 目录，将流程定义保存成 yml 文件，提交到仓库后就能自动触发执行了</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><table><thead><tr><th>概念</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions#workflows">Workflow</a></td><td>任务单位，一个 github action yaml 文件即对应一个任务，一个 workflow 下 可定义多个 job</td></tr><tr><td><a href="https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions#events">Event</a></td><td>触发 workflow 运行的事件，可以是一次 commit 提交，一次 pr 合并请求，到达设定的触发时间等</td></tr><tr><td><a href="https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions#jobs">Job</a></td><td>Workflow 内定义的具体执行的任务，同一个 Workflow 中的任务将会在同一个 Runner 中运行，因此可以设定依赖关系，上一个 Job 的产物可以在下一个 Job 使用。默认没有依赖关系的 Job 将会并行执行</td></tr><tr><td><a href="https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions#actions">Action</a></td><td>将 Workflow 开放为模板，可在 Market 中供别人使用</td></tr><tr><td><a href="https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions#runners">Runner</a></td><td>Workflow 执行环境，每个 Runner 同时只能运行一个 job。若有特殊需求，可以使用<a href="https://docs.github.com/en/actions/using-github-hosted-runners/using-larger-runners">更高性能的执行器</a>，或者使用<a href="https://docs.github.com/en/actions/hosting-your-own-runners">自己部署的执行器</a></td></tr></tbody></table><h3 id="Market"><a href="#Market" class="headerlink" title="Market"></a>Market</h3><p><a href="https://github.com/marketplace?type=actions">Github Action Market</a> 类似刚才提到的 Jenkins Market，有非常多现成的，可以直接复用的任务。分类包括: 服务发布（如将服务发布到 aws）、安全（CodeQL 扫描）、持续集成（编译）、自动化（提交issue后自动回复）、页面生成（Hugo），非常丰富</p><p><img src="/2023/04/04/github-action/17.png" alt="choose a workflow from market"></p><h3 id="Workflow-基本语法"><a href="#Workflow-基本语法" class="headerlink" title="Workflow 基本语法"></a>Workflow 基本语法</h3><p><a href="https://docs.github.com/en/actions/using-workflows/about-workflows">About workflows</a></p><h4 id="触发条件"><a href="#触发条件" class="headerlink" title="触发条件"></a>触发条件</h4><p>对应基本概念中的 Action，常见配置有:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 在提交到 main 分支时触发（PR 不会触发）</span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">    - main</span><br><span class="line">    - release/*</span><br><span class="line"></span><br><span class="line"># 提交 合并到 main 分支的 PR 时触发</span><br><span class="line">on:</span><br><span class="line">  pull_request:</span><br><span class="line">    branches:</span><br><span class="line">    - main</span><br><span class="line"></span><br><span class="line"># push / pr 且不论分支</span><br><span class="line">on:</span><br><span class="line">  [push, pull_request]</span><br><span class="line"></span><br><span class="line"># 定时触发</span><br><span class="line"># 注意: 触发时间为中时区 而不是当地时间 / crontab 表达式中最后一位的 day of the week 范围为 0-6</span><br><span class="line">on:</span><br><span class="line">  schedule:</span><br><span class="line">    - cron:  &#x27;30 5,17 * * *&#x27;</span><br></pre></td></tr></table></figure><p><a href="https://docs.github.com/zh/actions/using-workflows/events-that-trigger-workflows">更多触发条件</a></p><h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">on:</span><br><span class="line">  workflow_dispatch</span><br><span class="line"></span><br><span class="line">env:</span><br><span class="line">  DAY_OF_WEEK: Monday</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  greeting_job:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    env:</span><br><span class="line">      Greeting: Hello</span><br><span class="line">    steps:</span><br><span class="line">      - name: &quot;Say Hello Mona it&#x27;s Monday&quot;</span><br><span class="line">        run: echo &quot;$Greeting $First_Name. Today is $DAY_OF_WEEK!&quot;</span><br><span class="line">        env:</span><br><span class="line">          First_Name: Mona</span><br></pre></td></tr></table></figure><p><a href="https://docs.github.com/zh/actions/learn-github-actions/variables#default-environment-variables">常见默认环境变量</a>，如 GITHUB_ACTOR 表示流程发起者</p><h4 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h4><p>对应概念的 Runner 执行器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jobs:</span><br><span class="line">  my_job:</span><br><span class="line">    name: deploy to staging</span><br><span class="line">    runs-on: ubuntu-18.04</span><br></pre></td></tr></table></figure><p><a href="https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources">可选 Runner 列表</a></p><p>Linux 执行器的默认分配资源：2核7G 14G SSD – 基本够用了</p><h4 id="初始化各语言环境"><a href="#初始化各语言环境" class="headerlink" title="初始化各语言环境"></a>初始化各语言环境</h4><p>在Market中搜索关键字 actions/setup-语言名，大部分语言都有官方插件 支持初始化语言环境。比如如我们需要编译一个 java + maven 工程，就可以使用 <a href="https://github.com/actions/setup-java">actions/setup-java</a> 插件，它会帮我们装好 java、maven、gradle 和 sbt 等环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">name: Java CI</span><br><span class="line"></span><br><span class="line">on: [push]</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line"></span><br><span class="line">    steps:</span><br><span class="line">      - uses: actions/checkout@v3</span><br><span class="line">      - name: Set up JDK 17</span><br><span class="line">        uses: actions/setup-java@v3</span><br><span class="line">        with:</span><br><span class="line">          java-version: &#x27;17&#x27; # 安装 Java 版本</span><br><span class="line">          distribution: &#x27;temurin&#x27; # 开源jdk 类型，可选 Zulu、Temurin 和 AdoptOpenJDK</span><br><span class="line">      - name: Build with Maven</span><br><span class="line">        # 通过 maven 编译项目</span><br><span class="line">        run: mvn --batch-mode --update-snapshots package</span><br></pre></td></tr></table></figure><h4 id="产物"><a href="#产物" class="headerlink" title="产物"></a>产物</h4><p>有一些action任务的执行结果 我们是希望 github 先帮我们保管的，比如服务编译后用于发布服务的安装包，或是测试报告等</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 上传</span><br><span class="line">jobs:</span><br><span class="line">  example-job:</span><br><span class="line">    name: Save output</span><br><span class="line">    steps:</span><br><span class="line">      - shell: bash</span><br><span class="line">        run: |</span><br><span class="line">          expr 1 + 1 &gt; output.log</span><br><span class="line">      - name: Upload output file</span><br><span class="line">        uses: actions/upload-artifact@v3</span><br><span class="line">        with:</span><br><span class="line">          name: output-log-file</span><br><span class="line">          path: output.log</span><br><span class="line"></span><br><span class="line"># 下载</span><br><span class="line">jobs:</span><br><span class="line">  example-job:</span><br><span class="line">    steps:</span><br><span class="line">      - name: Download a single artifact</span><br><span class="line">        uses: actions/download-artifact@v3</span><br><span class="line">        with:</span><br><span class="line">          name: output-log-file</span><br></pre></td></tr></table></figure><p>Workflow 的更多语法，如 <a href="https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows">构建过程缓存</a>、<a href="https://docs.github.com/en/actions/using-workflows/reusing-workflows">引用其他项目的 workflow</a> 可参考官方文档</p><h3 id="限额"><a href="#限额" class="headerlink" title="限额"></a>限额</h3><p><a href="https://docs.github.com/en/actions/learn-github-actions/usage-limits-billing-and-administration">Usage limits, billing, and administration</a></p><p>既然是商用产品 免费使用的限额一定是有的，一部分限制如下:</p><ul><li>单次 Job 的执行时间: 6小时</li><li>Workflow 的执行时间: 35天</li><li>一小时内 请求 github api 次数: 1000次</li><li>同时运行的 job 数量: 20个（可以升级账号扩容），超过的将会排队</li></ul><p>个人使用的话 同时运行 job 数 这个比较需要留意。不过避免超过限制的方式也简单: 不同任务的触发时间尽量错开，比如编译A服务设置在凌晨2点触发，编译B服务设置到凌晨3点</p><h2 id="个人实践"><a href="#个人实践" class="headerlink" title="个人实践"></a>个人实践</h2><p>掌握了 Github Action 的基本语法后，就可以基于具体的项目来实践了。笔者进行了镜像自动构建、单测覆盖率统计 两种任务的部署</p><h3 id="镜像构建"><a href="#镜像构建" class="headerlink" title="镜像构建"></a>镜像构建</h3><p>之前做了一些开发环境镜像 和 大数据服务镜像 写成了 Dockerfile，都是在本地手动触发构建和提交的。现在都可以让 github action 帮我自动构建，定期提交到镜像仓库了</p><p><a href="https://frederick-s.github.io/2021/12/26/build-and-push-docker-image-to-docker-hub-with-github-actions/">参考博客-使用 GitHub Actions 自动构建和推送 Docker 镜像到 Docker Hub</a></p><h4 id="准备-dockerhub-开启二次登录-和-创建-token"><a href="#准备-dockerhub-开启二次登录-和-创建-token" class="headerlink" title="准备: dockerhub 开启二次登录 和 创建 token"></a>准备: dockerhub 开启二次登录 和 创建 token</h4><p>首先为了账号尽量安全，不要在 Github 上直接配置账号密码（权限过大），我们需要在 Docker Hub 给自己的账号创建Token</p><p><a href="https://docs.docker.com/docker-hub/access-tokens">参考-Create and manage access tokens</a></p><p>登录 Docker hub -&gt; 右上角账号 -&gt; Account Settings -&gt; Security -&gt; New Access Token</p><p><img src="/2023/04/04/github-action/01.png" alt="创建token"></p><p>如上图，创建了一个 Github Action 专用 token ，因为需要提交/覆盖镜像 所以 Write 权限是需要的。当然这个权限还是比较大，我们还是需要注意保管好 不要泄露</p><p>然后将这个 token 在 github 中配置，登录 github -&gt; 进入需要添加 action 任务的仓库 -&gt; Settings -&gt; Secrets and variables -&gt; Actions -&gt; New repository secret 。secret key 将作为任务的配置</p><p><img src="/2023/04/04/github-action/02.png" alt="配置token"></p><h4 id="准备-项目中提供-Dockerfile"><a href="#准备-项目中提供-Dockerfile" class="headerlink" title="准备: 项目中提供 Dockerfile"></a>准备: 项目中提供 Dockerfile</h4><p>既然需要支持 通过 action 自动构建镜像，在项目中提供 Dockerfile 自然也是必须的</p><p>以 <a href="https://github.com/apache/superset">superset</a> 为例，根路径下的 <a href="https://github.com/apache/superset/blob/master/Dockerfile">Dockerfile</a>，action 文件中有发布镜像流程 <a href="https://github.com/apache/superset/blob/master/.github/workflows/docker-release.yml">docker-release.yml</a> ，算是一个非常标准的参考项目了</p><p>如何给自己的服务编写 Dockerfile，也可以以不同语言的开源项目 Dockerfile 作为参考，对 Dockerfile 语法有一个大致了解就行。标准过程都是 <strong>定义编译镜像 -&gt; 编译生成可执行文件 -&gt; 定义服务运行镜像 -&gt; 拷贝二进制文件 -&gt; 定义服务启动指令</strong></p><h4 id="定义任务"><a href="#定义任务" class="headerlink" title="定义任务"></a>定义任务</h4><p>以笔者项目 <a href="https://github.com/smiecj/docker-centos/blob/main/.github/workflows/build_dev_python.yml">docker-centos</a> 为例: 定期构建 python 开发环境镜像任务如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&quot;0 3 * * 0&quot;</span> <span class="comment"># 每周一3点（中时区）开始构建</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">docker:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">fetch-depth:</span> <span class="number">0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">QEMU</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">docker/setup-qemu-action@v1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Docker</span> <span class="string">Buildx</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">docker/setup-buildx-action@v1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Login</span> <span class="string">to</span> <span class="string">DockerHub</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">docker/login-action@v1</span> </span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DOCKERHUB_USERNAME</span> <span class="string">&#125;&#125;</span> <span class="comment"># 对应前面配置的 docker hub 登录凭证</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DOCKERHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">build_dev_python</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">REPO=mzsmieli</span> <span class="string">cmd=push</span> <span class="string">platform=linux/amd64,linux/arm64</span> <span class="string">make</span> <span class="string">build_dev_python</span> <span class="comment"># 该指令将触发 docker buildx build ... --push 进行镜像的构建和提交</span></span><br></pre></td></tr></table></figure><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p>action 任务的执行记录</p><p><img src="/2023/04/04/github-action/13.png" alt="执行记录"></p><p>镜像仓库中可以看到上次更新时间正好就是周一</p><p><img src="/2023/04/04/github-action/12.png" alt="镜像仓库"></p><h3 id="单元测试覆盖率统计"><a href="#单元测试覆盖率统计" class="headerlink" title="单元测试覆盖率统计"></a>单元测试覆盖率统计</h3><p>一个完善的后台项目除了业务逻辑代码，还会包含大量的<a href="https://en.wikipedia.org/wiki/Unit_testing">单元测试</a>（即基本方法测试），用于正式上线前的自测。单元测试写得质量如何，其中一个重要评判标准就是<a href="https://en.wikipedia.org/wiki/Code_coverage">单测覆盖率</a>，即<strong>所有的单元测试所覆盖的业务代码行数 / 总业务代码行数 比例</strong>。覆盖率越高，说明单测越完整，实际上线时出现问题的概率也越低</p><p>而这个单测覆盖率的统计过程 如果能交给 Github Action 帮我们做，<strong>每天输出覆盖率报告</strong>，自然也能省不少心</p><h4 id="项目准备"><a href="#项目准备" class="headerlink" title="项目准备"></a>项目准备</h4><p>要统计单测覆盖率 当然我们要先给项目写好一部分单测。每种语言都会有自己的<strong>单测编写规范</strong> 和 <strong>单测框架库</strong>。框架库如何选择，可以在写单测之前了解一下 官方或者社区有没有比较流行好用的，选择一个自己用着更顺手的就行</p><p>规范这块则尽量参考官方文档，如一些后台语言的单测规范:</p><ul><li><a href="https://pkg.go.dev/testing">go-testing</a></li><li><a href="https://docs.python.org/3/library/unittest.html">python-unittest</a></li><li><a href="https://junit.org/junit5/docs/current/user-guide">java-junit5</a></li></ul><h4 id="环境准备-创建-mysql-service"><a href="#环境准备-创建-mysql-service" class="headerlink" title="环境准备 - 创建 mysql service"></a>环境准备 - 创建 mysql service</h4><p><a href="https://ovirium.com/blog/how-to-make-mysql-work-in-your-github-actions">参考-How to make MySQL work in your GitHub Actions</a></p><p>由于单测执行环境一般是在自己电脑 或者公司的测试环境，和线上环境是网络隔离的，我们需要给一些无法实际执行的函数写好<a href="https://en.wikipedia.org/wiki/Mock_object">mock</a> 。所谓mock，就是让我们编写的函数 在特定输入下 <strong>返回特定输出</strong>，比如我们的服务对接 一个客户系统，在本地环境无法连上客户的环境，就需要 mock 用户服务的接口，自己写接口输出，来<strong>模拟真实环境的情况</strong></p><p>对于业务层代码来说，写好 mock 取决于业务数据的分类规模。但对于更底层的<strong>数据接口层</strong>，如 gorm，需要 mock 的场景就更多了。比如业务层需要考虑 用户传入参数为 a、b、c 的输出，分别对应 d、e、f，那么数据接口层就要考虑 a、b、c 的首次存入、重复存入、事务存入等情况，除了 d、e、f 还需要返回各种错误提示。写好完整的 mock 比业务层要复杂多了</p><p>考虑到这点，数据库的交互部分我没有写 mock，而是直接通过 action 的 service 功能，启动一个 mysql 服务来完成项目中 需要依赖数据库的代码测试</p><h4 id="定义任务-1"><a href="#定义任务-1" class="headerlink" title="定义任务"></a>定义任务</h4><p>最终任务定义:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">services:</span></span><br><span class="line">      <span class="attr">mysql:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">mysql:5.7</span> <span class="comment"># 通过官方的 5.7 版本镜像来启动 mysql</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">root_password</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="number">3306</span><span class="string">:3306</span></span><br><span class="line">        <span class="attr">options:</span> <span class="string">--health-cmd=&quot;mysqladmin</span> <span class="string">ping&quot;</span> <span class="string">--health-interval=10s</span> <span class="string">--health-timeout=5s</span> <span class="string">--health-retries=3</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">fetch-depth:</span> <span class="number">0</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">master</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">setup</span> <span class="string">goalng</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-go@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">go-version:</span> <span class="string">&#x27;&gt;=1.17.0&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init</span> <span class="string">mysql</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          # 初始化单测需要用到的数据库表</span></span><br><span class="line"><span class="string">          mysql -h127.0.0.1 -P3306 -uroot -proot_password -e &quot;create database temp&quot;</span></span><br><span class="line"><span class="string">          mysql -h127.0.0.1 -P3306 -uroot -proot_password -Dtemp &lt; db/mysql/mysql_test.sql</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          # 执行项目下的所有单测用例，并生成测试报告</span></span><br><span class="line"><span class="string">          go test -covermode=count -coverprofile=coverprofile.cov -run=&quot;^Test&quot; -coverpkg=$(go list ./... | grep -v &quot;/test&quot; | tr &#x27;\n&#x27; &#x27;,&#x27;) ./...</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Collect</span> <span class="string">Test</span> <span class="string">Coverage</span> <span class="string">File</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/upload-artifact@v3</span>  <span class="comment"># 上传测试覆盖率报告，即上个指令生成的 coverprofile.cov</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">go_common_coverage</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">coverprofile.cov</span></span><br></pre></td></tr></table></figure><h4 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h4><p>执行记录和上传的文件:</p><p><img src="/2023/04/04/github-action/14.png" alt="执行记录"></p><h3 id="github-首页构建"><a href="#github-首页构建" class="headerlink" title="github 首页构建"></a>github 首页构建</h3><p>对个人开发者而言，github action 还可以用于 个人博客、应用app 的定期发布。github 首页就有点类似个人博客，可以按 markdown 语法编写内容，进行自我展示</p><p>我的 github 首页:</p><p><img src="/2023/04/04/github-action/15.png" alt="github首页"></p><p>不过我还没有实现首页自动更新，这里以另一个github用户 <a href="https://github.com/wuhan005/wuhan005">E99p1ant</a> 的 首页项目为例。他将首页的 markdown 文件内容写成了模板样式，通过 action 任务，定期读取模板 并生成最终展示的首页样式</p><p>如图 他的项目的 README_template.md 文件只是模板，实际内容来自同一个仓库的 profile.yml</p><p><img src="/2023/04/04/github-action/16.png" alt="模板文件"></p><h4 id="任务定义"><a href="#任务定义" class="headerlink" title="任务定义"></a>任务定义</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Update</span> <span class="string">Profile</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Go</span> <span class="number">1.16</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-go@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">go-version:</span> <span class="number">1.16</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">&amp;</span> <span class="string">Run</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          # 执行主进程 将 模板文件 生成真正的首页效果</span></span><br><span class="line"><span class="string">          # 过程: 读取 README_template.md 作为模板，profile.yml 作为内容，替换 template 中的 &#123;&#123;PROJECTS&#125;&#125; 和 &#123;&#123;CVE&#125;&#125;，生成最终的 README.md</span></span><br><span class="line"><span class="string">          go build . &amp;&amp; ./main &amp;&amp; rm main</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Git</span> <span class="string">Commit</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          git add README.md</span></span><br><span class="line"><span class="string">          git commit -S -m &quot;Update README.md&quot; || true # 内容没有变化时 commit 会报错，所以需要忽略报错，否则最后一步不会执行</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Push</span> <span class="string">changes</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">ad-m/github-push-action@master</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h2 id="其他商用CI-CD工具"><a href="#其他商用CI-CD工具" class="headerlink" title="其他商用CI/CD工具"></a>其他商用CI/CD工具</h2><p>基本每个云厂商都会有 配套产品，如 <a href="https://azure.microsoft.com/en-us/products/devops/pipelines">Azure Pipeline</a>, <a href="https://aws.amazon.com/cn/codepipeline">AWS CodePipeline</a> 和 <a href="https://circleci.com/">CircleCI</a> 等</p><p>不过既然是商用 就代表具有一定的使用门槛，场景也受限，往往会和厂商的其他服务配套才能使用。如此一对比，就更凸显 Github Action 对我们个人开发者的易用性了</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从自己的实际体验来看，即使用上了 Github Action 也不会带来很明显的感知。但它带来的方便依然是存在的。就好像你在公司所用的所有基础设施（机器、数据库、sso服务等）一样。只有去刻意注意 才会发现它们的存在: 原来它们背后也凝聚了一群开发者的智慧，帮我们省去了非常多的工作</p><!--如果 Github Action 对你来说也会是这样的一个工具，能 save your time，那不妨就尝试用起来--><p>最后再分享前段时间看到的<a href="https://mp.weixin.qq.com/s/bOnW8gDJ-dXp4KbAjhDw9A">一段话</a>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">但是像区块链这些东西，你就扪心自问一下，区块链是不是所有公司都在用？没有用就让那些猪在天上再飞一会，指不定哪天风停了呢。但是，今天那些很强劲的风已经刮了十多年、二十年了，你为啥不去呢？</span><br></pre></td></tr></table></figure><p>不敢说 今年大火的 chatgpt 能有多少人真正用得上，因为刚刚以产品的形态进入公众视野，还没有沉淀下来。但是诸如 Github Action 这种 DevOps 工具，已经发展很多年，使用方式也在很多大厂得到了实践，还是很值得了解和实践的</p>]]></content>
    
    
    <summary type="html">自动化流水线平台的使用</summary>
    
    
    
    <category term="开发工具" scheme="http://smiecj.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    <category term="github" scheme="http://smiecj.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/github/"/>
    
    
    <category term="云服务" scheme="http://smiecj.github.io/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="github" scheme="http://smiecj.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>【翻译】Bye bye me 歌曲鉴赏</title>
    <link href="http://smiecj.github.io/2023/03/01/vaundy-byebyeme/"/>
    <id>http://smiecj.github.io/2023/03/01/vaundy-byebyeme/</id>
    <published>2023-02-28T16:00:00.000Z</published>
    <updated>2023-02-28T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="译者序"><a href="#译者序" class="headerlink" title="译者序"></a>译者序</h2><p>回忆对我们来说，偶尔顿足回首，确实会有不同的味道，但回忆终究只会是回忆，捧起它是很有分量，放下它也可变得轻盈。如果你步履蹒跚，不妨试试 放下一些回忆，轻装前进吧</p><p><a href="https://media.framu.world/columns/lyrics_consideration/bye-by-me/">原文-Bye by me【Vaundy】歌詞の意味を考察！ドラマ「捨ててよ、安達さん。」OPテーマ</a></p><p><a href="https://www.youtube.com/watch?v=b3H5RvRHiYs">歌曲MV(油管)</a><br><a href="https://www.bilibili.com/video/BV1NZ4y147MY">歌曲MV(B站)</a></p><h2 id="作者序"><a href="#作者序" class="headerlink" title="作者序"></a>作者序</h2><p>这次让我们一起来欣赏 Vaundy 2020年4月发布的数字单曲，由他亲自作词作曲编曲 <strong>「Bye by me」</strong>的歌词吧</p><p>这首歌也被作为 安达祐实（ 安達 祐実／あだち ゆみ）主演的电视剧  <strong>「丢掉吧，安达小姐」</strong>（放送时间：2020年4月-7月）的片头曲</p><p>剧情：安达小姐 被委托参加 「每期“丢掉”一个自己的物品」 连载系列的制作 ，之后，每次准备扔掉什么东西的时候，都会做一个梦，梦里出现了神秘的少女，还有尚未丢掉的东西，变成了人的样子，向自己恳求“请丢掉我吧”<br>当然，最后这些物品也不一定被扔掉了，可能卖掉，或者送给别人，只是换了个地方并“重获新生”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">译者: </span><br><span class="line">整部剧主线就是安达祐实 作为童星出道，成为演员所经历的故事。一集讲述一个故事，更像是舞台剧，节奏比较慢，挺适合茶余饭后当“点心”</span><br></pre></td></tr></table></figure><p><img src="/2023/03/01/vaundy-byebyeme/suteteyo01.jpeg" alt="剧照"></p><h2 id="歌曲部分"><a href="#歌曲部分" class="headerlink" title="歌曲部分"></a>歌曲部分</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">まんでい今日は</span><br><span class="line">どこへ行くの？</span><br><span class="line">まぁいいけど</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">今天是周一了</span><br><span class="line">你要去哪里呢？</span><br><span class="line">嘛，去哪都好啦</span><br></pre></td></tr></table></figure><p>第一段就体现了电视剧的主题 <strong>「即使是要丢掉一些东西，也请你放心」</strong></p><p>安达小姐作为主角 对话的搭档，正是她平日在犹豫是否要丢掉的东西。在梦中，它们变成了安达回忆中真实存在的某个人，和她对话</p><p>大部分东西都是在安达每次工作出门前，目所能及的</p><p>不过这些物品，在安达小姐的梦中，并没有特别地依依不舍。他们似乎不在乎自己最后是否被丢掉，只是在被丢掉之前，希望从安达小姐那里，得到它们疑惑已久的答案</p><p><img src="/2023/03/01/vaundy-byebyeme/suteteyo02.jpeg" alt="剧照"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ちゅーすでぃ今日も</span><br><span class="line">お仕事だったんでしょ？</span><br><span class="line">まぁいいけど</span><br><span class="line">まぁいいけど</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">今天星期二了</span><br><span class="line">这会你也是刚下班吧？</span><br><span class="line">嘛，工作上怎样都好啦</span><br><span class="line">怎样都好</span><br></pre></td></tr></table></figure><p>周二的安达小姐，迎着家里一些东西“欢迎”的目光回到家，有一种<strong>将要和他们轻声交谈、平日也守护着彼此的气氛</strong></p><p>假定我们自己身边的物品，也有自己的意识，和主人一同生活许久了，主人身上细微的变化，还有内心的小心思，恐怕也是能感受到吧</p><p><img src="/2023/03/01/vaundy-byebyeme/suteteyo06.jpeg" alt="剧照"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">うぇんずでぃ今日は</span><br><span class="line">何を見ているの？</span><br><span class="line">辛いでしょ</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">今天到周三了</span><br><span class="line">你这会在看什么呢？</span><br><span class="line">很辛苦对吧</span><br></pre></td></tr></table></figure><p>通过这次节目 安达小姐也发现了真正不舍得丢掉的一些东西，以及那些割舍不掉的回忆</p><p>周三，安达小姐又心绪复杂地扔掉了一个充满回忆的东西，梦中那东西甚至还安慰她道「很辛苦对吧」</p><p>也许因为是别人赠予的东西吧，丢掉它之前，安达唤起了更多回忆</p><p><img src="/2023/03/01/vaundy-byebyeme/suteteyo09.jpeg" alt="剧照"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">またさ</span><br><span class="line">遠く去った過去の日々に</span><br><span class="line">名前をつけて</span><br><span class="line">いたんでしょ</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我们呢</span><br><span class="line">给已经过去许久的每一天</span><br><span class="line">都赋予了属于它们的名字</span><br><span class="line">今天也是，对吧？</span><br></pre></td></tr></table></figure><p>明明是不需要的东西，却不舍得丢掉，大概是还<strong>对「过去」的一些回忆 充满着纠结</strong></p><p>「向过去之日赋予名」这种诗意般的表现，也是对应着电视剧中对欲弃之物“拟人化”的表现形式</p><p>或许 「不要忘记过去的荣耀」、「对前任还抱有幻想」 这种 「还试想回到过去的日子」 任性的想法，在我们身上也会有</p><p><img src="/2023/03/01/vaundy-byebyeme/suteteyo11.jpeg" alt="剧照"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">お帰り、でももういいよ</span><br><span class="line">伝えたいことは特にないから</span><br><span class="line">お帰り、でももういいの</span><br><span class="line">覚えてることも</span><br><span class="line">もうないよ</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">欢迎回来，怎样都好啦</span><br><span class="line">你想说的话，我们都能理解</span><br><span class="line">欢迎回来，已经没事啦</span><br><span class="line">需要你去用力记住的东西</span><br><span class="line">不过是一些浮云啦</span><br></pre></td></tr></table></figure><p>「已经可以了」在这部剧中的充分体现，就是「丢掉也没关系」</p><p>对剧中的“主角们”将会被丢掉的东西来说，设定就是「充满着 安达小姐 对过去难以割舍的回忆」</p><p>为了<strong>从「过去」的执念中解放出来，把这些东西丢掉</strong>也许是一个不错的方式</p><p>安达小姐一开始对于丢掉一些东西、忘记过去还抱有一丝罪恶感，于是拟人化的物品们 开始安慰她 「反正把我留着也没有什么意义了」</p><p><img src="/2023/03/01/vaundy-byebyeme/suteteyo08.jpeg" alt="剧照"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">さーすでぃ今日は</span><br><span class="line">どこに行ってきたの？</span><br><span class="line">遅いでしょ</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">今天星期四了</span><br><span class="line">你去了哪里逛呢？</span><br><span class="line">回来得有点晚哟</span><br></pre></td></tr></table></figure><p>周四 在家担心着安达小姐回来有点晚了的“东西” ，默默散发着一丝母爱</p><p>安达小姐作为童星很早就出道，现在也已经是母亲了</p><p>这是否也暗示着 每次梦里都会出现的神秘的少女 和安达的紧密联系呢？</p><p><img src="/2023/03/01/vaundy-byebyeme/suteteyo05.jpeg" alt="剧照"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ふらいでぃ今日は</span><br><span class="line">思い出していたの？</span><br><span class="line">あのことを</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">又是周五了</span><br><span class="line">你是否记起了</span><br><span class="line">那段久未拾起的回忆呢？</span><br></pre></td></tr></table></figure><p>周五的安达小姐，想要扔掉的「那个东西」是一段「回忆」，或者说「观念」（和其他集扔掉的都是实物 有所不同）</p><p>观众看到这集（第五集：想被别人喜欢），或许会在自己的记忆中有所共鸣吧？（为了去迁就、成全别人，去做过一些费力不讨好的事）</p><p><img src="/2023/03/01/vaundy-byebyeme/suteteyo10.jpeg" alt="剧照"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">でもさ</span><br><span class="line">遠く去った過去の日々と</span><br><span class="line">サヨナラしたら</span><br><span class="line">楽でしょ</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">但是吧</span><br><span class="line">如果对曾经的日子</span><br><span class="line">好好说一声“再见”的话</span><br><span class="line">也许就可以释怀吧？</span><br></pre></td></tr></table></figure><p>标题 「Bye by me」字面意思就是（和过去的自己）「再见」</p><p>与其反复记起过去的一些回忆，不如把它们都存放在内心深处 一个不容易被发现的角落</p><p>对过去的那些执着，也随着旧物品一起丢掉，才能感受到「解脱」吧</p><p><img src="/2023/03/01/vaundy-byebyeme/suteteyo04.jpeg" alt="剧照"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">休みの夜のやけ酒も</span><br><span class="line">それくらいにして</span><br><span class="line">もういいだろ？</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">就好像在休息日的夜晚</span><br><span class="line">举杯畅饮那般</span><br><span class="line">这样就满足了吗</span><br></pre></td></tr></table></figure><p>温馨提醒: 过度饮酒当然是不健康的</p><p>副歌部分的「已经足够了」，在这里对应的就是倒入杯中之酒已经「足够了」</p><p>沉浸在「过去」，不断地给自己添酒买醉，与其陷入这种恶循环，不妨停下片刻，提醒自己 「（喝的酒）<strong>差不多已经够了吧</strong>」，或许就能从这种循环中解脱出来</p><p><img src="/2023/03/01/vaundy-byebyeme/suteteyo07.jpeg" alt="剧照"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">愛していたんだきっと</span><br><span class="line">思い出すことを</span><br><span class="line">愛して、愛して</span><br><span class="line">満たしているなら</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">你一定还牵挂着</span><br><span class="line">一些放不下的回忆吧</span><br><span class="line">想念着，困扰着</span><br><span class="line">满腔思绪，如果快要承受不住</span><br></pre></td></tr></table></figure><p>「向回忆致以拥抱」这种生活态度，也许是最高级的温柔</p><p>被「过去」束缚住，尽管有所自觉，也难免深陷对自己这种状态的厌恶当中。这种情况下还能改善现状，<strong>必定是被别人「关心」着，或者是被别人肯定着</strong>，才能以轻松的心态继续前进（否则一定需要时间去调整的）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">忘れても、もういいよ</span><br><span class="line">伝えたいことはもう伝えたから</span><br><span class="line">忘れても、もういいよ</span><br><span class="line">この先もいっぱいたまっていくから</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">不如放下那些回忆吧，也没什么</span><br><span class="line">你心里想说的话，都已经传达给我们了</span><br><span class="line">就算再也不记得那些事，也没关系</span><br><span class="line">以后你还会拥有更多更多的回忆</span><br></pre></td></tr></table></figure><p>「已经可以了」还有一种含义就是 「<strong>忘记（那些回忆）也没关系</strong>」</p><p>我们所生活的时刻，也是由无数个「当下」连结而成的，认知也好，记忆也好，都是在不断增加的过程。<strong>平时 想追求怎样的目标，想在什么事情上花更多精力，还是取决于自己</strong>。对那些让自己不开心的事情，最好就「忘记」吧，向前看，发现更值得去热爱的事情</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">愛してやまない傷を</span><br><span class="line">無くして新しい日々を</span><br><span class="line">またね</span><br><span class="line">Bye by me~~</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">抚慰快愈合的伤痕</span><br><span class="line">挥别将结束的一天</span><br><span class="line">再见啦，明天的我</span><br><span class="line">Bye by me~~</span><br></pre></td></tr></table></figure><p>最后一段副歌 总结了作者的一种<strong>反向对待人生烦恼</strong>的态度：​ 「接受回忆在内心的伤痕」的同时，「越积越多的身边物品和烦恼，都把它们丢掉吧」（译者：其实就是电视剧的主题）</p><p>简单点做起，那不如就<strong>明天起床，以轻松愉快的态度，去迎接新的一天吧</strong></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>MV才是这首歌的灵魂</p><p>通过闪现的方式讲述一段故事之后</p><p>在某一瞬间，这些回忆好像都消失不见，回到现实，我还是我自己，一直都是活在当下的自己</p>]]></content>
    
    
    <summary type="html">跟过去道别</summary>
    
    
    
    <category term="音乐" scheme="http://smiecj.github.io/categories/%E9%9F%B3%E4%B9%90/"/>
    
    <category term="Vaundy" scheme="http://smiecj.github.io/categories/%E9%9F%B3%E4%B9%90/Vaundy/"/>
    
    
    <category term="音乐" scheme="http://smiecj.github.io/tags/%E9%9F%B3%E4%B9%90/"/>
    
    <category term="日语" scheme="http://smiecj.github.io/tags/%E6%97%A5%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>那个男孩</title>
    <link href="http://smiecj.github.io/2023/01/30/life-202301/"/>
    <id>http://smiecj.github.io/2023/01/30/life-202301/</id>
    <published>2023-01-29T16:00:00.000Z</published>
    <updated>2023-01-29T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="腌面"><a href="#腌面" class="headerlink" title="腌面"></a>腌面</h2><p>就在家门口吃到了很不错的腌面，面的口感非常到位，汤里面的酒糟也是画龙点睛</p><p>面里面的葱蒜稍微少了一点，不过也无碍了，这就是家乡的味道</p><p><img src="/2023/01/30/life-202301/02.png" alt="腌面"></p><h2 id="民间足球"><a href="#民间足球" class="headerlink" title="民间足球"></a>民间足球</h2><p>老家的足球文化还是挺不错的，到村里初中看看，都在举办一场球赛</p><p>看着这些说不上有名气的赞助商，球场简陋的环境，但球场周边却不乏热情的观众，不禁又联想到去年和大家一起看的国足比赛了，无奈笑出了声</p><p>还是不吐槽罢了，真到了国足能有起色那天，一定不会少了真心热爱足球的观众。现在所希望的只是让这种平凡的比赛，能真正被社会关注，带动起民间足球的氛围</p><p><img src="/2023/01/30/life-202301/03.jpeg" alt="老家足球"></p><h2 id="英超"><a href="#英超" class="headerlink" title="英超"></a>英超</h2><p>连续两年都有足球节目，只是相比去年让人闹心的结果，今年换成了酣畅淋漓的对攻剧本</p><p>做个中立球迷还是挺好的，什么结果都能接受，什么热闹都能凑</p><p><img src="/2023/01/30/life-202301/04.png" alt="看英超"></p><h2 id="创造"><a href="#创造" class="headerlink" title="创造"></a>创造</h2><p>和亲戚聊天聊到一个问题：如何能过上自己满意的人生</p><p>这个问题肯定很难，我们也没讨论出一个共识，毕竟每个人都有权对自己的人生进行规划，这种问题非要达成共识的话，方向就已经有问题了</p><p>最通用的办法，可能还是先接受现实 ，再试图创造不一样的东西 。接受现实更多的是迫不得已，我们已经经历了低谷的三年，今年可能会好转，但谁也说不准。创造这点也是和疫情有关：封控三年，需要改变的不只是相关政策，还有人们思想的惯性，治疗内心的伤痕。很多人还习惯于听天由命，不受控制的生活节奏中。只有自己相信 自己能改变什么，能创造出什么东西的时候，才能拨动久未触动的内心</p><h2 id="纸炮"><a href="#纸炮" class="headerlink" title="纸炮"></a>纸炮</h2><p>回到老家发现纸炮已经买好了</p><p>看到纸箱里满满的一堆手持烟花和三响炮，还厚古薄今，跟老家小孩子说这都是我们以前玩剩的，没有鱼雷，就没那味</p><p>结果跟他们一起玩起来，还不是有种回到童年的感觉</p><p>随时间变化的可能不只是烟花，还有童心</p><p><img src="/2023/01/30/life-202301/05.png" alt="噼里啪啦"></p><h2 id="那个男孩"><a href="#那个男孩" class="headerlink" title="那个男孩"></a>那个男孩</h2><p>那个生活中有很多烦恼，但依然选择在过年期间，给自己弟弟妹妹报以最纯真笑颜的男孩</p><p>那个还没从校园毕业，但已经考虑好这两年的发展方向，构想着成家之后家庭模样的男孩</p><p>那个作为长辈，承担很多事情，承受着来自后生和更长辈的各种目光，但依然能从容应对，还能给后辈适时提醒和引导的“男孩”</p><p>有幸认识这些男孩</p>]]></content>
    
    
    <summary type="html">过年随想</summary>
    
    
    
    <category term="生活" scheme="http://smiecj.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="记录" scheme="http://smiecj.github.io/categories/%E7%94%9F%E6%B4%BB/%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="生活" scheme="http://smiecj.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>sadserver 题目思路概述</title>
    <link href="http://smiecj.github.io/2023/01/17/sadserver-intro/"/>
    <id>http://smiecj.github.io/2023/01/17/sadserver-intro/</id>
    <published>2023-01-16T16:00:00.000Z</published>
    <updated>2023-01-16T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>从 <a href="https://www.ruanyifeng.com/blog/2022/11/weekly-issue-230.html">阮一峰老师的博客</a> 了解到 <a href="https://sadservers.com/">sadserver</a> 可以在线挑战一些 linux 指令相关问题（整体难度一般，但做题体验不错，有提示），这里将目前网站提供的的16道题进行简单解答，提供思路和相关指令</p><p><a href="https://blog.csdn.net/xiaoliizi/article/details/128788916">本文 csdn 博客地址</a></p><h2 id="如何解题"><a href="#如何解题" class="headerlink" title="如何解题"></a>如何解题</h2><p>进入 首页 “Show Me Sad Servers” 点击题目，按照题目指引，在提供的 linux 服务器上进行指令操作</p><p><img src="/2023/01/17/sadserver-intro/sadserver_scene01.png" alt="打开题目"></p><p><img src="/2023/01/17/sadserver-intro/sadserver_scene03.png" alt="题目示例"></p><p>操作完成后，点击 “Check My Solution” 即可确认解答是否正确</p><p><img src="/2023/01/17/sadserver-intro/sadserver_scene02.png" alt="操作正确结果"></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="“Saint-John”-what-is-writing-to-this-log-file"><a href="#“Saint-John”-what-is-writing-to-this-log-file" class="headerlink" title="“Saint John”: what is writing to this log file?"></a><a href="https://sadservers.com/newserver/saint-john">“Saint John”: what is writing to this log file?</a></h3><p><img src="/2023/01/17/sadserver-intro/sadserver01.png" alt="题目"></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>找到文件占用的进程，并关闭</p><h4 id="相关指令"><a href="#相关指令" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 确认文件占用进程</span><br><span class="line">lsof /var/log/bad.log</span><br><span class="line"></span><br><span class="line"># 确认文件是否最近未更新</span><br><span class="line">find /var/log/bad.log -mmin -0.1</span><br></pre></td></tr></table></figure><h3 id="“Saskatoon”-counting-IPs"><a href="#“Saskatoon”-counting-IPs" class="headerlink" title="“Saskatoon”: counting IPs."></a><a href="https://sadservers.com/newserver/saskatoon">“Saskatoon”: counting IPs.</a></h3><p><img src="/2023/01/17/sadserver-intro/sadserver02.png" alt="题目"></p><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>统计字符串出现次数，并倒序排列</p><h4 id="相关指令-1"><a href="#相关指令-1" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 排序</span><br><span class="line">sort</span><br><span class="line"></span><br><span class="line"># 统计字符串出现次数</span><br><span class="line">uniq -c</span><br><span class="line"></span><br><span class="line"># 按数字格式倒序</span><br><span class="line">sort -nr</span><br></pre></td></tr></table></figure><h3 id="“Santiago”-Find-the-secret-combination"><a href="#“Santiago”-Find-the-secret-combination" class="headerlink" title="“Santiago”: Find the secret combination"></a>“Santiago”: Find the secret combination</h3><p><img src="/2023/01/17/sadserver-intro/sadserver03.png" alt="题目"></p><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>计数、输出相邻行和过滤</p><h4 id="相关指令-2"><a href="#相关指令-2" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 统计行数</span><br><span class="line">wc -l</span><br><span class="line"></span><br><span class="line"># 输出之后一行</span><br><span class="line">grep &quot;Alice&quot; -A1</span><br><span class="line"></span><br><span class="line"># 过滤数字</span><br><span class="line">grep -oE &quot;[0-9]+&quot;</span><br></pre></td></tr></table></figure><h3 id="“Manhattan”-can’t-write-data-into-database"><a href="#“Manhattan”-can’t-write-data-into-database" class="headerlink" title="“Manhattan”: can’t write data into database."></a><a href="https://sadservers.com/newserver/manhattan">“Manhattan”: can’t write data into database.</a></h3><p><img src="/2023/01/17/sadserver-intro/sadserver04.png" alt="题目"></p><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><p>确认postgresql启动失败原因，手动启动</p><h4 id="相关指令-3"><a href="#相关指令-3" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 手动启动</span><br><span class="line">su postgres -c &quot;/usr/lib/postgresql/14/bin/postgres -D /opt/pgdata/main -c config_file=/etc/postgresql/14/main/postgresql.conf&quot;</span><br><span class="line"></span><br><span class="line"># 检查 postgresql 数据目录下的文件</span><br><span class="line">ls -l /opt/pgdata/</span><br><span class="line"></span><br><span class="line"># 重启 postgresql</span><br><span class="line">systemctl restart postgresql</span><br></pre></td></tr></table></figure><h3 id="“Tokyo”-can’t-serve-web-file"><a href="#“Tokyo”-can’t-serve-web-file" class="headerlink" title="“Tokyo”: can’t serve web file"></a><a href="https://sadservers.com/newserver/tokyo">“Tokyo”: can’t serve web file</a></h3><p><img src="/2023/01/17/sadserver-intro/sadserver05.png" alt="题目"></p><h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><p>通过 <a href="https://www.jiyik.com/tm/xwzj/opersys_1579.html">iptables</a> 指令检查本地防火墙规则</p><h4 id="相关指令-4"><a href="#相关指令-4" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 查看防火墙规则列表</span><br><span class="line">iptables -L</span><br><span class="line"></span><br><span class="line"># 清空所有防火墙规则</span><br><span class="line">iptables -F</span><br><span class="line"></span><br><span class="line"># 访问 [apache2](https://github.com/apache/httpd) 链接， 查看具体报错</span><br><span class="line">curl -i localhost:80</span><br><span class="line"></span><br><span class="line"># 文件添加可读权限</span><br><span class="line">chmod +r /var/www/html/index.html</span><br></pre></td></tr></table></figure><h3 id="“Cape-Town”-Borked-Nginx"><a href="#“Cape-Town”-Borked-Nginx" class="headerlink" title="“Cape Town”: Borked Nginx"></a><a href="https://sadservers.com/newserver/capetown">“Cape Town”: Borked Nginx</a></h3><p><img src="/2023/01/17/sadserver-intro/sadserver06.png" alt="题目"></p><h4 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h4><p>调整系统打开文件数</p><h4 id="相关指令-5"><a href="#相关指令-5" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 手动启动 nginx</span><br><span class="line">nginx</span><br><span class="line"></span><br><span class="line"># 正常流程启动 nginx</span><br><span class="line">systemctl start nginx</span><br><span class="line"></span><br><span class="line"># 查看 nginx 启动错误日志</span><br><span class="line">vim /var/log/nginx/error.log</span><br><span class="line"></span><br><span class="line"># 检查 nginx 服务配置</span><br><span class="line">vim /etc/systemd/system/nginx.service</span><br><span class="line"></span><br><span class="line"># 重新加载配置并重启 nginx</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><h3 id="“Salta”-Docker-container-won’t-start"><a href="#“Salta”-Docker-container-won’t-start" class="headerlink" title="“Salta”: Docker container won’t start."></a><a href="https://sadservers.com/newserver/salta">“Salta”: Docker container won’t start.</a></h3><p><img src="/2023/01/17/sadserver-intro/sadserver07.png" alt="题目"></p><h4 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h4><p>检查端口占用，关闭占用8888 端口的其他服务，并检查 容器app 的启动日志，修复 nodejs 服务启动失败问题</p><h4 id="相关指令-6"><a href="#相关指令-6" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 检查端口占用</span><br><span class="line">netstat -tunlp | grep 8888</span><br><span class="line"></span><br><span class="line"># 启动容器</span><br><span class="line">docker start 124a4fb17a1c</span><br><span class="line"></span><br><span class="line"># 查看启动日志</span><br><span class="line">docker logs 124a4fb17a1c</span><br><span class="line"></span><br><span class="line"># 检查 Dockerfile 中的 CMD 启动命令</span><br><span class="line">cd /home/admin/app</span><br><span class="line">vim Dockerfile</span><br><span class="line"></span><br><span class="line"># 构建镜像</span><br><span class="line">docker build -t app .</span><br><span class="line"></span><br><span class="line"># 启动容器 并 开放端口</span><br><span class="line">docker run -d -p 8888:8888 app</span><br></pre></td></tr></table></figure><h3 id="“Venice”-Am-I-in-a-container"><a href="#“Venice”-Am-I-in-a-container" class="headerlink" title="“Venice”: Am I in a container?"></a><a href="https://sadservers.com/newserver/venice">“Venice”: Am I in a container?</a></h3><p><img src="/2023/01/17/sadserver-intro/sadserver08.png" alt="题目"></p><h4 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h4><p>没有需要解决的问题，主要引导大家思考 如何判断连接的服务器是在容器内，还是宿主机</p><p><a href="https://blog.csdn.net/mar_ljh/article/details/109011822">参考-如何判断当前linux是 docker容器 还是 虚拟机/物理机</a></p><h4 id="相关指令-7"><a href="#相关指令-7" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 判断是否是 podman container</span><br><span class="line">cat /proc/1/environ |tr &quot;\0&quot; &quot;\n&quot; | grep container</span><br></pre></td></tr></table></figure><p><a href="https://podman.io/getting-started/">podman</a> 相关介绍: <a href="https://www.lambdatest.com/blog/podman-vs-docker/">Podman vs Docker: All You Need To Know!</a></p><h3 id="“Oaxaca”-Close-an-Open-File"><a href="#“Oaxaca”-Close-an-Open-File" class="headerlink" title="“Oaxaca”: Close an Open File"></a><a href="https://sadservers.com/newserver/oaxaca">“Oaxaca”: Close an Open File</a></h3><p><img src="/2023/01/17/sadserver-intro/sadserver09.png" alt="题目"></p><h4 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h4><p>找到占用文件的进程，判断会产生这个进程的原因，彻底关闭并让进程不再启动</p><h4 id="相关指令-8"><a href="#相关指令-8" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 找到占用文件的进程 ，并直接 kill 掉</span><br><span class="line">lsof /home/admin/somefile | tail -2 | awk &#x27;&#123;print $2&#125;&#x27; | xargs kill -9</span><br><span class="line"></span><br><span class="line"># 检查 bash</span><br><span class="line">vim /home/admin/.bashrc</span><br></pre></td></tr></table></figure><h3 id="“Melbourne”-WSGI-with-Gunicorn"><a href="#“Melbourne”-WSGI-with-Gunicorn" class="headerlink" title="“Melbourne”: WSGI with Gunicorn"></a><a href="https://sadservers.com/newserver/melbourne">“Melbourne”: WSGI with Gunicorn</a></h3><p><img src="/2023/01/17/sadserver-intro/sadserver10.png" alt="题目"></p><h4 id="思路-9"><a href="#思路-9" class="headerlink" title="思路"></a>思路</h4><p>修复 nginx 和 wsgi 服务配置</p><h4 id="相关指令-9"><a href="#相关指令-9" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 查看 nginx 配置</span><br><span class="line">vim /etc/nginx/sites-enabled/default</span><br><span class="line"></span><br><span class="line"># 查看 gunicorn 配置</span><br><span class="line">vim /etc/systemd/system/gunicorn.service</span><br><span class="line"></span><br><span class="line"># 查看 wsgi 服务配置</span><br><span class="line">vim /home/admin/wsgi.py</span><br><span class="line"></span><br><span class="line"># 重启 gunicorn</span><br><span class="line">systemctl restart gunicorn</span><br></pre></td></tr></table></figure><p><a href="https://zh.wikipedia.org/zh-cn/Web%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BD%91%E5%85%B3%E6%8E%A5%E5%8F%A3">WSGI</a>: Web Server Gateway Interface, 为Python语言定义的Web服务器和Web应用程序或框架之间的一种简单而通用的接口</p><p><a href="https://docs.gunicorn.org/en/stable/">gunicorn</a>: 基于 WSGI 实现的http服务器，类似 httpd</p><h3 id="“Lisbon”-etcd-SSL-cert-troubles"><a href="#“Lisbon”-etcd-SSL-cert-troubles" class="headerlink" title="“Lisbon”: etcd SSL cert troubles"></a><a href="https://sadservers.com/newserver/lisbon">“Lisbon”: etcd SSL cert troubles</a></h3><p><img src="/2023/01/17/sadserver-intro/sadserver11.png" alt="题目"></p><h4 id="思路-10"><a href="#思路-10" class="headerlink" title="思路"></a>思路</h4><p>思路：重新生成证书<br>解决机器时间问题、解决 iptables 规则错误问题</p><h4 id="相关指令-10"><a href="#相关指令-10" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 通过 etcdctl 获取配置</span><br><span class="line">etcdctl get foo</span><br><span class="line"></span><br><span class="line"># 设置系统时间为一年前的时间</span><br><span class="line">date -s &quot;last year&quot;</span><br><span class="line"></span><br><span class="line"># 调用校验</span><br><span class="line">curl -ik https://localhost:2379/v2/keys/foo</span><br><span class="line"></span><br><span class="line"># 获取指令</span><br></pre></td></tr></table></figure><h3 id="“Jakarta”-it’s-always-DNS"><a href="#“Jakarta”-it’s-always-DNS" class="headerlink" title="“Jakarta”: it’s always DNS."></a><a href="https://sadservers.com/newserver/jakarta">“Jakarta”: it’s always DNS.</a></h3><p><img src="/2023/01/17/sadserver-intro/sadserver12.png" alt="题目"></p><h4 id="思路-11"><a href="#思路-11" class="headerlink" title="思路"></a>思路</h4><p>修复域名解析顺序问题</p><h4 id="相关指令-11"><a href="#相关指令-11" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 编辑配置解析顺序</span><br><span class="line">vim /etc/nsswitch.conf</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/emilyyoucan/articles/8118173.html">参考-Linux系统解析域名的先后顺序files（/etc/hosts）OR dns（/etc/resolv.conf）</a></p><h3 id="“Bern”-Docker-web-container-can’t-connect-to-db-container"><a href="#“Bern”-Docker-web-container-can’t-connect-to-db-container" class="headerlink" title="“Bern”: Docker web container can’t connect to db container."></a><a href="https://sadservers.com/newserver/bern">“Bern”: Docker web container can’t connect to db container.</a></h3><p><img src="/2023/01/17/sadserver-intro/sadserver13.png" alt="题目"></p><h4 id="思路-12"><a href="#思路-12" class="headerlink" title="思路"></a>思路</h4><p>修正 wordpress 连接 mysql 配置<br>注意：这道题题目自检查有问题，只要不返回错误信息即可</p><h4 id="相关指令-12"><a href="#相关指令-12" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 检查 wordpress 连接 mysql（没有异常返回则正常）</span><br><span class="line">curl -s localhost:80 | tail -4</span><br><span class="line"></span><br><span class="line"># 查看 wordpress 容器和 mysql 相关的配置</span><br><span class="line">docker exec 6ffb084b515c env | grep &quot;WORDPRESS_DB&quot;</span><br><span class="line"></span><br><span class="line"># 查看 mysql(mariadb) 容器配置</span><br><span class="line">docker exec 0eef97284c44 env | grep MYSQL</span><br><span class="line"></span><br><span class="line"># 检查 mysql 连接</span><br><span class="line">mysql -h127.0.0.1 -P3306 -uroot -ppassword</span><br><span class="line"></span><br><span class="line"># 进入 wordpress 容器</span><br><span class="line">docker exec -it 6ffb084b515c /bin/bash</span><br><span class="line"></span><br><span class="line"># 修正配置</span><br><span class="line">sed -i &quot;s#define( &#x27;DB_HOST&#x27;.*#define( &#x27;DB_HOST&#x27;, &#x27;172.17.0.1&#x27;);#g&quot; wp-config.php</span><br><span class="line"></span><br><span class="line"># 关闭/启动容器</span><br><span class="line">docker kill 6ffb084b515c</span><br><span class="line">docker start 6ffb084b515c</span><br></pre></td></tr></table></figure><h3 id="“Karakorum”-WTFIT-–-What-The-Fun-Is-This"><a href="#“Karakorum”-WTFIT-–-What-The-Fun-Is-This" class="headerlink" title="“Karakorum”: WTFIT – What The Fun Is This?"></a><a href="https://sadservers.com/newserver/karakorum">“Karakorum”: WTFIT – What The Fun Is This?</a></h3><p><img src="/2023/01/17/sadserver-intro/sadserver14.png" alt="题目"></p><h4 id="思路-13"><a href="#思路-13" class="headerlink" title="思路"></a>思路</h4><p>通过 系统调用 执行 linux 指令</p><h4 id="相关指令-13"><a href="#相关指令-13" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 通过 perl 脚本调用</span><br><span class="line">perl -e &#x27;chmod 0755, &quot;/usr/bin/chmod&quot;&#x27;</span><br><span class="line"></span><br><span class="line"># 通过 ld-linux 库调用</span><br><span class="line">/lib64/ld-linux-x86-64.so.2 /usr/bin/chmod +x /usr/bin/chmod</span><br></pre></td></tr></table></figure><p><a href="https://linux.die.net/man/8/ld-linux.so">参考-ld-linux.so(8) - Linux man page</a></p><p><a href="https://www.tutorialspoint.com/perl/perl_chmod.htm">参考-Perl chmod Function</a></p><h3 id="“Singara”-Docker-and-Kubernetes-web-app-not-working"><a href="#“Singara”-Docker-and-Kubernetes-web-app-not-working" class="headerlink" title="“Singara”: Docker and Kubernetes web app not working."></a><a href="https://sadservers.com/newserver/singara">“Singara”: Docker and Kubernetes web app not working.</a></h3><p><img src="/2023/01/17/sadserver-intro/sadserver15.png" alt="题目"></p><h4 id="思路-14"><a href="#思路-14" class="headerlink" title="思路"></a>思路</h4><p>重建、提交镜像，开放端口</p><h4 id="相关指令-14"><a href="#相关指令-14" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 获取所有 pod</span><br><span class="line">kubectl get pod -A</span><br><span class="line"></span><br><span class="line"># 获取 pod 的描述信息</span><br><span class="line">kubectl describe pod webapp-deployment-666b67994b-5sffz -n web</span><br><span class="line"></span><br><span class="line"># 启动 register 镜像仓库</span><br><span class="line">docker run -d -p 5000:5000 registry:2</span><br><span class="line"></span><br><span class="line"># 提交镜像</span><br><span class="line">docker tag webapp localhost:5000/webapp</span><br><span class="line">docker push localhost:5000/webapp</span><br><span class="line"></span><br><span class="line"># 修改 deployment 并重新启动</span><br><span class="line">kubectl delete deploy webapp-deployment -n web</span><br><span class="line">vim /home/admin/deployment.yml</span><br><span class="line">kubectl apply -f /home/admin/deployment.yml</span><br><span class="line"></span><br><span class="line"># 开放端口</span><br><span class="line">kubectl port-forward deployments/webapp-deployment 8888 -n web</span><br></pre></td></tr></table></figure><h3 id="“Hong-Kong”-can’t-write-data-into-database"><a href="#“Hong-Kong”-can’t-write-data-into-database" class="headerlink" title="“Hong-Kong”: can’t write data into database."></a><a href="https://sadservers.com/newserver/hongkong">“Hong-Kong”: can’t write data into database.</a></h3><p><img src="/2023/01/17/sadserver-intro/sadserver16.png" alt="题目"></p><h4 id="思路-15"><a href="#思路-15" class="headerlink" title="思路"></a>思路</h4><p>确认 pgsql 启动失败原因，重启后新建库表</p><h4 id="相关指令-15"><a href="#相关指令-15" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 检查配置</span><br><span class="line">vim /etc/postgresql/14/main/postgresql.conf</span><br><span class="line"></span><br><span class="line"># 创建数据目录并初始化</span><br><span class="line">mkdir -p /opt/pgdata</span><br><span class="line">chown -R postgres:postgres /opt/pgdata</span><br><span class="line">su postgres -c &quot;/usr/lib/postgresql/14/bin/initdb -D /opt/pgdata/main&quot;</span><br><span class="line"></span><br><span class="line"># 创建库表</span><br><span class="line">sudo -u postgres psql -c &quot;create database dt&quot;</span><br><span class="line">sudo -u postgres psql -c &quot;CREATE TABLE persons(name varchar(100))&quot; -d dt</span><br><span class="line"></span><br><span class="line"># 插入数据</span><br><span class="line">sudo -u postgres psql -c &quot;insert into persons(name) values (&#x27;jane smith&#x27;);&quot; -d dt</span><br></pre></td></tr></table></figure><h3 id="“Pokhara”-SSH-and-other-sshenanigans"><a href="#“Pokhara”-SSH-and-other-sshenanigans" class="headerlink" title="“Pokhara”: SSH and other sshenanigans"></a><a href="https://sadservers.com/newserver/pokhara">“Pokhara”: SSH and other sshenanigans</a></h3><p><img src="/2023/01/17/sadserver-intro/sadserver17.png" alt="题目"></p><h4 id="思路-16"><a href="#思路-16" class="headerlink" title="思路"></a>思路</h4><p>思路：这道题涉及面很广，包括 ssh 配置、linux 用户配置、用户可用系统资源配置等，有一定挑战性</p><h4 id="相关指令-16"><a href="#相关指令-16" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 清空 known_hosts 配置</span><br><span class="line">ssh-keygen -f &quot;/home/client/.ssh/known_hosts&quot; -R &quot;localhost&quot;</span><br><span class="line"></span><br><span class="line"># 删除 ssh 错误配置并重启服务</span><br><span class="line">rm /etc/ssh/sshd_config.d/sad.conf</span><br><span class="line">systemctl restart ssh</span><br><span class="line"></span><br><span class="line"># 修正私钥文件权限</span><br><span class="line">chmod 600 /home/client/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line"># 查看用户过期时间</span><br><span class="line">chage -l client</span><br><span class="line"></span><br><span class="line"># 修改用户过期时间</span><br><span class="line">chage -E 2023-03-01 client</span><br><span class="line"></span><br><span class="line"># 查看文件描述符配置 （需要修改）</span><br><span class="line">vim /etc/security/limits.conf</span><br><span class="line"></span><br><span class="line"># 查看用户登录信息 （登录脚本）</span><br><span class="line">lslogins client</span><br><span class="line"></span><br><span class="line"># 设置用户登录 shell 为 /bin/bash</span><br><span class="line">usermod --shell /bin/bash client</span><br></pre></td></tr></table></figure><h3 id="“Roseau”-Hack-a-Web-Server"><a href="#“Roseau”-Hack-a-Web-Server" class="headerlink" title="“Roseau”: Hack a Web Server"></a><a href="https://sadservers.com/newserver/roseau">“Roseau”: Hack a Web Server</a></h3><p><img src="/2023/01/17/sadserver-intro/sadserver18.png" alt="题目"></p><h4 id="思路-17"><a href="#思路-17" class="headerlink" title="思路"></a>思路</h4><p>本题主要是介绍暴力破解工具 <a href="https://github.com/openwall/john">john</a> 的使用。实测稍微复杂点的密码就需要很长时间才能破解了，因此稍做了解就好</p><p><a href="https://zhuanlan.zhihu.com/p/395718068">参考-使用John the ripper破解密码</a></p><h4 id="相关指令-17"><a href="#相关指令-17" class="headerlink" title="相关指令"></a>相关指令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 查看 httpd 配置</span><br><span class="line">cat /etc/apache2/sites-enabled/000-default.conf</span><br><span class="line"></span><br><span class="line"># 破解 httpd 密码</span><br><span class="line">cd ~ ; john/run/john /etc/apache2/.htpasswd</span><br><span class="line"></span><br><span class="line"># 下载 webfile 文件</span><br><span class="line">curl localhost/webfile -u &quot;carlos:替换成账号密码&quot; --output secret</span><br><span class="line"></span><br><span class="line"># 解密 secret （zip 压缩包） 密码</span><br><span class="line">john/run/zip2john secret &gt; zip.hash</span><br><span class="line">john/run/john zip.hash</span><br></pre></td></tr></table></figure><h3 id="“Belo-Horizonte”-A-Java-Enigma"><a href="#“Belo-Horizonte”-A-Java-Enigma" class="headerlink" title="“Belo-Horizonte”: A Java Enigma"></a><a href="https://sadservers.com/newserver/belo-horizonte">“Belo-Horizonte”: A Java Enigma</a></h3><h4 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h4><h2 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h2><p>作者温馨提醒: 做完一道题之后最好及时关闭服务器，可以帮他省钱</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo shutdown -h now</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">linux 指令练手</summary>
    
    
    
    <category term="操作系统" scheme="http://smiecj.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="linux" scheme="http://smiecj.github.io/tags/linux/"/>
    
    <category term="操作系统" scheme="http://smiecj.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>【翻译】怪獣の花唄 歌曲鉴赏</title>
    <link href="http://smiecj.github.io/2023/01/08/vaundy-kaijunohanauta/"/>
    <id>http://smiecj.github.io/2023/01/08/vaundy-kaijunohanauta/</id>
    <published>2023-01-07T16:00:00.000Z</published>
    <updated>2023-01-07T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="译者序"><a href="#译者序" class="headerlink" title="译者序"></a>译者序</h2><p>作为 Vaundy 的第一张专辑 《<strong>strobo</strong>》收录的歌曲，算是比较早就认识这首歌了，不过第一次听 还没有很特别的感觉​</p><p>直到一天看到了MV，才真正明白这首歌想表达的东西：​每个人内心的那个 “<strong>怪兽</strong>” 都不太一样，但最后都可以归结成 “<strong>勇气</strong>” 。这首歌呼喊着男主儿时看到的怪兽，其实也是在呼喊着我们的勇气</p><p>今年的红白（日本电视台 NHK 于跨年夜举办的歌会，将当年比较热门的歌手分成红白两组，轮番上台演唱PK，故简称“红白”）上，Vaundy 也选择了这首作为个人主打曲。台风非常耀眼，几乎把红白唱成了自己的演唱会</p><p>话不多说，一起来欣赏这首 属于新生态歌手独特的光芒吧</p><p><a href="https://media.framu.world/columns/lyrics_consideration/kaijunohanauta/">原文-怪獣の花唄【Vaundy】歌詞の意味を考察！怪獣の花唄と怪獣の歌の違いに迫る</a></p><p><a href="https://www.youtube.com/watch?v=UM9XNpgrqVk">歌曲MV(油管)</a><br><a href="https://www.bilibili.com/video/BV1aa411b7n3">歌曲MV(B站)</a><br><a href="https://www.bilibili.com/video/BV12P4y1v79R">红白演唱</a><br><a href="https://www.youtube.com/watch?v=lYLa6zyjhSI">2022.09.09 one man live at BUDOKAN 演唱</a></p><h2 id="作者序"><a href="#作者序" class="headerlink" title="作者序"></a>作者序</h2><p>这次让我们来欣赏Vaundy作词作曲的数字单曲《怪兽的花之歌》（20年5月发布，收录进第一张专辑 《strobo》），一起来赏析歌词里面的含义吧</p><h2 id="歌曲部分"><a href="#歌曲部分" class="headerlink" title="歌曲部分"></a>歌曲部分</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">思い出すのは君の歌</span><br><span class="line">会話よりも鮮明だ</span><br><span class="line">どこに行ってしまったの</span><br><span class="line">いつも探すんだよ</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">回忆起的是你的歌声</span><br><span class="line">比我们聊过的话更加刻骨铭心</span><br><span class="line">你到底去哪里了呢</span><br><span class="line">我可是一直都在寻找着你</span><br></pre></td></tr></table></figure><p>《怪兽的花之歌》歌名里面的词都很好懂，但是根据听者站在不同的角度，又可以有各种各样的解读</p><p>开头是歌曲主角的旁白：我突然回忆起一段旋律，它属于不知去向何方的你。相比那天我们聊过的话，歌曲给我带来的回忆更加强烈。然而，我所心心念念的「<strong>你</strong>」到底是谁，对「<strong>我</strong>」而言又是什么样的存在，作者并没有点明。甚至直到歌曲最后，「<strong>你到底去了何方</strong>」也还是一个谜</p><p><img src="/2023/01/08/vaundy-kaijunohanauta/kaijunohanauta04.png" alt="MV画面"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">思い出すのは君の歌</span><br><span class="line">歌い笑う顔が鮮明だ</span><br><span class="line">君に似合うんだよ</span><br><span class="line">ずっと見ていたいよ</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">回想起了你的歌声</span><br><span class="line">唱着歌的笑颜也逐渐清晰</span><br><span class="line">那模样除了你还会有谁</span><br><span class="line">我可是一直都想再见你一面啊</span><br></pre></td></tr></table></figure><p>「我」一直期待着 再次看到你那唱着歌的笑颜</p><p>然而，不管怎么试图让回忆变得清晰，现实中我已经看不到你的面容，更听不到你的歌声</p><p>都是因为你已经离我而去，到了我无法知晓的远方</p><p>那么又是为何，「我」 要如此执着于 回忆起 「你的歌曲」呢？</p><p>这里可能也暗藏着问题 「你对我来说，到底是什么样的存在呢？」的答案</p><p><img src="/2023/01/08/vaundy-kaijunohanauta/kaijunohanauta05.png" alt="MV画面"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">でも最後に見たいのは</span><br><span class="line">きっともう君の夢の中</span><br><span class="line">もう一度 また聞かせてくれよ</span><br><span class="line">聞きたいんだ</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">但是最后想见到的你</span><br><span class="line">一定已经让我魂牵梦萦</span><br><span class="line">就让我再听一次吧</span><br><span class="line">我是真的想再听到这首歌啊</span><br></pre></td></tr></table></figure><p>关于「你」是谁的解读，有两种比较被认可：「<strong>年少时期的自己</strong>」和 「<strong>去世的挚友</strong>」</p><p>对前者说法的解释是，Vaundy 生日是2000年6月6日，《怪兽的花之歌》发行之日 2020年5月11日，Vaundy 刚好快满20岁。咋即将迈向新的10年之际，不由而感 那个 「年少的自己」「去哪里了呢」。在这个10年青春的「最后」，最初陪伴自己创作音乐的动力：<strong>摇滚之魂</strong>，再次被唤醒，最终作出了这首歌</p><p><img src="/2023/01/08/vaundy-kaijunohanauta/kaijunohanauta07.png" alt="MV画面"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">もっと 騒げ怪獣の歌</span><br><span class="line">まだ消えない</span><br><span class="line">夢の歌唱えて</span><br><span class="line">君がいつも 歌う怪獣の歌</span><br><span class="line">まだ消えない</span><br><span class="line">口ずさんでしまうよ</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">再来一次吧，这首属于你喧闹的怪兽之歌</span><br><span class="line">还没有消失，甚至更加清晰</span><br><span class="line">大声呼唤着我的梦想</span><br><span class="line">你也曾在那时，不知疲倦地唱着这首怪兽之歌</span><br><span class="line">我无法忘却</span><br><span class="line">不知不觉又哼唱起来</span><br></pre></td></tr></table></figure><p>副歌部分真的很好听</p><p>接着 「你=年少的自己」的解读，「怪兽之歌」也许正好对应了「<strong>年少时期才华横溢的自己，抵挡不住的摇滚之魂</strong>」。然而如今，尽管还能从「梦中」强行唤回年少的回忆，这种回忆也「不会消失」，但我也只能哼唱那些回忆中的歌曲罢了（再也无法创作出这样的歌曲）</p><p>关于另一种解读 「你=逝去的挚友」，「怪兽之歌」就成为了「朋友年少时唱起的、仿佛歌声响起，就会有怪兽出现（拍摄特效也好，动画也好）的一首歌」。为纪念这首属于你的 「怪兽之歌」，也为了悼念逝去的你，我也要 「歌唱起、哼唱起」起来，「<strong>回忆中的这首歌颂梦想之歌</strong>」就慢慢成为了「<strong>怪兽的花之歌</strong>」</p><p><img src="/2023/01/08/vaundy-kaijunohanauta/kaijunohanauta08.png" alt="MV画面"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">怪獣の花唄と怪獣の歌ちゃんと別物です。</span><br><span class="line">この話はいつかしよう、ちゃんと理由がある</span><br><span class="line"></span><br><span class="line">—- Vaundy (@vaundy_engawa) May 11, 2020</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">怪兽的花之歌，和 怪兽之歌 是不一样的</span><br><span class="line">关于这个以后会解释，有很充分的理由</span><br><span class="line"></span><br><span class="line">-- Vaundy 于 2020.05.11 发表的推特</span><br></pre></td></tr></table></figure><p><img src="/2023/01/08/vaundy-kaijunohanauta/kaijunohanauta06.png" alt="推特"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">思い出すのは君がいた</span><br><span class="line">ギター持ってる君がいた</span><br><span class="line">忘れられないんだよ</span><br><span class="line">だから僕が歌うよ</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">回想起的是你在身边的日子</span><br><span class="line">那个抱起吉他，认真弹唱的你</span><br><span class="line">我念念不忘</span><br><span class="line">所以我要为你唱起这首歌</span><br></pre></td></tr></table></figure><p>歌词的翻译仁者见仁，但 「<strong>吉他</strong>」象征的意义，与其说是「“怪兽”登场时的音乐」，不如说是 「<strong>摇滚背后的反骨精神</strong>」（译者：结合 MV，这里的 “反骨” 更偏向积极的成分，有一种不畏现实的残酷，勇敢与之抗衡的精气神）</p><p>关于另一种解释：男主是为了迎接 「10年青春的结尾」这样一个人生重要节点，选择以 「<strong>我 = 长大后的自己</strong>」的身份，直面 「<strong>你 = 小时候的自己</strong>」，一边唱着歌，一边向「你」献上一束花，感谢曾经唱着「怪兽之歌 = 10岁世代的摇滚」 的 「你」，对如今的「我」，唱着 「怪兽的花之歌 = 20岁世代的摇滚」的我，一直以来的指引和激励</p><p>「<strong>怪兽</strong>」这个词本身带有一种肆意妄行、「吉他」手在奋力拨弦，尽力呐喊的样子</p><p>很多音乐家，不管怎么提醒自己 「创作音乐，特别是摇滚，一定不要忘记出道初期 的那种冲劲和反骨精神」，随着职业发展（自己创作的音乐更多了，听到的声音也变多了）还是容易忘记初心</p><p><img src="/2023/01/08/vaundy-kaijunohanauta/kaijunohanauta14.png" alt="MV画面"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">落ちてく過去は鮮明で</span><br><span class="line">見せたい未来は繊細で</span><br><span class="line">すぎてく日々には鈍感な君へ</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">原本放下的过去竟开始清晰可见</span><br><span class="line">奋力奔向的未来也逐渐微不足道</span><br><span class="line">所度过的每一天，都是为了唤醒回忆里那逐渐模糊的你</span><br></pre></td></tr></table></figure><p>作为 「但是最后想见到的……我是真的想再听到一次啊」的呼应，是再合适不过了</p><p>尽管 「过去」 的回忆 伴随年龄的增长，会逐渐变得模糊，但当我们听到儿时陪伴自己许久的音乐时，或是回忆突然在梦中闪现时，那种冲击感依然会非常鲜明</p><p>除了音乐（上的回忆会淡去），我们小时候所描述的 「<strong>未来</strong>」是「<strong>微不足道</strong>」的，对应到我们对「<strong>当下」</strong>（时光的）「<strong>迟钝</strong>」，其实都不是一瞬间发生的，这种变化已经悄悄发生在我们所度过的「<strong>日常</strong>」当中（<strong>光阴似箭</strong>）。但「小时候的我们」，也就是年轻人，特别容易后知后觉</p><p><img src="/2023/01/08/vaundy-kaijunohanauta/kaijunohanauta11.png" alt="MV画面"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ねぇ 僕ら</span><br><span class="line">眠れない夜に手を伸ばして</span><br><span class="line">眠らない夜をまた伸ばして</span><br><span class="line">眠くないまだね</span><br><span class="line">そんな日々でいたいのにな</span><br><span class="line">懲りずに</span><br><span class="line">眠れない夜に手を伸ばして</span><br><span class="line">眠らない夜をまた伸ばして</span><br><span class="line">眠くないまだね</span><br><span class="line">そんな夜に歌う 怪獣の歌</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">呐，让我们一起</span><br><span class="line">在睡不着的深夜中伸出双手</span><br><span class="line">让不眠之夜更加漫长</span><br><span class="line">失眠的夜里</span><br><span class="line">多想能够回到跟你在一起的日子</span><br><span class="line">我却没有吸取教训</span><br><span class="line">在独自清醒的黑夜中再次伸出双手</span><br><span class="line">让不眠之夜更加难忘</span><br><span class="line">失眠的夜里</span><br><span class="line">我再次大声唱了起来，这首怪兽之歌啊</span><br></pre></td></tr></table></figure><p>完美承接了最后一段副歌的感情铺垫</p><p>我们的青春期，肯定会有烦恼不断的日子，多少会因为内心的不安，而经历 「无法入眠的夜晚」，反而为了享受快乐而 「通宵」会没有那么多（年轻人也有年轻人的烦恼）</p><p>Vaundy 将这段 「<strong>青春之夜</strong>」，写成了「<strong>怪兽之歌 = 青春期的摇滚之歌</strong>」并歌颂了出来</p><p>然而光阴似箭，即便是曾经拥有「<strong>10年如一日的青春</strong>」，也会有到「<strong>最后</strong>」的时刻</p><p>为了「<strong>纪念对青春的告别，而亲手捧上花束</strong>」，相信这就是 「<strong>怪兽的花之歌</strong>」背后真正的蕴意吧</p><p><img src="/2023/01/08/vaundy-kaijunohanauta/kaijunohanauta13.png" alt="MV画面"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这次赏析基本 几乎都是从 「你 = 年少时期自己」角度赏析的。不过 「你 = 去世的朋友」这个角度也有成立的理由</p><p>但不管是什么样的解释，歌词给我们的留白 也是值得品味，无需多言的</p><p>「怪兽之歌」和「怪兽的花之歌」，Vaundy以字谜的方式，让这首歌的寓意充满想象，也是非常有意思</p><h2 id="找回勇气"><a href="#找回勇气" class="headerlink" title="找回勇气"></a>找回勇气</h2><p>这首歌本身从听感上，情感就特别饱满，再结合MV，彻底把这首歌的意义升华了</p><p>主人公突然从昏迷还是宿醉中醒来，看着身旁散落一地的东西，回忆也满满的涌上来</p><p>而等到回忆终于渐渐清晰，他也抓住了随之冒出，转瞬即逝的勇气，为了救赎曾经的自己而奔向远方</p><p><strong>MV男主小时候听到朋友歌唱的「怪兽的花之歌」，在他长大后的某个时刻，终于被赋予了意义，成为了他奋不顾身的勇气</strong>。混迹社会的我们，又何尝不想找到一个能让自己找回热情，奋不顾身的理由呢？</p><p><img src="/2023/01/08/vaundy-kaijunohanauta/kaijunohanauta03.jpeg" alt="演唱会"></p>]]></content>
    
    
    <summary type="html">勇气之颂</summary>
    
    
    
    <category term="音乐" scheme="http://smiecj.github.io/categories/%E9%9F%B3%E4%B9%90/"/>
    
    <category term="Vaundy" scheme="http://smiecj.github.io/categories/%E9%9F%B3%E4%B9%90/Vaundy/"/>
    
    
    <category term="音乐" scheme="http://smiecj.github.io/tags/%E9%9F%B3%E4%B9%90/"/>
    
    <category term="日语" scheme="http://smiecj.github.io/tags/%E6%97%A5%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>【翻译】花占い 歌曲鉴赏</title>
    <link href="http://smiecj.github.io/2022/12/30/vaundy-hanauranai/"/>
    <id>http://smiecj.github.io/2022/12/30/vaundy-hanauranai/</id>
    <published>2022-12-29T16:00:00.000Z</published>
    <updated>2022-12-29T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="译者序言"><a href="#译者序言" class="headerlink" title="译者序言"></a>译者序言</h2><p>Vaundy 特别擅长通过音乐，在简单的事物上 寄托进自己的情感，并在副歌中把情绪宣泄出来</p><p><strong>「花占い」</strong> 这首歌，就是在 <strong>花占卜</strong> 上，寄托了纠结于确定恋爱关系的人们 ，那一丝丝矛盾、紧张，却又让人沉迷的心思</p><p>这里选择一篇歌曲赏析文进行翻译，希望这首歌的氛围，能在冬日给大家带来一些内心的鼓动和温暖</p><p><a href="https://media.framu.world/columns/lyrics_consideration/hanauranai/">原文-花占い【Vaundy】歌詞の意味を考察！花占いで願う二人の未来とは？</a></p><p><a href="https://www.youtube.com/watch?v=onhBN0qkUcE">歌曲MV地址(油管)</a><br><a href="https://www.bilibili.com/video/BV1Eg411u7b6">歌曲MV地址(B站)</a></p><h2 id="作者序"><a href="#作者序" class="headerlink" title="作者序"></a>作者序</h2><p>这回让我们来欣赏<strong>2021年7月5日</strong>配信的Vaundy的新曲 「<strong>花占い</strong>」</p><p>作为在读大学生、音乐家的 Vaundy，包办作词、作曲和编曲， 已经创作了好几首热门歌曲。而在这次的新歌中，Vaundy又在其中向我们传递了什么样的情感和意义呢？</p><p>另外这首还是7月4日开始放送的电视剧『我的杀意恋爱了』收录的主题曲</p><p>下面先介绍电视剧的主题</p><p>男主 男虎柊 是在「传说的杀手之家」中，被男虎丈一郎养育长大的青年，但后者被人杀害。男虎柊 为了报仇，也为了继承「杀手之家」的家业，决定留在这里，随时找机会复仇</p><p>负责侦查杀害丈一郎凶手的警察， 綿谷詩織，向柊断定凶手正是超人气漫画家 鳴宮美月。柊知道后，本来已经为仇杀做好周到的准备了，但意外的火灾，不但让复仇计划泡汤，反而男虎柊 还在火灾中把漫画家救了出来。通过这个契机，两个人的恋情逐渐生根发芽</p><p>对男虎柊来说，本来应该是暗杀的对象，却萌生了恋情，暗杀计划真的还能顺利进行吗？</p><p>中川大志、新木優子、藤木直人，有这些豪华的演员阵容，一定能让这部剧更出彩</p><p>出于这部电视剧主题而创作的音乐，也让它多了一份期待不是吗？</p><p>下面是Vaundy关于歌曲的评价</p><p>「<br>这里是Vaundy，本次参与了『我的杀意恋爱了』主题曲的制作，我的音乐能跟随这部电视剧一起发布，也是我的荣幸</p><p>了解了这部电视剧的剧情之后，我开始思考「作什么样的曲子呢」，随之浮想到脑海中的第一个关键词就是“舞蹈”</p><p><strong>「希望能创作出，听着让人心动、不知不觉想跟随节奏一同起舞的曲子」</strong></p><p>能够让观众跟着这首剧中 BGM，在脑海中涌现剧中踏入恋情的主角。跟随着剧情画面，大家能多少地因为我的音乐，而拥有心动的感觉。正是带着这种期望，我作出了这首曲子</p><p>歌曲的主题是  「<strong>还未结果的恋情</strong>」，是一个关于 经历了很长很长的时间，依然没能结出恋情的果实，关系就这么一直持续下去的两人的故事</p><p>同时，这首不可思议的曲子，在剧中欣赏的时候，可能还会给你（和直接听这首歌）不一样的印象。电视剧将会在每周进行放送，就请大家尽情享受吧<br>」</p><h2 id="歌曲部分"><a href="#歌曲部分" class="headerlink" title="歌曲部分"></a>歌曲部分</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">街の夕焼けに溶けた</span><br><span class="line">僕たちはまだ2人だろうか</span><br><span class="line">風が吹く僕たちを乗せて</span><br><span class="line">2人でちぎった花に</span><br><span class="line">願いを込めて</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">融化在夕阳街角下的</span><br><span class="line">依然是你我二人对吧</span><br><span class="line">乘着阵阵拂过的晚风</span><br><span class="line">放飞一片片摘落的花瓣</span><br><span class="line">就让我们一起把愿望寄托其中吧</span><br></pre></td></tr></table></figure><p>这首歌的MV开头，是一位靠在墙角桌下的小男孩，在<strong>用食指和拇指比个圈，透过这个圈看向远方，希望能看到和喜欢的人未来的样子</strong></p><p>他看到的未来的世界，是自己长大之后的样子</p><p>「依然是你我二人对吧」这句歌词，我认为是小男孩看到了未来之后所想的事情</p><p>「花占卜」的含义，大家可以说是耳熟能详了，是一个很出名的占卜方式：随着花瓣一片片摘落，依次表示「喜欢」、「讨厌」，以最后一瓣作为结果</p><p>就在这一枚枚的花瓣中，男孩默默地许下了自己的愿望</p><p><img src="/2022/12/30/vaundy-hanauranai/hanauranai05.png" alt="MV画面"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">願うなら</span><br><span class="line">僕たちを出会うよりも</span><br><span class="line">ずっと遠くに</span><br><span class="line">叶うなら</span><br><span class="line">僕たちの運命さえも</span><br><span class="line">もっと遠くに</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">能许下愿望的话</span><br><span class="line">希望我们能在相遇之前</span><br><span class="line">更不知晓对方</span><br><span class="line">愿望能实现的话</span><br><span class="line">希望我们能够逃脱命运</span><br><span class="line">更加远离彼此</span><br></pre></td></tr></table></figure><p>这一段表现了男主通过花占卜，许下的具体愿望</p><p>「<strong>希望我们在相遇之前 更不知晓对方</strong>」男主许下这个愿望，也说明他甚至不想和女主相见，想回到两人相见之前的时间</p><p>这里同时也对应了Vaundy在歌曲评论中说到的“歌曲的主题：「还未结果的恋情」，是一个关于数百上千年，两个人依然没能成为恋人，就这样一直下去的故事</p><p>不管经过多长时间，两人都无法成为真正的恋人 </p><p>既然心心念念的恋情都无法实现，两个人也许不见面会更好。内心这么思考的男主，也多少有一种无奈的感觉呢</p><p><img src="/2022/12/30/vaundy-hanauranai/hanauranai03.jpeg" alt="MV画面"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">なんて　笑って　吐いて　捨てては</span><br><span class="line">君を思い出す</span><br><span class="line">そんな思いを</span><br><span class="line">抱いて　抱えて　悶えた　先には</span><br><span class="line">いつも君がいる</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">就这样笑着，叹息着，无数次想放下，但又忍不住捡起</span><br><span class="line">都是因为想起了你</span><br><span class="line">带着这种丢不掉的思念</span><br><span class="line">拥抱着，背负着，无数次想解脱，但总是为此闷闷不乐</span><br><span class="line">都是因为身边一直有你在</span><br></pre></td></tr></table></figure><p>不管内心怎么下定决心，永远不相见</p><p>静下心来的时候，都会想起你的面容</p><p>也许我们真的就再也无法摆脱这命运，再也离不开对方，也再也无法拥有对方了吧</p><p><img src="/2022/12/30/vaundy-hanauranai/hanauranai06.png" alt="MV画面"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">「そんなことより</span><br><span class="line">恋路の果てにはなにがある」</span><br><span class="line">くだらない話を2人で</span><br><span class="line">しよう</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">算了，与其说这些</span><br><span class="line">不如就 恋爱之路的尽头会是什么呢</span><br><span class="line">这种无关紧要的话题</span><br><span class="line">开始聊起吧</span><br></pre></td></tr></table></figure><p>歌曲主题“无法结出果实的恋爱”，说的正是无法成为恋人的两人，也是电视剧的主角 来自杀手之家的男虎柊，和他的杀人目标鳴宮美月</p><p>在无奈接受自己命运的同时，男主也在思考等待他们的未来会是什么，（然而百思不得其解下）男主做出了决定，邀请女主 一边聊 看似不起眼的小事，一边一同前进，找到真正属于两人的正确道路</p><p><img src="/2022/12/30/vaundy-hanauranai/hanauranai07.png" alt="MV画面"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">僕たちの1000年の恋は</span><br><span class="line">相槌で折れる花のようだ</span><br><span class="line">僕たちは1000年後もまだ</span><br><span class="line">同じように待ってんだ</span><br><span class="line">笑っちゃうよね</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">我们之间漫长的恋爱</span><br><span class="line">就像顺势折断的花朵一样</span><br><span class="line">漫长的恋爱过后</span><br><span class="line">我们一定也会像现在这样，一直等待彼此下去的吧</span><br><span class="line">真是让人见笑了</span><br></pre></td></tr></table></figure><p>这一段带点自嘲的意味，自嘲不管自己做什么，也无法改变的两人之间的关系</p><p>即便过了上千年，<strong>依然只能停留在回忆中的恋情，就像是脆弱的花瓣一样，稍微一碰就要消散</strong>。然而即使是这样，<strong>男主依然决定抱着这束残弱的花，抱着对女主亘古不变的思念</strong>·</p><p><img src="/2022/12/30/vaundy-hanauranai/hanauranai08.png" alt="MV画面"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">あなたと以外</span><br><span class="line">もうどこにもいけない</span><br><span class="line">波の中で</span><br><span class="line">混じり合わない</span><br><span class="line">日々の中で</span><br><span class="line">2人がたっている</span><br><span class="line">永劫を</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">除了在你身旁</span><br><span class="line">我已经无处可去</span><br><span class="line">交融在这片海浪中的我们</span><br><span class="line">即使像沙砾和海水那般无法结合</span><br><span class="line">但就在这样的日常之中</span><br><span class="line">我们也能彼此留下印记</span><br><span class="line">直到永远</span><br></pre></td></tr></table></figure><p>（译者：这段翻译参考了网易云的，海水和沙粒 这个形容简直是太棒了）</p><p>长期处于无法更近一步的关系，男主内心也大声地提出了反问：<strong>对我来说，你的存在到底是不是有那么重要？</strong></p><p>「<strong>波</strong>」也象征着男女主之间，像海浪一样潮起潮落，日复一日的每一天。时间再怎么流逝，两人再怎么有深刻的回忆，也永远不会有交集，就像海浪没有惊喜地拍打沙滩一样</p><p>男主真的能接受这让人不甘的命运吗？</p><p><img src="/2022/12/30/vaundy-hanauranai/hanauranai09.png" alt="MV画面"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">「そんなことより</span><br><span class="line">願いは君との先にある」</span><br><span class="line">たわいない話を2人で</span><br><span class="line">しよう</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">先不说这些了</span><br><span class="line">我有一个愿望，关于和你一起的未来</span><br><span class="line">让我们就这个不起眼的话题</span><br><span class="line">开始谈谈吧</span><br></pre></td></tr></table></figure><p>这里男主的愿望，一个和女主，和未来相关的愿望指的是什么呢？</p><p>笔者认为，这是男主在经过内心斗争之后，终于想通：<strong>即便是两人无法成为恋人，还是想和你永远在一起的愿望</strong></p><p>“<strong>即使我们的故事无关爱情，我们的窃窃私语无法结成恋爱的果实，我依然会守护这样的关系</strong>”</p><p><img src="/2022/12/30/vaundy-hanauranai/hanauranai10.png" alt="MV画面"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">何年経っても妄想が</span><br><span class="line">根を張ってもうこんなに</span><br><span class="line">溢れ出している</span><br><span class="line">願いは</span><br><span class="line">花が散るほど</span><br><span class="line">溢れ出していく</span><br><span class="line">花占う恋歌</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">经过许久，希望慢慢变成了妄想</span><br><span class="line">就像是争相扩张的树根</span><br><span class="line">快要冒出来似的</span><br><span class="line">我的愿望</span><br><span class="line">也如随风飞散的花瓣那般</span><br><span class="line">漫天飞舞</span><br><span class="line">这就是花占卜之情歌</span><br></pre></td></tr></table></figure><p>不管过了多久，我对你的想念都不会改变</p><p>随着花占卜 一片片花瓣被摘下，逐渐在脑海中浮现的幻想，正是和你幸福地度过日常的每一天</p><p>“<strong>喜欢，不喜欢</strong>”，“<strong>能在一起，不能在一起</strong>”，“<strong>能实现，不能实现</strong>”，伴随着花占卜的，还有这些各种各样的，内心翻来覆去的猜测</p><p>两人的恋情究竟会变成什么样子呢？</p><p><img src="/2022/12/30/vaundy-hanauranai/hanauranai12.png" alt="MV画面"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">僕たちの1000年の恋は</span><br><span class="line">相槌で咲く</span><br><span class="line">花のように</span><br><span class="line">僕たちは1000年後もまだ</span><br><span class="line">同じようにちぎってまた</span><br><span class="line">笑っていたいよね</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">我们之间漫长的恋爱</span><br><span class="line">就像争相盛开的</span><br><span class="line">花朵那般</span><br><span class="line">就这样经过千年之后</span><br><span class="line">我们一定也会像现在这样，拾起飘散的花瓣吧</span><br><span class="line">真是让人见笑了</span><br></pre></td></tr></table></figure><p>不管过了多久，还是想和女主一起，捧起花朵，开始花占卜的男主</p><p>笔者从这段歌词读出来的，是一种无奈感：<strong>就这样吧</strong>，哪怕是只能和你维持现状，我也无所谓了。我现在只希望现在的关系能持续下去</p><p><img src="/2022/12/30/vaundy-hanauranai/hanauranai14.png" alt="MV画面"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">何年経っても妄想が</span><br><span class="line">根を張ってもうこんなに</span><br><span class="line">溢れ出している</span><br><span class="line">願いは</span><br><span class="line">何年経っても妄想が</span><br><span class="line">根を張ってもうこんなに</span><br><span class="line">溢れ出している</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">经过多年也变成了妄想的希望</span><br><span class="line">就像是那顽强扩张的树根</span><br><span class="line">快要忍不住冒出来似的</span><br><span class="line">我的愿望啊</span><br><span class="line">......（X2）</span><br></pre></td></tr></table></figure><p>尽管希望就像轻轻一碰就会折断的花那样，但男主还是靠着对女主的一丝想念，把这份希望坚持了下去，甚至还在顽强地生长</p><p>不管遇上什么样艰难的命运，男主依然坚信两个人会有美好的结局。这种强大的内心，有一种能给观众强烈印象的感觉</p><p><img src="/2022/12/30/vaundy-hanauranai/hanauranai15.png" alt="MV画面"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>B站上有这首歌的现场版，译者是真的被漫天飞舞的彩带感染到了，仿佛在诉说着，<strong>​恋爱如花盛开、飘散般绚丽，又如散落般短暂</strong>，然而就这一刻，男主可能只想享受在占卜过程，一点点 随花瓣摘落而心动的感觉，不想被任何人打扰，即便是他看到了可能不完美的结局，他也相信一片片花瓣会带着他走向未来，就像 MV 中的小男孩那样</p><p><img src="/2022/12/30/vaundy-hanauranai/hanauranai16.png" alt="现场版画面"></p>]]></content>
    
    
    <summary type="html">花占卜的世界</summary>
    
    
    
    <category term="音乐" scheme="http://smiecj.github.io/categories/%E9%9F%B3%E4%B9%90/"/>
    
    <category term="Vaundy" scheme="http://smiecj.github.io/categories/%E9%9F%B3%E4%B9%90/Vaundy/"/>
    
    
    <category term="音乐" scheme="http://smiecj.github.io/tags/%E9%9F%B3%E4%B9%90/"/>
    
    <category term="日语" scheme="http://smiecj.github.io/tags/%E6%97%A5%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>Docker 常用指令</title>
    <link href="http://smiecj.github.io/2022/12/28/docker-command/"/>
    <id>http://smiecj.github.io/2022/12/28/docker-command/</id>
    <published>2022-12-27T16:00:00.000Z</published>
    <updated>2022-12-27T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/xiaoliizi/article/details/128474415">本文csdn地址</a></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>对于 Docker 这一个“庞然大物” 来说，想用好它其实没有这么难，掌握好基本几个指令就可以了，这里将平时自己用得多的整理一下</p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><table><thead><tr><th>指令类型</th><th>指令</th><th>功能</th></tr></thead><tbody><tr><td><strong>基本</strong></td><td>docker login</td><td>登录镜像仓库</td></tr><tr><td><strong>镜像操作</strong></td><td><a href="https://docs.docker.com/engine/reference/commandline/images/">docker images</a></td><td>查看本地镜像信息</td></tr><tr><td></td><td><a href="https://docs.docker.com/engine/reference/commandline/pull/">docker pull</a></td><td>拉取镜像</td></tr><tr><td></td><td><a href="https://docs.docker.com/engine/reference/commandline/tag/">docker tag</a></td><td>给一个镜像添加另一个tag</td></tr><tr><td></td><td><a href="https://docs.docker.com/engine/reference/commandline/rmi/">docker rmi</a> <image_id></td><td>删除镜像</td></tr><tr><td></td><td><a href="https://docs.docker.com/engine/reference/commandline/commit/">docker commit</a> -m <msg> -a <tag> <container_id> <image_name></td><td>容器打包成镜像</td></tr><tr><td></td><td><a href="https://docs.docker.com/engine/reference/commandline/push/">docker push</a></td><td>提交镜像到远端仓库</td></tr><tr><td></td><td><a href="https://docs.docker.com/engine/reference/commandline/inspect/">docker inspect</a></td><td>查看本地/远端镜像信息</td></tr><tr><td></td><td><a href="https://docs.docker.com/engine/reference/commandline/image_prune/">docker image prune</a></td><td>清理无用镜像(<strong>小心执行</strong>)</td></tr><tr><td></td><td><a href="https://docs.docker.com/engine/reference/commandline/save/">docker save</a> <image_name> &gt; image.tar</td><td>保存镜像到 tar</td></tr><tr><td></td><td><a href="https://docs.docker.com/engine/reference/commandline/load/">docker load</a> image.tar</td><td>从tar 包中还原镜像</td></tr><tr><td><strong>容器操作</strong></td><td>docker ps</td><td>查看容器列表</td></tr><tr><td></td><td><a href="https://docs.docker.com/engine/reference/run/">docker run</a></td><td>启动容器<br>docker run -p 3306:3306 –name mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</td></tr><tr><td></td><td><a href="https://docs.docker.com/engine/reference/commandline/rm/">docker rm</a> <container_id></td><td>删除容器</td></tr><tr><td></td><td><a href="https://docs.docker.com/engine/reference/commandline/exec/">docker exec</a> -it <container_id> /bin/bash</td><td>进入容器</td></tr><tr><td></td><td><a href="https://docs.docker.com/engine/reference/commandline/container_prune/">docker container prune</a></td><td>清理未运行的容器</td></tr><tr><td></td><td><a href="https://docs.docker.com/engine/reference/commandline/logs/">docker logs</a> <container_id></td><td>查看容器/服务日志</td></tr><tr><td><strong>volume</strong></td><td><a href="https://docs.docker.com/engine/reference/commandline/volume_ls/">docker volume ls</a></td><td>查看所有 volume</td></tr><tr><td><strong>network</strong></td><td><a href="https://docs.docker.com/engine/reference/commandline/network_ls/">docker network ls</a></td><td>查看当前所有网络</td></tr><tr><td></td><td><a href="https://docs.docker.com/engine/reference/commandline/network_create/">docker network create</a></td><td>创建网络</td></tr><tr><td><strong>服务状态</strong></td><td><a href="https://docs.docker.com/engine/reference/commandline/stats/">docker stats</a></td><td>查看服务实时状态，每个容器的资源使用情况</td></tr><tr><td></td><td><a href="https://docs.docker.com/engine/reference/commandline/info/">docker info</a></td><td>查看 docker 安装版本信息、基本配置等</td></tr><tr><td></td><td><a href="https://docs.docker.com/engine/reference/commandline/system_df/">docker system df</a></td><td>拉取镜像<br>-v: 查看具体信息，比如每个容器的磁盘占用</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">Docker 常用指令整理</summary>
    
    
    
    <category term="开发工具" scheme="http://smiecj.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    <category term="docker" scheme="http://smiecj.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/docker/"/>
    
    
    <category term="docker" scheme="http://smiecj.github.io/tags/docker/"/>
    
    <category term="Linux" scheme="http://smiecj.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>【翻译】mabataki 歌曲鉴赏</title>
    <link href="http://smiecj.github.io/2022/11/12/vaundy-mabataki/"/>
    <id>http://smiecj.github.io/2022/11/12/vaundy-mabataki/</id>
    <published>2022-11-11T16:00:00.000Z</published>
    <updated>2022-11-11T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="译者序言"><a href="#译者序言" class="headerlink" title="译者序言"></a>译者序言</h2><p>译者: Vaundy 作为日本乐坛强大的新生代力量之一，每首歌都有自己独特的曲风，今年同样有非常值得欣赏的几首音乐<br>这里特别是想评一下 mabataki 这首音乐，特别是在今年，在疫情，战争，世界经济下行等大背景下，这首确实有属于它独特的意义<br>这里将一篇日语的浅析文章翻译一下。日语能力有限，还请多多包涵~</p><p><a href="https://media.framu.world/columns/lyrics_consideration/mabataki-3">原文地址</a><br>原文标题: mabataki【Vaundy】歌詞の意味を考察！もし〇〇な世界だったら人は、優しくなれるのだろうか？<br>mabataki 歌词的意味考察！如果世界是〇〇样子的，生活在其中的人们能彼此温柔以待吗？</p><p><a href="https://twitter.com/Vaundy_AWS/status/1568254768111550464">新歌发布信息</a></p><p><a href="https://music.163.com/#/song?id=1980109662">歌词翻译参考-网易云</a></p><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>这首是 9月9日 Vaundy 在武道馆举办的 one man live tour 演唱会中，在最后演奏的新曲<br>在演唱会中间，Vaundy 还宣布了将于 2023年11月 在5个城市举办10场大型公演的计划<br>大家对 「mabataki」 的歌词有什么样的感想呢？让我们一起看看吧</p><p><a href="https://www.youtube.com/watch?v=6h6AQbdTkaE">歌曲MV地址(油管)</a><br><a href="https://www.bilibili.com/video/BV1UP411J7wE">歌曲MV地址(B站)</a></p><h2 id="副歌部分（开头）"><a href="#副歌部分（开头）" class="headerlink" title="副歌部分（开头）"></a>副歌部分（开头）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">もし何も</span><br><span class="line">忘れられない世界で</span><br><span class="line">出会い会ってしまったら</span><br><span class="line">憎み合うのはやめるだろうか</span><br><span class="line">もし何も</span><br><span class="line">覚えられない世界で</span><br><span class="line">すれ違ってしまったら</span><br><span class="line">振り向き合うようになるだろうか</span><br><span class="line">なんて</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">如果我们在无法忘却任何事情的世界中相遇</span><br><span class="line">也许我们都会放下彼此的憎恨吧</span><br><span class="line">如果我们在无法记起任何事情的世界中擦肩而过</span><br><span class="line">也许会为了彼此，互相奔赴转身的吧</span><br></pre></td></tr></table></figure><p>开头以主人公向自身发起提问的场景开始<br>如果这个世界能记住所有发生过的事情，我们能够放下那些和他人之间不愉快的回忆，抛弃对彼此的憎恨吗？<br>反过来，如果这个世界不再记得发生过的任何事情，我们能忘记来自过去的怨恨，让彼此的关系破镜重圆吗？<br>我仿佛听见了（歌曲）作者对世界是否能变得更加安稳和平的祈祷</p><p>当然在实际的世界中，我们还是会忘记一些事情，也会有一些一直记得的事情<br>但如果这个世界发生了极端的变化，（世界和我们自己）会变成什么样呢？<br>也许作者正是带着这种哲学性的疑问，才想着唱出了这首歌吧</p><p><img src="/2022/11/12/vaundy-mabataki/mabataki09.png" alt="MV画面"><sup><font color='#dfa0ee'><center>MV 开头场景</center></font></sup></p><h2 id="副歌部分1"><a href="#副歌部分1" class="headerlink" title="副歌部分1"></a>副歌部分1</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">どこにも見えない敵を今</span><br><span class="line">そこにあてがい</span><br><span class="line">人々は考えることをやめていた。</span><br><span class="line">薄れてく希望は</span><br><span class="line">徐々に蝕み</span><br><span class="line">弾倉の中に願いを込め始めた人々は</span><br><span class="line">また泣き出してしまう</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">一直以来看不见的敌人，如今也出现在了那里</span><br><span class="line">人们逐渐失去了思考，原本就微薄的希望，也慢慢地被侵蚀</span><br><span class="line">开始往弹夹中装入愿望的人们，不禁再次潸然泪下</span><br></pre></td></tr></table></figure><p>如果 什么事都会记得的世界，争端逐渐消失的话<br>如果 什么事都会被忘记的世界，温柔逐渐被孕育出来的话<br>我们当下生活在的现实世界，会变成什么样呢？是否会有所不同？</p><p>“どこにも見えない敵を今 そこにあてがい 人々は考えることをやめていた。”<br>这部分我感觉，作者是针对 当今社会中 一群在网络上 对别人随意恶语中伤、对世界形势冷漠不关心的社会现象，而提出的感想<br>本来这个世界应该是朝着争端更少、充满和平的方向发展的，但人们在面对真正最大的问题：那些看不见的“敌人”的时候，反而逃避了<br>渐渐变得淡薄的希望，渐渐被侵蚀和变得冷漠的人心，由此逐渐衍生出的各种争端、憎恨甚至战争。当我们回想到这些，可能会在某一时刻流下伤感的泪水吧<br>Vaundy 将那些试图通过战争解决争端的人们，形容成“开始在弹夹中寄托希望的人们”，真的是很厉害</p><p><img src="/2022/11/12/vaundy-mabataki/mabataki04.png" alt="MV画面"></p><h2 id="主歌部分2"><a href="#主歌部分2" class="headerlink" title="主歌部分2"></a>主歌部分2</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">足並みを揃え始めた</span><br><span class="line">疑いは罵倒となり</span><br><span class="line">人を食べた。</span><br><span class="line">薄れてく心は</span><br><span class="line">徐々に蝕み</span><br><span class="line">透明な刃に嫉みを込め始めた人々は</span><br><span class="line">まだ泣き止まずにいる</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我们终于开始变得步伐一致</span><br><span class="line">但彼此的怀疑依然变成了谩骂，吞没了人们</span><br><span class="line">逐渐变得淡薄的内心，也慢慢被侵蚀</span><br><span class="line">开始把嫉妒化作透明的刀刃的人们，无法停下失声哭泣</span><br></pre></td></tr></table></figure><p>终于开始收拢相同步伐的我们，内心还是无法放下微小的猜忌，任由它发酵，最后变成了在现实中的争端</p><p>从古代就在不断发生的人类之间的冲突，在21世纪的当下依然在继续，有一种让人失望和悲伤的感觉</p><p>“<strong>人を食べた</strong>”这句歌词，（通过夸张）表现出了一种战争的失败方被胜方吸收掉的假想，很好地表现出了当今的世界形势（规则）</p><p>“<strong>薄れてく心は 徐々に蝕み 透明な刃に嫉みを込め始めた人々は まだ泣き止まずにいる</strong>”</p><p>透明的刀刃，也许说的是人们（无意中）伤害他人的话语<br>现代社会，谁都可以在网上发表评论，因为看不到他人的面孔（不知道别人听到你的话到底会怎么样），很多人都没有带着平静的心情，就开始在网络上表现情绪，随意宣泄自己的不满<br>不管是在现实还是在虚拟世界中的冲突，都是由于人类空虚的内心产生的，不禁让人感到一丝丝伤感</p><p><img src="/2022/11/12/vaundy-mabataki/mabataki06.png" alt="MV画面"></p><h2 id="过渡部分"><a href="#过渡部分" class="headerlink" title="过渡部分"></a>过渡部分</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">纏う悲しみが今</span><br><span class="line">また人を傷つけてしまう</span><br><span class="line">もう僕が先に銃を捨てよう</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">缠绕在人们内心的悲伤</span><br><span class="line">如今再次对大家造成痛楚</span><br><span class="line">那么我就先把手上的枪先丢在地上吧</span><br></pre></td></tr></table></figure><p>之前缠绕在人们内心的伤感、承受失败的感情，继续传染给了周围的人们，所有人都笼罩在一种消极的气氛中</p><p>我们应该怎么走出这种地狱般的负面情绪的循环呢？</p><p>在重复的合唱副歌部分，<strong>作者通过不断的自问自答的方式</strong>，逐渐在内心下定觉悟: 首先把自己心中的枪放下</p><p>把枪放下后，也许会被无声的语言攻击，会被看不见的刀刃弄伤</p><p>但如果不放下我们心中那把为了自卫装上的枪，也许也不能够把内心真正的想法 传达出来，作者想得到的结论也许正是这个吧</p><p>这几句歌词，读出了主人公内心坚定的决意</p><p><img src="/2022/11/12/vaundy-mabataki/mabataki10.jpeg" alt="MV画面"></p><h2 id="副歌部分2"><a href="#副歌部分2" class="headerlink" title="副歌部分2"></a>副歌部分2</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">もし誰も</span><br><span class="line">見つめ合えない世界で</span><br><span class="line">出会い会ってしまったら</span><br><span class="line">手を握って話すだろうか</span><br><span class="line">もし僕ら</span><br><span class="line">明日が最後としたら</span><br><span class="line">憎み合うのはやめるだろうか</span><br><span class="line">思い合うようになるだろうか</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">如果我们在一个无法好好对视的世界相遇的话</span><br><span class="line">也许会握紧彼此的手好好说话的吧</span><br><span class="line">如果明天是世界终焉之日的话</span><br><span class="line">也许我们都会放下心中憎恨的吧</span><br><span class="line">会开始想念彼此的吧</span><br></pre></td></tr></table></figure><p>这也许是一种讽刺的表现吧？<br>在一个无法认真对视的世界中相遇的话，我们能好好握住彼此的手交谈吗？不，也许根本不能<br>但我们实际生活着的世界中，是可以好好和别人面对面交谈的。因此好好坐下来，真诚地握住对方的手，注视对方认真交谈的话，也许就不会产生这么多无谓的争执了</p><p>如果明天就是世界终焉之日，我们彼此之间的憎恨也会消失的吧？<br>正因为谁都无法知道，什么时候会走到人生结束那一天，对我们来说，不如停止憎恨，互相体谅对方，以这种方式生活下去，也许也是可以的吧？</p><p>感觉到了作者对向着<strong>构建和平世界</strong>（或未来）而一起努力的呼吁</p><p><img src="/2022/11/12/vaundy-mabataki/mabataki07.png" alt="MV画面"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>大家感觉怎么样？<br>感觉这真的是 Vaundy 对和平愿望表达深切，非常棒的曲子了<br>明年在 演唱会 tour 中他会以怎样的姿态在我们面前展示呢？就让我们一起期待吧～</p><p><img src="/2022/11/12/vaundy-mabataki/mabataki11.png" alt="开头"></p><h2 id="部分生词"><a href="#部分生词" class="headerlink" title="部分生词"></a>部分生词</h2><p><a href="https://www.weblio.jp/">词语解析来源: weblio 辞書</a></p><p><strong>弾倉</strong><br>連発銃で、補充用の弾丸をこめる部分。</p><p><strong>足並み</strong><br>1 複数の人や馬の足の運びのそろいぐあい。歩調。<br>2 考え方や行動のそろいぐあい。<br>3（「に」を伴って副詞的に）一歩進むごとに。</p><p><strong>嫉み</strong><br>自分と他人を比べ、他人の優れた部分を羨み、憎く思うこと。似たような意味の「妬み」が、相手に対しての憎しみが強いのに対し、相手が優れていることに対して劣等感を抱くという意味合いが強い。</p><p><strong>仮定</strong><br>1 未定のこと、不確かなことを仮にこうと定めること。また、仮に定めた事柄。<br>2 論理学などで、ある命題を導き出す推論の出発点におかれる前提条件。仮設。</p><p><strong>伝染</strong><br>1 病原体が他の生物体に入り、増殖して病気になること。感染。「はしかが―する」<br>2 物事の状態・傾向などが他に移って同じような状態が起こること。「あくびが―する」</p><h2 id="一点点感受"><a href="#一点点感受" class="headerlink" title="一点点感受"></a>一点点感受</h2><p>最后想说说翻译之后的感想:<br>翻译文章最难的部分真的不是去查询、记住生词，而是在<strong>外语和母语之间表达模式的切换</strong>。就这篇文章来说，我觉得我并没有很好地把作者的语气表达出来，可能是日语的<strong>语境</strong>和中文之间差别还是比较大</p><p>举个例子：日语经常在一句话结尾带上疑问语气，但更多地想表达的意思其实是肯定。带上疑问只是语言习惯而已，比如这句：<br>“<strong>これは、反語的な表現なのではないでしょうか？</strong>”<br>其实已经肯定形势: “这是讽刺的表现形式” 的意思了，<strong>でしょう</strong> 只是希望引起读者的共鸣，并不表示疑问</p><p>而这种东西，翻译软件是不会教你的，只能后面翻译更多的文章，多去理解</p>]]></content>
    
    
    <summary type="html">向往平和的世界</summary>
    
    
    
    <category term="音乐" scheme="http://smiecj.github.io/categories/%E9%9F%B3%E4%B9%90/"/>
    
    <category term="Vaundy" scheme="http://smiecj.github.io/categories/%E9%9F%B3%E4%B9%90/Vaundy/"/>
    
    
    <category term="音乐" scheme="http://smiecj.github.io/tags/%E9%9F%B3%E4%B9%90/"/>
    
    <category term="日语" scheme="http://smiecj.github.io/tags/%E6%97%A5%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>【翻译】软件工程师的通用技巧</title>
    <link href="http://smiecj.github.io/2022/10/31/software-soft-parts/"/>
    <id>http://smiecj.github.io/2022/10/31/software-soft-parts/</id>
    <published>2022-10-30T16:00:00.000Z</published>
    <updated>2022-10-30T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://addyosmani.com/blog/software-engineering-soft-parts">原文地址</a><br><a href="https://blog.csdn.net/xiaoliizi/article/details/127677921">本文csdn地址</a><br><a href="https://mp.weixin.qq.com/s/jfpXGMENp_kjhBycmRayew">本文公众号地址</a></p><h2 id="关于本文"><a href="#关于本文" class="headerlink" title="关于本文"></a>关于本文</h2><p>作者以10年在谷歌的开发经验，总结出了一套通用的方法论。译者这里对文章进行粗略的翻译，希望能对从事软件行业的同学有一定帮助，引起大家对平时所做、所看和所学的思考</p><ul><li>注1: 本文保留原文的章节架构，为易于理解，再对内容做适当的筛减和补充，偶尔扩展译者从自身经验角度的理解</li><li>注2: 原文很长，章节也比较多。建议大家分批次阅读，每次读两三个点，偶尔记下自己的思考，这样读起来不会这么枯燥</li><li>注3: 翻译和技术水平都有限，不一定能把作者的原意传达非常到位。因此建议有余力的同学去品一品原文，当然如果你读了我的翻译能有点共鸣，那也算是我的荣幸</li></ul><h2 id="作者介绍"><a href="#作者介绍" class="headerlink" title="作者介绍"></a>作者介绍</h2><p><strong>Addy Osmani</strong><sup><font color='#49E844'>[1]</font></sup> 是一位 爱尔兰籍 软件工程师和领导，目前在谷歌浏览器团队工作。他已经在谷歌工作10年，致力于让网页（访问速度）更快。他还曾在 AOL（America Online，美国在线） 和 Fortune 500（500强） 站点工作。 Addy 还是 《Learning JavaScript Design Patterns》、《Learning Patterns》和 《Image Optimization》等书籍的作者</p><p>作者博客首页<sup><font color='#49E844'>[2]</font></sup></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天我将会介绍软件工程中，关于 <strong>通用技巧</strong><sup><font color='#49E844'>[3]</font></sup>（soft skills）的部分。这些技巧是我在谷歌浏览器的前10年学到的，在这里我还成为了高级工程师。在工作10周年纪念之际，我想回忆一些一直伴随自己的课程，也希望这些技巧对读者的职业发展有所帮助</p><p>成为一名优秀工程师的过程是不断积累经验的过程。每个项目，不管多大多小，都是你学习技术、丰富自己工具箱的好机会。随着不断积累，当你能够把 从一个项目中学到的技能包，应用在另一个项目 去解决问题的时候，将会有事半功倍的效果</p><p>还需要说明：我说的话可能都不重要，一切以你的理解为准（YMMV）:)</p><h2 id="所有章节一览"><a href="#所有章节一览" class="headerlink" title="所有章节一览"></a>所有章节一览</h2><ul><li>精通</li><li>批判性思考，提出关键因素</li><li>巩固基础知识</li><li>通用知识点</li><li>效率</li><li>做出更好的选择</li><li>专注于用户（需求），其他事情会跟着走</li><li>提升自己的能力</li><li>利用参与新项目的优势，学习新技术</li><li>保持好奇心，保持学习</li><li>经常做笔记</li><li>Leader承认自己不知道的方面，将会很有感染力</li><li>Leader 也需要承认自己犯的错误</li><li>做开源项目的caretaker（管理者），而不是owner（所有人）</li><li>技术的广度和宽度</li><li>从实践中学习</li><li>通用代码 vs 专用代码</li><li>Deep module (模块化) 思想</li><li>学会管理一个项目</li><li>从新项目（green-field）中学习</li><li>定义完成事项</li><li>分阶段发布</li><li>系统性调试</li><li>设计文档的重要性</li><li>文档审查</li><li>定义你的沟通方式</li><li>耐心、深思熟虑</li><li>学会说“不”</li><li>接受与尊重</li><li>信息分享</li><li>灵活性</li><li>保持记录</li><li>真诚</li><li>资历和战略思维</li><li>以身作则</li><li>提升你的影响力</li><li>“不能胜任”综合症</li><li>指导他人</li><li>面向领域层面进行指导</li><li>组织层面的指导</li><li>学员的职责</li><li>构建信任</li><li>理解业务模型</li><li>提升你的影响力</li><li>时间管理</li><li>过度工作并不是好的工作素养</li><li>不断尝试超越自己的标准是不现实的</li><li>你不需要知道每一件时事</li><li>通过学会说不、了解什么时候该停下来、以及规划好自己的时间（包括工作间隙的休息），主动把自己从焦虑中解放出来</li><li>鼓励你和你的团队成员进行休息、旅游和调休</li><li>随着对问题的了解深入，更新（排期）评估</li><li>有时取消项目是正确的选择（即便是让人感到不舒服）</li><li>关于技术债：预防远远 &gt; 补救</li><li>如果没有充足的休息，和 work-life balance（的习惯），你的团队将会产生职业倦怠</li><li>大型组织/公司中流程会比较缓慢</li><li>专注于 问题 VS 专注于 项目</li></ul><h2 id="学习新知识"><a href="#学习新知识" class="headerlink" title="学习新知识"></a>学习新知识</h2><p>这部分内容能帮助大部分初级和中级工程师 成长，结合软件行业的基本流程和业界的最佳实践，构建复杂系统。尽量跟随业界的<strong>第一原则</strong><sup><font color='#49E844'>[4]</font></sup>。比如将大问题拆解成一个个小问题，就是你职业生涯中非常重要的技能之一</p><h3 id="精通"><a href="#精通" class="headerlink" title="精通"></a>精通</h3><p>对技术的精通，能帮你在工作时间产生更多的价值</p><p>你可以发现产生价值的工作点，并帮助你的团队将精力放到这件事情上来。同时，也能避免时间花在产出低效的事情上，<strong>优秀的工程师甚至可以带领团队从低效事情中解放出来</strong>，把工作放在最有价值的事情上</p><p>作者经常被（请教）问到：“如何知道我在充分使用自己的时间？”。你可能总是会有 能让自己变忙的各种任务，但真正的诀窍是确保你所做的是“对的事情”。如果你想移动整座山，那么你应该关注如何移动土堆，即使移动很小（即：愚公移山）</p><p>一些你可以经常问自己的问题:</p><ul><li>我的目标是什么？我所做的事情是否都是为了目标服务？</li><li>是否有其他途径 能更快地实现目标？ </li></ul><p>即使是自己对自己问这些问题，也能够很有作用</p><h3 id="批判性思考，提出关键因素"><a href="#批判性思考，提出关键因素" class="headerlink" title="批判性思考，提出关键因素"></a>批判性思考，提出关键因素</h3><blockquote><p>批判性思考是利用足够的认知，进行独立思考，并做出成熟决策的一种技能</p></blockquote><p>有时为了快速响应用户，我们可能会急于用一些快捷方案去解决用户问题。这样看起来会进展很快，但如果对结果和问题原因欠考虑，可能会引起后续出现问题的风险<br>与之相对，批判性思考就是带着强目的性去思考，发现问题的本质，规避风险<br>这种带着目的思考的方式，能帮助你更关注到问题的本质，规避那些 因为没仔细分析 根因和结果 而在未来会导致的问题</p><p>概括来说，以批判性角度，我会给自己提的问题有：</p><ul><li>我们是否在解决真正的问题？（问题是什么）</li><li>我们是否在用正确的方式解决问题？（可以从平衡严谨性和效率出发，比如时间不太够的时候，是否可以用更快的方式解决，一般适用于故障解决）</li><li>如果暂时找不到问题根源所在，如何找到定位根因的主要思路？（排除法是个不错的选择）</li><li>如何把核心问题拆解成一个个可以快速分析的问题？</li><li>如果我们有多种解决问题的假设，如何组织工作评估他们？</li><li>如果分析问题的时间有限，但是又不宜影响分析问题的严谨性，可以用什么捷径？（参考社区经验）</li><li>得到的结论，是否有充分的证据和现象能够支撑？（需要过程）</li><li>怎么知道把事情做完了？解决方案足够好吗？（适当回顾，确保不会有新的问题出现）</li><li>怎么把解决方案解释给故障影响方？（一般用于故障回顾，将故障具体原因、具体解决方式提炼出概括性的技术说明，保证对方能理解，并认可方案）</li></ul><p>这些问题经常能起到帮助作用。有时我们还会遇到这种情况：定位一个问题，结果从表象深入后发现了更多问题；采用一些可以快速解决问题的方案，但是在系统运行一段时间后，发现又因此产生了新的问题<br>通过进行一段时间的批判性思考，我们不断挑战假设，对收益和风险看得更细致，找到现象之间的矛盾点，评估（现象的）可信度，收集更多的数据，以确保我们现在做的是对的事</p><p>举个例子，很多程序员常犯的错误是，误将一个关联关系当成是因果关系（两个事情关联，但并不是说其中一件事发生，就一定会导致另一件事）。一个具备批判思维的人能将思路放回到假设中，并抛出问题：为什么我们会认定这个假设是对的？<br>这种（带批判性思考的）人还会做的事情有：</p><ul><li>提出更具体的问题（比如解析一个大需求：优化接口查询性能，可以拆解成，参数怎么优化，数据层过滤条件怎么优化等）</li><li>查询更多资料，寻找和问题之间的关联性（很适合初学者，资料总是不嫌多）</li><li>得到合理的结论和解决方式后，按照相关标准和规范进行测试（突出复现和测试）</li><li>通过不同的思维方式进行思考，对假设、影响和结果再次评估（形成适用于其他问题解决的方法论）</li><li>面对复杂问题，高效交流，找到最终解决方式（面对有复杂上下游的服务）</li></ul><p>扩展阅读: 批判性思考是通用技能吗？ <sup><font color='#49E844'>[5]</font></sup></p><h3 id="巩固基础知识"><a href="#巩固基础知识" class="headerlink" title="巩固基础知识"></a>巩固基础知识</h3><blockquote><p>牢固你的基础知识，并通过不断（在工作中）使用它们，来掌握新技能</p></blockquote><p>从长远角度来看，基础知识长期不变，学到了就能用很久，而且很通用，你在一个领域学到的基础知识在其他领域也用得上</p><p>短期来看，基础知识能让你面对问题时，提出更好的解决方案，并让自己的代码更加高效</p><h3 id="通用知识点"><a href="#通用知识点" class="headerlink" title="通用知识点"></a>通用知识点</h3><blockquote><p>通用知识是那些可以在不同项目之间都能使用的知识点。让我们从它们和基础知识之间的关系开始说起</p></blockquote><p>基础知识是贯穿整个软件工程师职业生涯的基础。它可以分为两层：宏观和微观。宏观层面是软件工程师的核心（<strong>基础知识</strong>），微观层面是实现（如：<strong>技术栈、库、框架</strong>等）</p><p>在宏观层面，你能够学到编程相关，高度抽象、和语言无关的概念。它们在各个领域的描述可能不同，但背后的核心思想都是一致的。包括：<strong>数据结构</strong>（数组、对象、模块、hash）、<strong>算法</strong>（排序、查询）、<strong>架构</strong>（设计模式、状态机）、<strong>性能调优</strong>（及早求值和惰性求值、内存、缓存、懒加载）等。这些概念你会在工作中经常用到，了解它们背后的原理将很有意义</p><p>在微观层面，你能够学到宏观概念的具体实现。包括：<strong>编程语言</strong>（JS、python、ruby）、<strong>前端框架</strong>（react、angular、vue）、<strong>后端框架</strong>（django、rails）和<strong>应用技术栈</strong>（谷歌 app engine、谷歌云平台）等。它们会涉及到很多能帮助你学到专业知识的细节，能让你变得高效， 但并不总是那么通用</p><blockquote><p>通过学习基础知识，你能够收获技能包和工具包，让你（在之后）可以忽略技术实现细节并成长</p></blockquote><p>务实地说，没有人可以在职业初期就学到所有东西。由此再延伸出一个观点：你不应该过多关注基础知识，反而应该学习在现实中搭建项目时需要用到的知识/技能。这也是“<strong>在实践中学习</strong>”理念的来源</p><p>译者：宏观知识帮助你了解技术原理，微观知识帮你把技术具体实现出来。不管是哪一种知识，都需要我们 learning by  doing 边做边学，都是需要过程的<br>不能太过神化宏观知识的重要性（比如各种面试八股文），它容易让你陷入底层，脱离工程<br>实际情况中，工程相关技能（即微观知识）更重要，毕竟这些才是能在当下帮你赚钱，帮公司赚钱的技能<br>​不管怎样，两种技术最终还是相互依存的。谁都很重要，谁也离不开谁</p><h3 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h3><p>理解服务的架构，能帮助你写出更高效的代码，这包括 <strong>时间复杂度</strong>（运行代码的时间）、<strong>内存使用率</strong>、以及<strong>性能和可维护性之间的平衡</strong><br>这些考虑点能让你在构建稳定的大型应用的时候，做出有用的权衡。另外对现代应用程序来说，<strong>速度</strong>非常关键，通常能特别显著地影响用户体验</p><h3 id="做出更好的选择"><a href="#做出更好的选择" class="headerlink" title="做出更好的选择"></a>做出更好的选择</h3><blockquote><p>对宏观和微观基本知识有更好的认识，能帮助你做出更优的决定</p></blockquote><p>基于项目的目标和约束，以及你所学的知识，你能够在选择<strong>应该用什么技术、不应该用什么技术</strong>这两个问题上做出更好的决策，避免在工作中因为选择了错误的技术方向或工具，导致陷入陷阱中</p><p>“You haven’t mastered a tool until you understand when it should not be used.” -<br>“<strong>你永远没有真正掌握一个工具，直到你知道什么时候不应该用它</strong>”<br>@kelseyhightower（谷歌云平台部门谷歌的首席工程师和首席员工倡导者）</p><p>软件工程师思考问题时需要考虑很多方面：<strong>核心语言、实现、架构、工具和人</strong>。只有在你带着<strong>敬畏之心</strong>，去认真学习这些方面的知识，才能让你更快成长。真正了解基础知识（包括 O(n) 时间复杂度（的算法））能帮助你走得更远，特别是在语言和框架（的具体实现）随着时间不断变化的背景下</p><p>扩展阅读:<br>The value of fundamentals in Software Engineering<sup><font color='#49E844'>[6]</font></sup></p><p>Why learning the fundamentals matters<sup><font color='#49E844'>[7]</font></sup></p><p>Learn the fundamentals of a good developer mindset in 15 minutes<sup><font color='#49E844'>[8]</font></sup></p><h3 id="专注于用户（需求），其他事情会跟着走"><a href="#专注于用户（需求），其他事情会跟着走" class="headerlink" title="专注于用户（需求），其他事情会跟着走"></a>专注于用户（需求），其他事情会跟着走</h3><blockquote><p>从用户体验开始，实现时回归你需要用到的技术</p></blockquote><p>乔布斯说过：”you’ve got to start with the customer experience and work backward to the technology. You can’t start with the technology then try to figure out where to sell it.”<br>“你需要从用户体验开始，再回归到技术中。你不能先基于（选择）技术，再尝试去找到哪里可以卖出你的产品”</p><p>这句话深深地触动了我：作为工程师，我们很容易就会有这种思维：先找方案，不管是社区流行的技术、其他开发者的经验，还是个人喜好，找到方案之后再去找哪里用得上<br>相反，我们其实更应该专注于我们所服务的对象、需要解决什么样的问题，以及当前的方案有什么不足之处<br>好的用户体验来自 <strong>用户和技术</strong> 两个角度的结合。和用户沟通，表达你的观点，你认为他们有什么需求，并认真分析他们说的需求。在用户需求实现上，会有很多细节能导致巨大差别，比如选择什么样的服务架构，能在用户手机端有比较好的体验；以及什么因素会影响工程开发、规模扩展、招聘等的效率？<br>总结来说，坚持不懈地关注用户需求，在工作条件限制下，<strong>坚持以实现用户需求为导向</strong>，能够让我们长期受益</p><blockquote><p>最优秀的软件，是由 带着用户同理心的工程师开发出来的</p></blockquote><p>软件能成功，取决于用户满意度，而满意度又体现在用户使用软件的体验上。我们需要了解<strong>最终用户侧</strong>的体验；确保我们的方案不会影响用户使用产品的同时，完成他们自己的工作<br>如果你有渠道可以和终端用户直接交流，就尝试去理解他们的需求和痛点吧</p><p>译者：理解用户需求并不简单，现实中总会遇到各种问题，译者经历过的主要有：</p><ul><li>和用户的沟通渠道不通畅<ul><li>大部分是平台问题导致的，比如产品首页缺少反馈按钮，用户想反馈问题只能靠投诉（想到了之前遇到的一个产品，想反馈一个bug，甚至要跳转另一个平台才能提，体验极差）</li></ul></li><li>用户需求和产品规划矛盾<ul><li>大部分用户需求都是站在短期实现的基础上的，和产品的长期规划不一定吻合。比如我想做一个笔记软件，长期来看，体验便捷 和 云端同步 可能是我首先考虑的功能点。对于 画图、共享这种功能，可能就不会排在很高优先级。但如果用户又站在强势地位，要求开发优先实现额外的需求，那开发就要受累了。后面可能就会能看到 产品、开发和测试 天天battle，需求赶着时间做出来，质量很差，转测的时候测试又提一堆bug，开发迫不得已边改bug 边开发，陷入恶性循环中</li></ul></li><li>用户也不清楚真实需求<ul><li>产品发展初期容易出现。用户对产品没有特别具体的认识，需要产品经理和用户进行更多的沟通，去发掘需求</li></ul></li></ul><h3 id="提升自己的能力"><a href="#提升自己的能力" class="headerlink" title="提升自己的能力"></a>提升自己的能力</h3><blockquote><p>选择适用于你的场景的技术，而不是当下流行的（flavor of the month）</p></blockquote><p>对比两种观点：使用“无聊”的技术（经过充分测试和体验的）也是ok的 VS  跟上潮流技术</p><p>语言、框架和库 都在经常发展。选择能帮助你顺利交付最终产品的就好。开始一个新项目时，建议从“无聊”的技术（<strong>但非常了解</strong>）开始，然后基于这个技术，有意选出最好的工具来帮你解决问题</p><p>即使是选择了新的技术来学习和使用，也不要害怕选择一些看上去无聊、不属于“社区”上主流的方向。FOMO<sup><font color='#49E844'>[9]</font></sup>（Fear of missing out 错失恐惧症）面对 语言、框架、库 和 工具这些技术的时候，可能就不是很有效了，因为更重要的事情是为了交付优秀的最终产品，你需要对自己所用的东西更加了解。请不要盲目为了追求新颖、漂亮的技术，除非你确定它们能为你的方案添砖加瓦。当然，也不要因为某个事情还没有被讨论充分，而忌讳提到它</p><h3 id="利用参与新项目的优势，学习新技术"><a href="#利用参与新项目的优势，学习新技术" class="headerlink" title="利用参与新项目的优势，学习新技术"></a>利用参与新项目的优势，学习新技术</h3><p>了解 <strong>个人开源项目和黑客项目</strong> 是学习新技术的好契机<br>对我们大部分人而言，基于现有项目是很难了解到新技术的，因为技术选型已经基本定型了<br>刚提到的两种项目，能让你以低风险、低成本方式研究新技术，了解新技术的优势和不足，以及了解可能在未来对你有用的一手知识</p><p>译者：另外，对初学者而言，还是要有对做什么项目的期望和思考，<strong>先有对项目的初步设想，再去找实现思路（如社区demo）</strong>。想法也不一定要很具体，有一个大体想法也可以，比如想做一个自定义规则的天气预报，想写一个小程序等<br>不是盲目找一个看起来很火的开源项目，随便搭起来就好了。因为并不是每个项目都适合你，越是花里胡哨的项目，越难应用于实际。<strong>带目的性的去找开源项目就是最好的甄别方法</strong><br>再提一点自己的感受：当有一个新技术摆在你面前时，<strong>学习它的最好时候永远是现在</strong>。错过了现在，你后面就可能花费更多的时间精力去重新捡起来</p><h3 id="保持好奇心，保持学习"><a href="#保持好奇心，保持学习" class="headerlink" title="保持好奇心，保持学习"></a>保持好奇心，保持学习</h3><h3 id="经常做笔记"><a href="#经常做笔记" class="headerlink" title="经常做笔记"></a>经常做笔记</h3><p>写下所学的东西，能帮助你更好的理解知识点。有的时候只有你尝试把自己所了解的知识讲给别人听，才能真正把你不懂的点弄清楚<br>如果你写的东西（博客）没人看，那也没关系。<strong>做笔记主要还是为了自己</strong>，（只是记下）你已经从中收获很多了</p><p><strong>学习还应该是一个持续坚持的事</strong> – 那些号称自己对特定领域无所不知的人通常都不是真正的专家。真正的专家精通一些技术，但他们能够意识到，总会有（继续）学习和改进的地方。<strong>好奇心驱动学习</strong> - 所以如果你对一个新框架感兴趣，那就去谷歌它、阅读它的文档、尝试新手教程、以及阅读源码！学习并不只是出现在教室中，<strong>学习可以在任何地方、任何时候发生</strong>。每天花半个小时阅读一本书的一小章节，听一次技术广播，阅读技术博客，学一门新的编程语言等</p><h3 id="Leader承认自己不知道的方面，将会很有感染力"><a href="#Leader承认自己不知道的方面，将会很有感染力" class="headerlink" title="Leader承认自己不知道的方面，将会很有感染力"></a>Leader承认自己不知道的方面，将会很有感染力</h3><p>Leader 需要降低期望：<strong>即使是高级工程师，也没有了解方方面面的必要</strong>。承认自己对一些细节不了解的同时，并致力于找到 和 团队一起解决问题的方法（即合作），这个比了解技术细节更重要</p><h3 id="Leader-也需要承认自己犯的错误"><a href="#Leader-也需要承认自己犯的错误" class="headerlink" title="Leader 也需要承认自己犯的错误"></a>Leader 也需要承认自己犯的错误</h3><p>教导下属 用虚心的态度承认和解决错误，愿意从错误中学习和提升自己，是很重要的。告诉下属现实世界并不完美，我们需要对可能发生的错误做好准备</p><p>译者： 理想状况下，我们提供的服务还是应该具备<strong>高可用、故障后可快速恢复</strong>的能力。这样就算是一个刚接手服务的同事，也能有快速上手的<strong>自信</strong>。遇到问题也能冷静处理<br>当然，不得不说，基础设施、服务维护工具和服务架构设计等，也是达到这种理想程度的基本条件。做到如上所述完全理想的情况不是不可能，只是确实有难度<br>如果你所维护的服务正好没有做到上面几点，那就根本别指望不会出问题，更别指望能不被用户投诉、领导责备了。不过这个时候，也只能想办法去<strong>尽量改变现状。每次犯错都去责备团队或者责备自己，对现状不会有任何改进</strong></p><h3 id="做开源项目的caretaker（管理者），而不是owner（所有人）"><a href="#做开源项目的caretaker（管理者），而不是owner（所有人）" class="headerlink" title="做开源项目的caretaker（管理者），而不是owner（所有人）"></a>做开源项目的caretaker（管理者），而不是owner（所有人）</h3><p>在项目发展的初期，以 owner 的角度去思考是没问题的。你会经常去思考项目的价值，开发新特性和回复 issue。对为项目争取社区支持、赞助是好事，但随着项目人员的变化，以及个人时间受限，这种模式对项目的发展就不是最好的了</p><p>经过初期的项目规模收缩之后，另一种参与项目的方式是成为项目的<strong>管理人</strong>，而不是<strong>所有人</strong>。管理人的角色更专注于扩大自身的影响力。比如和其他项目所有人、贡献者和社区之间 分享知识（通过文档、代码注释、最佳实践文档化等）。这对扩大项目的 reviewer 规模同样有用，有助于后续不再参与项目的时候，项目也能朝着正确方向发展</p><h3 id="技术的广度和宽度"><a href="#技术的广度和宽度" class="headerlink" title="技术的广度和宽度"></a>技术的广度和宽度</h3><blockquote><p>考虑成为一个全才和某一领域的大师，哪一个更适合你？</p></blockquote><p>你应该掌握的一个很重要的技能，就是掌握 如何学习 的方法。这比你怎么说更重要，（你需要做的）只是深入到编程语言或者框架的底层。另外这也有助于保持好奇心。一旦你经历了这种学习方式，你可能就会提出刚刚说的问题：是追求成为某个领域的专才，还是全栈的多面手（a jack of all trades）<br>我个人更喜欢成为 <strong>T型工程师</strong><sup><font color='#49E844'>[10]</font></sup>（T-Shaped Team Members） 的想法。这种工程师会在一个或少数几个领域有深入研究（<strong>T 的纵向深度</strong>），但对构建和运行大型项目需要的多个领域的技术，也有基本的认识（<strong>横向宽度</strong>）。有的团队会愿意将团队成员定期相互交换，来培养这种 T型工程师<br>我已经发现在中-大型团队中，如果有那种在某一领域专长的人员，能够很有效地补充其他人的技能、全面性和合作能力</p><p>译者：<strong>初学者还是建议以技术宽度为主</strong>。宽度能帮助你快速定位和解决问题（<strong>打开思路、用好工具</strong>），然后能更专注于研究深度。因此确实不要放过任何一个能学到新东西的机会<br>而最理想的状态，就是在对大的领域，比如后台，所有热门技术栈都有实践性的认识，同时对1-2个领域有非常深的实战经验</p><h3 id="从实践中学习"><a href="#从实践中学习" class="headerlink" title="从实践中学习"></a>从实践中学习</h3><p>学习一门新语言的时候，需要专注于构建有形的结果，能让你有更深刻的一手体验<br>不一定要完整阅读新语言的官方文档，记住所有的特性、关键词。<strong>了解这门语言如何解决问题</strong>更重要。从demo项目中，或者亲手写代码来获得经验。正如《Why Bad Software Happens to Good People》<sup><font color='#49E844'>[11]</font></sup>这里所说，“软件的主要价值并不是产生的代码，而是创造这个语言的人传递的知识本身”<br>也要注意：不要在生产环境进行新技术的试验</p><h2 id="技术复杂度"><a href="#技术复杂度" class="headerlink" title="技术复杂度"></a>技术复杂度</h2><h3 id="通用代码-vs-专用代码"><a href="#通用代码-vs-专用代码" class="headerlink" title="通用代码 vs 专用代码"></a>通用代码 vs 专用代码</h3><blockquote><p>解决手头问题的时候写专用代码，但也尝试能让代码变得更通用的地方</p></blockquote><p>当我们为了解决一个问题的时候，往往会因为紧急程度、升级复杂程度等，写出一些比较不那么通用，只是为了快速解决问题的“专用”代码。<br>通常，我们会先尝试写出尽可能通用的代码，最后写出那些看似高效的代码，但并不能解决问题。实际上，（应该）<strong>先是为了解决问题写代码，再去找到可以让代码变得更通用的地方</strong>，这样能在更迅速地解决问题的同时，减少后续再回顾和重构的时间（译者：解决手头问题的时候，短期效率还是排在第一位的）</p><p>关于设计复杂度上，有一些通用的原则：<br>YAGNI（You aren’t gonna need it）<sup><font color='#49E844'>[12]</font></sup>、Do the simplest thing that could possibly work<sup><font color='#49E844'>[13]</font></sup><br>这两点说的其实是一个事：<strong>不要过度设计</strong><sup><font color='#49E844'>[14]</font></sup>（overengineering）。尽量通过最简单的设计完成工作，让后续的需求通过快速迭代实现，而不是一开始就把所有特性都规划好。不过滥用这两个原则，也容易导致设计出过于抽象和简单的方案，后续不能很好地实现和集成</p><p>另一方面，你还会经常听到<strong>抽象原则</strong><sup><font color='#49E844'>[15]</font></sup>，旨在通过抽象和通用化思想，减少重复代码。我更喜欢在极端抽象和极端简单中找到平衡点，AHA<sup><font color='#49E844'>[16]</font></sup>（Avoid Hasty Abstractions）（避免过度抽象） 体现了这种思想</p><h3 id="Deep-Module-模块化-思想"><a href="#Deep-Module-模块化-思想" class="headerlink" title="Deep Module (模块化) 思想"></a>Deep Module (模块化) 思想</h3><blockquote><p>解决复杂问题，并通过开放清晰的接口给其他开发者使用</p></blockquote><p>如果你是一个API 的设计者或者开发者，你的职责就是提供能简化功能的接口。如果接口过于难懂，让其他程序员调用需要花费过多成本，那这个接口就是不合格的。这个理念同样能在 <strong>Deep Module</strong><sup><font color='#49E844'>[17]</font></sup> 的思想中体现：“最好的模块能够同时提供最好的效果和最低的成本。效果就是它的功能，成本就是它的接口”</p><p>尽管让接口变得简单是可行的，但代码不一定，复杂问题有时就是需要复杂的代码来实现（这是一个通用规则，但不一定总是正确）。复杂度最好是内嵌到代码中。复杂的功能抽象程度越高，作为接口提供给最终用户的价值就越高<br>API 使用越多的函数和类，就越难被搜索到。随着函数和类的新增，将会增加 程序员的维护和接口使用的成本</p><p>译者：接口设计规范也是老生常谈的规范了，这里简单提一下</p><ul><li>接口的入参不应超过3个<ul><li>接口入参 其实就能体现给用户调用这个接口的成本。参数越多，也意味着这个接口越复杂，甚至不是复杂在功能，而是理解成本</li></ul></li><li>用更少的类实现接口<ul><li>这里就涉及到模块架构的设计了，比如一个 http 接口，最普遍的分层方式就是 api 层 + controller + service + 数据层</li></ul></li><li>接口名称</li><li>接口返回值</li></ul><h3 id="学会管理项目"><a href="#学会管理项目" class="headerlink" title="学会管理项目"></a>学会管理项目</h3><blockquote><p>处理旧系统的代码时，应该理解需要保留的代码，和需要废弃的代码之间的区别</p></blockquote><p>大型、年久失修的项目往往会有一些不好的、没有好的理由再保留下去的代码。应该去深入了解这些代码，分析留下的理由、去除的理由。去除坏代码，留下好代码</p><p>我曾经在很多公司中遇到过这种情况：<strong>同事们认为旧的代码是不可动的</strong>，或者是出于一个好的理由设计的，导致这些代码流失于历史之中（译者：即没人敢动，也没人能动的状态）。这会产生对修改旧系统代码的畏惧感，只能在一个脆弱的基础上继续添加功能</p><p>软件行业已经发展到了一个阶段：<strong>很多团队都需要维护或者迁移 旧系统</strong>。当你发现自己就在这样的团队的时候，不要灰心，你可以从这些旧代码中学到很多特定领域的知识。尽管旧的代码在生产环境中继续保留 会有充分的理由，你还是可以怀疑不是每一行都有存在的价值</p><p>有的软件开发者会对修改在线上环境运行的代码很谨慎，担心会导致bug。所以他们会根据现有的系统的代码，通过重复代码来添加新功能（译者：比较典型的情况就是修改接口，对旧系统存在 bug 的接口不敢改，而是添加一个新的接口，但这个接口绝大部分代码都和旧接口一样）这种解决方式在当时会很省时，但随着时间推移，维护就会变成噩梦了。不要假设现有的代码都是可靠的，它们在可扩展性和效率上可能会有问题，你可以去尝试发现这些问题</p><h3 id="从新项目（green-field）中学习"><a href="#从新项目（green-field）中学习" class="headerlink" title="从新项目（green-field）中学习"></a>从新项目（green-field）中学习</h3><blockquote><p>实验、创新、快速失败和更好地解决问题</p></blockquote><p>当你的任务是从头开始搭建一个系统的时候，你的学习之旅就将很不同。在迭代制作原型、实现特性的时候，你将能学到什么能起到作用，什么不能<br><strong>敏捷方法论</strong> 和 <strong>快速失败</strong> <sup><font color='#49E844'>[18]</font></sup>（fail-fast）的原则，将帮助你通过很少的资源就能确认你的想法是否正确。它们能帮助你拆解并解决复杂问题</p><p>译者：敏捷开发这块，现在已经有很多开源的工具，可以帮助我们在本地实践。简单列几个：</p><ul><li>代码仓库：gitlab（需要使用体验）</li><li>发布：jenkins</li><li>镜像仓库：harbor</li><li>服务管理：k8s、istio、etcd等</li></ul><h3 id="定义完成事项"><a href="#定义完成事项" class="headerlink" title="定义完成事项"></a>定义完成事项</h3><blockquote><p>定义什么算是“完成”事项能节省时间，因为它能帮你评估所需要的工作、制定开发计划、并避免不必要的调整</p></blockquote><p>在解决复杂问题时，有效的敏捷原则是对 “完成”事项（The Definition of Done<sup><font color='#49E844'>[19]</font></sup>） 达成一致。除了用户需求列表和验收标准外，还包括代码审视（code-review）、测试、文档化等</p><p>译者：这里体现一种“<strong>闭环</strong>”思维：在手头事情很多，需要来回切换的时候，事情做得稍有疏忽很正常。因此需要特别注意 “完成” 事项的明确<br>比如刚给用户改完一个bug，在用户群回复用户、知会受影响方、提交fix代码，都是需要“闭环”的事情。可以先稍微花点时间先把它们写下来，避免忘记</p><h3 id="分阶段发布"><a href="#分阶段发布" class="headerlink" title="分阶段发布"></a>分阶段发布</h3><blockquote><p>单个大的版本可以拆解成一系列低风险、容易理解的小版本来发布</p></blockquote><p>在大型生产环境系统 进行 版本发布的时候，版本发布计划的重要性不亚于 架构、代码实现等。通过迭代开发、分阶段发布版本，能帮你更好地管控因重大更改而导致的风险。你还可以制定版本发布策略，包括开发、测试策略，来保证在发布复杂特性的时候，有（完整的）端到端计划</p><h3 id="系统性调试"><a href="#系统性调试" class="headerlink" title="系统性调试"></a>系统性调试</h3><blockquote><p>当你在 debug 的时候，你应该系统地、严谨地解决问题，确保覆盖到了所有的测试条件</p></blockquote><p><strong>总是阅读错误和堆栈信息</strong>。那里大概率会有关键信息，能帮你定位和解决问题<br>惊人的是，很多工程师在调试之前，都会忽略错误信息能提供的线索。我们应该假设 机器/软件能告诉你发生了什么问题，而不是假定 稍微做点修改、重启服务就能解决问题。如果你还没有仔细阅读程序抛出的异常，就开始写解决方案，你可能会浪费时间。大部分情况下，异常信息中就包含了真正错误的提示</p><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><h3 id="设计文档的重要性"><a href="#设计文档的重要性" class="headerlink" title="设计文档的重要性"></a>设计文档的重要性</h3><blockquote><p>设计文档不应该放在后面来考虑，而应该是软件开发过程的一部分</p></blockquote><p>设计文档能帮助你和 <strong>同事</strong> 或者 <strong>其他需要和你的系统进行交互的团队</strong> 之间获得共识，是一个无处不在的工具。从他人获得的反馈，又可以让你认识到差距，并改进你的设计。设计文档还可以为后续加入团队的工程师提供宝贵的帮助，可以帮助他们理解问题，在设计解决方案的时候考虑到权衡点、替代方案等。设计文档也提供了一个团队空间，能够记录所有设计的参与者，以及它们的贡献，作为历史文档的一部分，以方便他人找到具体解决方案的贡献者，以及方案具体解释的负责人</p><p>译者：一个成熟的项目，团队空间中包括的文档应该包括而且不限于：</p><ul><li>项目 milestone</li><li>公司权限申请帮助文档</li><li>服务设计文档</li><li>服务环境、部署文档</li><li>内部服务和第三方服务的接口人</li></ul><h3 id="文档审查"><a href="#文档审查" class="headerlink" title="文档审查"></a>文档审查</h3><blockquote><p>协同检视设计文档，比较当前文档和历史文档，确保所有依赖项都被记录了</p></blockquote><p>尽管每个人都可以在文档中记录设计思路，但实际的设计过程通常出现在白板会议、随机面对面讨论、空闲时间段 或者 邮件/手机讨论（这种<strong>随时发生的场合</strong>）中。在这之后，只有通过文档把设计记录下来，你才能确认 结论之间的矛盾点，并确认（现在讨论的结论和）之前讨论过的点是否吻合。初稿完成后，需要进行审视，确保所有相关人员都参与进来。另外，随着项目发展，还是可能存在代码实现 和 文档中记录的设计思路 变得不吻合的情况（因此文档需要定期审查和更新）</p><h2 id="沟通"><a href="#沟通" class="headerlink" title="沟通"></a>沟通</h2><blockquote><p>谦虚、清晰沟通、并尊重他人。保持亲切 本身不计成本，它产生的影响却是无价的。有的人会认为 沟通需要消耗能量和思考。正是因为如此，我们需要以更多的能量和热情来和他人沟通</p></blockquote><p>沟通是一个非常关键的通用能力和社交能力。成为一位有用、高产、和高效（effective, productive, and efficient）的软件开发者也离不开（和他人）沟通。沟通不通畅会导致（开发出）不正确的功能、不兼容的代码、冲动的团队氛围等。沟通能帮助开发者更好地理解需求，避免问题继续升级<br>理想情况下，<strong>软件开发者是把（大部分）时间花在编写代码上的</strong>。但是为了保证我们的产品真正对用户有用，我们还需要和团队成员同步工作（进度）、业务需求和用户期望。这让协作和沟通成为我们工作很重要的一部分<br>初级工程师主要的沟通对象是 其他团队成员、测试工程师和项目leader，分享想法和解决问题的方案。随着我们职业发展，为了有效完成工作，需要的沟通量将会越来越多。邮件、会议和公开演讲也会变多。我们必须和 <strong>业务leader、项目经理、利益相关人员</strong>沟通。然而沟通越多，产生误解的风险也会越大，因为不是每个人都能轻松理解你的表达方式</p><h3 id="定义你的沟通方式"><a href="#定义你的沟通方式" class="headerlink" title="定义你的沟通方式"></a>定义你的沟通方式</h3><blockquote><p>和沟通对象 确定好 语言、概念 和 沟通细则的相关性</p></blockquote><p>不管我们对问题或者情况有多么理解，和别人沟通的时候，我们还是应该设计好沟通关键词，保证沟通对象能够快速get到 和自己相关的内容：</p><ul><li>和业务人员沟通的时候，谈论你所做的事情在业务层面的影响。避免使用过多的技术术语</li><li>和工程管理人员沟通的时候，说明技术影响和挑战</li><li>和决策者沟通的时候，描述你期望的可行方案，以及这些方案的影响和风险，不要谈到方案实现的细节</li><li>提供状态更新的时候，需要特别关注随着更新可能导致的周边影响，以及你的更新和目标之间的关联度</li></ul><p>这些原则 同样适用于写邮件和举行大型分享。你需要写下和沟通对象相关的事项。在分享的时候，还需要保卫你的观点，以深思熟虑的态度回复问题，膝跳反应（knee jeck）的回答方式通常不适用于沟通</p><h3 id="耐心、深思熟虑"><a href="#耐心、深思熟虑" class="headerlink" title="耐心、深思熟虑"></a>耐心、深思熟虑</h3><blockquote><p>亲切是一种超能力，尝试用好它</p></blockquote><p>成为冷静、亲切和乐于助人的人，能让你走得更远，而不是切断自己和其他人的联系。善于帮助团队内的同事，能帮助你的团队变得更强大和更成功。对团队外的成员也保持友善，对公司的职能部门同事（<strong>hr、财务、市场</strong>）也给予同样的尊重，（在工作上）你可能不会直接帮助到他们，但你可以理解他们的工作，对他们拥有同理心。当他们在工作上有所成就，或者获得赞誉的时候，也同样送上你的祝贺和赞赏。善良是能传递下去的，那些你曾经善待的同事，在未来可能也会积极回应你的需求</p><blockquote><p>不要吝啬（be liberal）称赞他人</p></blockquote><p>产品需要改进的时候，（问题的）反馈很重要。产品体验很优秀的时候，正面的反馈同样很重要。这能帮助你的团队（成员）明白 正在做的事情是能带来改变，并且是有价值的</p><h3 id="学会说“不”"><a href="#学会说“不”" class="headerlink" title="学会说“不”"></a>学会说“不”</h3><blockquote><p>说“不”比工作过度要更好</p></blockquote><p>很多时候在工作逐渐累积的时候，我们都不是很擅长说“不”。要么是因为没有意识到<strong>说“不”其实是一种选项</strong>，要么是我们沉迷于挑战之中。但是过度工作是一种负担，它可能会导致交付延迟。让其他人也知道你正在进行的计划，以及一个合理的时间预估，也是一种尊重的态度。因为这能够让其他人调整他们的选项：向其他人寻求帮助，或者推迟时间表。如果 leader 能了解到（过度工作）会明显影响产品交付质量，他们也不会强行要求你在很紧的时间内完成工作。如果你是高级经理，请让你的团队成员有权利对坏主意说“不”<br>高级工程师是很擅长于说“不”的。人们会试图占用你的空闲时间。你可以平静而又坚定地说不，将他们指向其他思路，或者让他们找你主管，确认你到底是否可以将更多的时间，花在帮助他们身上（而不是手头的事情）” - 观点来源<sup><font color='#49E844'>[20]</font></sup></p><blockquote><p>你不可能让所有人感到满意：不管是说 “yes”还是 “no”都要格外小心</p></blockquote><p>领导对一切事情说“no” 的对应面，就是对一切事情说“yes”，并且两者没有明显的边界。承担超过 利用现有的资源（人力、时间等）能承受的工作范围，可能最终会导致你自己、你的团队和客户都受伤。<strong>向下属制定 什么时候应该说 “yes”，什么时候应该直接拒绝 的规范，对 leader 来说是特别重要的</strong></p><h3 id="接受与尊重"><a href="#接受与尊重" class="headerlink" title="接受与尊重"></a>接受与尊重</h3><blockquote><p>敢于承认你不了解的东西。开放地接受别人寻求帮助的请求，包括初级工程师（的提问）</p></blockquote><p>承认你不知道的事情，是很ok的。对软件工程师来说，最重要的技能之一就是找到问题的答案，并从中学到东西<br>作为一名 高级leader，需要学会接受 身边的下属 可能比你更了解工程的技术细节。承认你不了解一些细节是 ok 的，让下属负责解释他们。下属会因为你的诚实，以及对学习的兴趣，对你更加尊重，你也会对当前团队正在做的事情有更清晰的画面，并在这些事情上增添更多的价值。作为初级工程师，你应该向更高一级工程师把技术概念和方案细节解释清楚，可以是开放式（交流会），也可以是在会议室，取决于你觉得哪种方式比较舒适</p><h3 id="信息分享"><a href="#信息分享" class="headerlink" title="信息分享"></a>信息分享</h3><blockquote><p>通过会议 或者 问答 的形式，提出合适的问题，交换所学，并在团队中分享</p></blockquote><p>举行会议的时候，不要只是一个人在说。会议是一个很好的 分享想法、提供真实反馈的机会，除了表达自己，也应该给别人一些空间去发言，并认真倾听<br>初级工程师可能会羞于提出过多的问题。如果你是高级工程师，你可以通过提出（需求）上下文，来提示他们提出正确的问题。筛选问题之后，也要让提出问题的同学知道，你对（真实）问题的抛出感到高兴</p><h3 id="灵活性"><a href="#灵活性" class="headerlink" title="灵活性"></a>灵活性</h3><blockquote><p>捍卫你的观点，但是发现新的观点，和自己的观点对立的时候，也要懂得审视它们</p></blockquote><p>审视其他观点，也是交流的重要过程之一。有不同于自己的观点是很正常的，因为一个问题的解决方法本来就可能不止一种。与其固执于自己的观点，不如去倾听、审视其他观点。说不定这些不一样的想法，还能让你的观点在之前忽略的方向更进一步。Paul Saffo（斯坦福大学工程学院的咨询教授） 的原则 “<strong>Strong opinions weakly held</strong><sup><font color='#49E844'>[21]</font></sup>” 告诉我们要捍卫自己的观点，同时也要在发现新的对立现象之后，及时更新观点。这是一种科学、通用的方法论，不管提出观点的人是谁</p><h3 id="保持记录"><a href="#保持记录" class="headerlink" title="保持记录"></a>保持记录</h3><blockquote><p>非正式会议之后的一封邮件，有助于我们确认讨论的关键点和关键进展</p></blockquote><p>完全口头的交流有一个缺点，就是会后 （讨论过的事情）很容易忘记，或者是记错。保持会议过程所发生事情的记录，以及所有讨论点的总结，能降低这种风险。如果你和另一个同事已经确定要参与一项任务，你需要通过邮件将 ddl 知会到所有相关人，包括你的导师。在事项的（排期）评估讨论过程中，对尚未具体排期的计划进行记录也会很有用</p><h3 id="真诚"><a href="#真诚" class="headerlink" title="真诚"></a>真诚</h3><blockquote><p>了解在什么时候应该保持冷静，观察正在发生的事情</p></blockquote><p>有的时候，你对团队讨论做出的一些决定 会不太理解，或者是这些决定无论从技术还是业务角度看都不合理。这在跨团队讨论过程中可能会出现。（尽量）表现出你的真诚，并假定人们不会冒着 带有恶意 的风险。可能你只是对整体背景还没有完全的认识，或者是参与讨论的人们有各自的优先级考虑。你需要提出你的疑惑，列出你的观点，而不是对最终决定直接表示愤怒和消极</p><p>译者：“沟通”这一章节所说能否应用到现实，建立在团队有开放的交流氛围、leader和其他成员乐于听取你的想法的基础上。当然，现实情况并不总是那么理想，但不管怎样，<strong>保持冷静，少冲动做事</strong>是总没错的</p><h2 id="资历"><a href="#资历" class="headerlink" title="资历"></a>资历</h2><p>我们期望不断提高自己的资历，不管是从角色还是能力方面。有的人会对高级工程师职位感兴趣，有的人会更愿意往团队leader或者部门管理方向发展。不管是哪种选择，在我们职业发展的过程中，总会有一些关键特征，是会慢慢展示出来的。在你的成长过程中，你可能会由你的导师来带领你，下面是我的一些方法，可以帮助你在走上高级职位之前，准备好必要的素质</p><h3 id="资历和战略思维"><a href="#资历和战略思维" class="headerlink" title="资历和战略思维"></a>资历和战略思维</h3><blockquote><p>不要害怕做决定，或者表现得很不确定</p></blockquote><p>大部分时候你会发现，<strong>做决定的结果比不做决定要好很多</strong>。至少你的决定能让别人知道，你在朝哪个方向前进。作为leader，我们往往没有花足够的时间审视 整个团队到底期望我们做什么样的决定。即便如此，我们也不会这么去审视，因为我们不可能掌握 100% 的事实。我们确实应该在做决定前，尝试描述所有的依据和细节，但不可能做到面面俱到（特别是时间紧张的情况下）。（过度注意细节）这可能导致团队 长时间陷入 停滞、不确定的状态。通过有限的信息，在有限的时间作出的决定，效果反而会更好（译者：感到没事做是最不好的状态，对个人和对团队来说都是如此）</p><blockquote><p>leader 负责补充自己的知识库，来让自己全方位、战略性地思考，并为他人制定前进路线图</p></blockquote><p>随着经验成长，你的战略性规划、将想法应用于更多领域 的能力，也应该提升。从独立开发者角度出发，你可能会专注于你所负责的任务，还有需要实现的功能。但随着你的进步，你的影响力就不仅体现在工作任务和负责项目上了。在权衡选择时，你将学会根据选择带来的 效益和限制 两个角度，去思考更多的东西（即权衡利弊）。举个例子，在早期 你只是为了自己的团队，指引组内其他同事 去做决定，随着你的成长，你的选择和交流将会影响到多个团队</p><h3 id="以身作则"><a href="#以身作则" class="headerlink" title="以身作则"></a>以身作则</h3><blockquote><p>向团队传授学习方法。不要只是为了解决手头问题而去行动，耐心地指引他们 去锻炼一些能力，并让这些能力为自己服务</p></blockquote><p>工程师行业的领导善于<strong>授权</strong>。随着你的职位越来越高，尝试下放原来属于你的工具、权限、责任等，让团队成员自己去用这些资源并取得成功，（对下属）会很有帮助。这也是你继续提升效率的方法。还可以通过 提出好问题 来提升，而不只是回答问题</p><blockquote><p>在别人提供解决方案的时候，以身作则地 负责具有挑战性的任务，并提出（过程中遇到的）相关问题</p></blockquote><p>技术领域的高工 需要负责 团队内和团队外的协作、沟通和共识建立。<strong>他们致力于提高团队的整体产出，而不仅是自己的</strong>。作为高级工程师，你可能偶尔是为了学习新技术，或者是了解行业现状 去写代码，但这种事情并不会被写在工作内容中（需要自觉去做）。现实中，你还需要自觉去审视代码，确保架构图中没有疏漏。你还应该为自己的决定 如何带来技术或者商业价值 收集好依据和原因<br>高级工程师还应该熟练管理软件系统和团队。你可以领导一个多元化的工程师团队，分配给他们 注重代码质量、性能、复杂度 的任务，及时给予反馈和指导。同时，<strong>你还应该适当展示你的能力、工作和技能</strong>，让自己未来有能力解决具有挑战性的问题，在团队甚至公司获得知名度。总而言之，你应该培养和团队内同事、公司内领导层的关系</p><h3 id="提升你的影响力"><a href="#提升你的影响力" class="headerlink" title="提升你的影响力"></a>提升你的影响力</h3><blockquote><p>伟大的软件项目通常是由团队创造的，而不是个人。所以 如果你想实现更多的目标，或者在公司展示 你已经为成为 高级工程师 做好准备了，你需要通过合作和指导力来展现自己。提升影响力，不仅仅是为了自己，也为了团队的其他同事</p></blockquote><p>当我意识到需要扩展自己（的能力）的时候，就是我在google公司内向着成为高级工程师的时候。<strong>我必须在考虑 “我”和 “我们”的模式之间切换</strong>。通过和其他人协作、分享所学、专注于提升身边同事的经验和技术，我们深刻意识到做了更多有价值的事情</p><p>如果你是从独立开发者开始，你可能不会专门领导一个团队，但<strong>你可以寻求更多志同道合的小伙伴来和你共事</strong>，实现一个人难以实现的项目。随着你的技能、职位越来越高，你会通过建立团队，进一步提升工作效率，来继续贯彻这种（合作）思维</p><h3 id="“不能胜任”综合症（Imposter-syndrome-22-）"><a href="#“不能胜任”综合症（Imposter-syndrome-22-）" class="headerlink" title="“不能胜任”综合症（Imposter syndrome[22]）"></a>“不能胜任”综合症（Imposter syndrome<sup><font color='#49E844'>[22]</font></sup>）</h3><blockquote><p>尝试接受 犯错误、难以找到答案、需要寻找指导 的工作过程，可以帮你克服“我不能胜任”这种心理负担</p></blockquote><p>我们在工作中几乎都遇到过，对特定的工作或者是角色，（一开始）会感到自己并不能胜任。这种心理是非常普遍和真实的，甚至在一些已经获得明显成就的人身上也会出现。即便是别人会找自己咨询意见，你依然可能会觉得自己不适合。甚至你永远也不会放下这种内心负担，但它确实能激发你的好奇心，推动你去学习新东西</p><h2 id="指导"><a href="#指导" class="headerlink" title="指导"></a>指导</h2><h3 id="指导他人"><a href="#指导他人" class="headerlink" title="指导他人"></a>指导他人</h3><blockquote><p>及时提供信息和指导建议，让你的学员不至于陷入完全不正确的方向，而是通过做好自己的事情来掌握技能</p></blockquote><p>在你职业生涯的发展过程中，你可能会发现自己时而是导师，时而是学员。作为导师指导别人，不一定非要很正式的过程。非正式（日常工作）情况下，你也可以寻求指导别人或者获得别人的指导的机会。指导别人可以锻炼自己的人际交往能力。下面是一些指导的关键点：</p><p><strong>指导别人是引导别人去发现答案，而不是直接给他们最终答案</strong>。允许你的学员在解决问题的时候多尝试，多实验，因为他们有直接感受解决方法的风险和收益的最佳机会。不过，你也应该及时把解决问题用得到的工具（比如方法论）告知给他们，如果是一个技术问题，也可以参与讨论，提出你所建议的想法和方案，具体实施还是交给他们。让学员也分享所想，提出问题，进行对话讨论</p><p>如果你的学员发现自己很难找到问题的解决方法，你可以分享你会怎么去分析问题，接近答案，以及为什么你会用一个特定的模式来解决问题。教会他们分析问题和debug的方法，分享你在 诊断问题、提出解决方案、实现解决方案 和 debug 时候的思路。<strong>分享如何解决问题的技巧</strong>，而不仅仅是答案</p><h3 id="组织层面的指导"><a href="#组织层面的指导" class="headerlink" title="组织层面的指导"></a>组织层面的指导</h3><blockquote><p>指导别人是作为高级工程师的职责之一，有助于在组内成员变化之后，依然能保留关键领域的知识</p></blockquote><p>假设你在很投入地指导别人，而且也是你日常工作的一部分。这种情况下，你就需要安排一部分工作时间，专门用在指导活动上。这能让你指导的效果更好，在指导生涯中做出更有意义的事。有的公司还会根据职责发展阶段和要求，在员工发展的每一阶段都会对 导师/学员机制 有一定的流程规范</p><h3 id="学员的职责"><a href="#学员的职责" class="headerlink" title="学员的职责"></a>学员的职责</h3><blockquote><p>导师可以给你建议，但真正评估和实施方案的还是你自己，你需要对自己的职业生涯发展和成长做好规划</p></blockquote><p>假设你是期望在团队内成长起来的初级工程师，我只有一条建议给你：找到那些能帮你规划职业发展的优秀导师<br>你会在职业生涯中，遇到仰慕的教练、导师和同事。他们会给你如何培养技能的建议，但真正实践还是得靠自己。吸收别人的建议时，也要注意技术层面的条件，不同场景，有效的法则也会不同。在一个项目有效的理论，换个项目就不一定适用了（<strong>具体情况具体分析</strong>）</p><h2 id="高效的团队"><a href="#高效的团队" class="headerlink" title="高效的团队"></a>高效的团队</h2><h3 id="构建信任"><a href="#构建信任" class="headerlink" title="构建信任"></a>构建信任</h3><blockquote><p>信任可以将团队人员拧成一股绳，朝着共同的目标努力工作。相反，官僚主义会让彼此产生隔阂</p></blockquote><p>当工程师一起参加一个<strong>开放、公正</strong>的头脑风暴会的时候，（这种形式）为能够驱动创新 的新的想法和不同思维角度（的提出）铺平了道路。（这种开放的氛围）确实能驱动团队变得高效和高产出。不过团队内成员能高效合作的基础，还是健康的沟通和关系。下面是一些构建和管理高效团队的关键点：</p><p>构建起信任，是团队构建中最重要的事项。跨越不同级别的同事之间的信任，对工作事项能快速完成、团队能高效运作很必要的。团队成员可能会使用不同的开发工具，比如为了检查工程质量而使用的代码检视工具，或者是测试工具。然而如果没有信任作为基础，这些（开发）过程都会变得乏味和官僚主义。举个例子，如果你信任一个工程师和他的代码，那么在进行代码检视的时候，就会更少地吹毛求疵</p><p>译者：确实有的公司盲目追求编程规范，搞了各种可信认证，已经让编程完全变了味。译者认为，可信的目的并不是让大家都变成“一样”的人，写完全相同风格的代码，用同样的工具，甚至用同样的开发语言。如果是这样不如开发一个机器人来写代码，而是相信他的代码上线之后能稳定运行、代码风格比较规范、代码具有可扩展性等</p><p>真正开放、有彼此促进的开发氛围，是需要靠实际的团队合作培养出来的，比如分享、代码检视会等，而不只是各种枯燥的考试和认证</p><h3 id="理解业务模型"><a href="#理解业务模型" class="headerlink" title="理解业务模型"></a>理解业务模型</h3><blockquote><p>理解变更会对业务侧带来的影响</p></blockquote><p>当你（从业务侧）接到一批需求时，你需要了解它们背后的动机。一定不要跳过需求文档中的“<strong>目的（或背景）</strong>”和“<strong>业务目标</strong>”章节。你还可以通过（向产品经理或用户）提问来了解业务模型，以及它和需求之间的关系。通过（检视）现有的代码，或者是一次和SME（subject-matter-experts 行业专家）之间的交流，可以让你对领域和架构有更深入的视角。在进行系统流程和数据工作流（data flow）的时候，请参考业务文档、特性地图 以及 使用示例等</p><p>“大部分软件工程师都喜欢带着技术上的挑战去解决问题。然而当你理解业务的角度（去思考）时，你会收获更多，比如成本更低的解决方案。要记住你的用户/客户 使用你的产品，也是为了去完成他们自己的工作，就像你完成每天的工作方式一样。尽量不要让他们的工作比使用你的产品之前还要困难” - 来源<sup><font color='#49E844'>[23]</font></sup></p><h3 id="提升你的影响力-1"><a href="#提升你的影响力-1" class="headerlink" title="提升你的影响力"></a>提升你的影响力</h3><blockquote><p>对业务-软件之间的关系 保持一定的洞察力和敏锐度，能提升你的工作影响力</p></blockquote><p>对业务和产品进行360度的审视，能帮助你对团队和项目有更积极的贡献。如果你能够<strong>从销售和市场人员的角度进行思考</strong>，你将能够有更好的方式去做出正确的选择和高产出的工作。随着你对团队的影响力的提升，你对工作的满意度和工作给你的收获也会更多（译者：当然这是一种很理想的情况：工作和成长是相互促进，正相关的关系）。领导会注意到，你有能力自我驱动，不需要过多的监督，就能够做出对团队、项目和业务都有促进的事情，来提升整体效率</p><h2 id="Work-Life-balance"><a href="#Work-Life-balance" class="headerlink" title="Work-Life balance"></a>Work-Life balance</h2><p>如果你已经掌握了 技术能力、人为因素和领域方面的知识，作为软件工程师，你将会更受欢迎。团队内部的同事也会经常向你请教。除了工作本身的工程任务之外，你可能还需要承担过多协作相关的事情，导致<strong>协作过载</strong>（collaboration overload<sup><font color='#49E844'>[24]</font></sup>）。过多的临时请求会侵占你的时间，导致你没有精力去做真正想做的事</p><h3 id="时间管理"><a href="#时间管理" class="headerlink" title="时间管理"></a>时间管理</h3><blockquote><p>为 <strong>Deep Work</strong>（沉浸式工作）规划好你的时间表</p></blockquote><p>你需要在日程中专门留出一部分时间，用来做 Deep Work。坚持了几年，我发现这个方法对编写设计/策略文档，或者钻研一个技术问题是非常有效的。Deep Work 是一种<strong>远离干扰、深度集中（注意力）</strong>的工作模式，能够在有限的时间创造出很多价值。Cal Newport（乔治城大学计算机科学系副教授）的《Deep Work》<sup><font color='#49E844'>[25]</font></sup>也谈到了这一点</p><p>“<strong>注意力残留</strong>”（Attention residue）是 Cal 提到的一个观点，也是 为什么 持续的 Deep Work 能如此高效的原因：每当你从一件事情切换到另一件事的时候，内心注意力的“残留”，会让你依然陷入对上一件事的思考上面，很难重新集中注意力去做当前真正重要的事</p><p>Deep Work 通过让你专注于一件事情上，最大程度地提升你在有限时间内的产出。期间<strong>没有打扰，没有推特，没有会话或者邮件</strong>。我非常推荐你尝试一下，对那些认知工作比较重的任务（译者：需求方案设计、技术问题定位等），放在 Deep Work 的时间去完成它们</p><p>我还发现偶尔换一个工作位置，对 deep Work 很有用。我们可能会陷入到（“过于习惯”）一些特定的工作地点和特定的工作任务，如 一个桌子、一个房间、高楼里面（需要完成老板日常吩咐的任务）。适当进行一些改变，可以帮助我们重振活力</p><p>译者：有意思的是，我有个导师也经常这么做。一开始还纳闷怎么每天他下午3点多都要出去工位一段时间，后来接了个茶才发现，原来他正在茶水间摆着电脑沉浸式敲代码呢</p><blockquote><p>尽量不要打乱自己的工作时间</p></blockquote><p>如果你的一个小时因为分心，被分割成几分钟的时间块，你可能会感到焦虑。找到让你分心的原因（不管是因为自己还是别人）并解决他们。否则你的一天将会变得很低效</p><p>译者：这里提几点比较具体的建议：</p><ul><li>每天都固定留至少1h 用于专注做1-2件事情上（尽量是做有长期价值的事）</li><li>专注模式下，尽量关闭社交软件的通知，眼不见心不烦</li><li>通过公司内部的聊天工具备注，或者是其他方式，把自己的专注时间也告知别人，让别人尽量尊重你的时间的同时，提高彼此沟通的效率</li><li>专注模式尽量用在精神状态比较好的时候，这个因人而异，对译者来说就是下午3-4点的时间</li><li>也分配一个“杂事模式”，专门用来处理bug、回复、部署等这一类偏流程或运维的事情</li><li>临时的事情超过3个，一定要排个优先级，防止安排不过来（毕竟人类大脑在“多线程切换”这件事上可没有计算机这么灵活）</li><li>进入专注模式前，对自己要做的事尽量拆细，做到万一真的被打断了，能快速切换状态</li><li>（作者）切换工作地点，给自己寻找不一样的灵感。译者就发现有的大佬喜欢到茶水间/会议室专心写代码，远离嘈杂的办公位</li></ul><h3 id="过度工作并不是好的工作素养"><a href="#过度工作并不是好的工作素养" class="headerlink" title="过度工作并不是好的工作素养"></a>过度工作并不是好的工作素养</h3><p>你不可能比所有人都更努力工作。很多公司都以“加班”作为工作态度的“标准”，并将他们和良好的职业道德挂钩。然而成功来自很多因素，绝不仅仅是加班</p><h3 id="不断尝试超越自己的标准是不现实的"><a href="#不断尝试超越自己的标准是不现实的" class="headerlink" title="不断尝试超越自己的标准是不现实的"></a>不断尝试超越自己的标准是不现实的</h3><p>我对此感到很惭愧。如果你想保持平静的心态去开发，避免疯狂的工作环境，你需要有“<strong>知足心</strong>”，对现状保持满意。作为领导，你应该领导你的团队形成这样的氛围，有“<strong>足够好就可以了</strong>”的心态，树立好的榜样</p><p>译者：说白了，就是“<strong>反对无休止的内卷</strong>”。对个人来说，不断追求更好的自己是好事，但是对团队来说，看不到努力的天花板，不知道做到怎样算是足够，绝对不是好事。Leader 在给员工审核目标的时候，也应该给每个下属明确“<strong>达到足够</strong>”的指标</p><blockquote><p>工作时间是有限的，与其花更多的时间，不如减少没有必要的工作</p></blockquote><p>（市面上）已经有很多关于如何更好地重新梳理工作的指导（书、文章），然而真正的问题可能是在一开始就规划了太多需要完成的事情。你完全可以毫不犹豫地消除没有必要、浪费时间的事，而不是试图管理本来就有限的工作时间</p><h3 id="你不需要知道每一件时事"><a href="#你不需要知道每一件时事" class="headerlink" title="你不需要知道每一件时事"></a>你不需要知道每一件时事</h3><p>很多人会对没有跟上实时热点感到焦虑甚至害怕，这也是人们会沉迷于每个小时都去刷推特、reddit、instagram 等等（社交软件）的原因。我肯定也经历过（这种心态）<br>大部分信息对我们来说都没有那么重要，（与其关注时事）应该尝试更多地阅读<strong>读总结类的新闻</strong>，或者是<strong>减少查看时事的频率</strong><br>Jason Fried 的 《It doesn’t have to be crazy at work》<sup><font color='#49E844'>[26]</font></sup> 里面提到了关于这方面的更多思考</p><h3 id="通过学会说不、了解什么时候该停下来、以及规划好自己的时间（包括工作间隙的休息），主动把自己从焦虑中解放出来"><a href="#通过学会说不、了解什么时候该停下来、以及规划好自己的时间（包括工作间隙的休息），主动把自己从焦虑中解放出来" class="headerlink" title="通过学会说不、了解什么时候该停下来、以及规划好自己的时间（包括工作间隙的休息），主动把自己从焦虑中解放出来"></a>通过学会说不、了解什么时候该停下来、以及规划好自己的时间（包括工作间隙的休息），主动把自己从焦虑中解放出来</h3><p>时间管理和把握好工作-生活的平衡，对每个级别的工程师来说都至关重要。长期加班可能会让你倍感压力和失去动力。压力（过大）还会导致其他身心健康并发症。在一天结束之前把问题都解决完，会很诱人，但慢慢地这可能会变成一种（坏）习惯（加班）</p><p>扩展：压力对身体带来的影响<sup><font color='#49E844'>[27]</font></sup><br>（建议在医学生的陪同下阅读）</p><h3 id="鼓励你和你的团队成员进行休息、旅游和调休"><a href="#鼓励你和你的团队成员进行休息、旅游和调休" class="headerlink" title="鼓励你和你的团队成员进行休息、旅游和调休"></a>鼓励你和你的团队成员进行休息、旅游和调休</h3><p>你的健康和家庭都是很重要的。如果你能意识到这点，并作为高级工程师给团队其他成员做好示范，这将会很好地提升职场整体的幸福感。反之，筋疲力尽和倦怠（的工作氛围）会导致职场氛围非常不健康</p><h3 id="随着对问题的了解深入，更新（排期）评估"><a href="#随着对问题的了解深入，更新（排期）评估" class="headerlink" title="随着对问题的了解深入，更新（排期）评估"></a>随着对问题的了解深入，更新（排期）评估</h3><p>在工作中，总是会有客户或利益相关者 这样的角色，会想要了解产品什么时候可以交付，以及所投入的成本（人力、机器等）是否值得。这是非常合理的。有时他们想要对齐DDL，或者确定 为了支持你的工作，需要进行的依赖项（准备）的规划</p><p>众所周知，<strong>软件层面的 DDL 很难准确预测</strong>。只有在项目进入特定时期的时候，才能给出预估性的截止时间。随着时间推移，了解了团队解决问题的能力之后，（leader）应该更新预期。<strong>初次预估通常是最不靠谱的，但它作为起点，可以在之后不断被修正</strong>。<strong>初始预估还会比较保守</strong> — 当产品需求、用户体验或者是依赖关系不清楚的时候，一个更宽松和保守的预估，对项目发展是有帮助的。我还发现，通过和 PM 合作，保证我们都在讨论同一件事情，来制定预估，能经常获得成功</p><p>软件预估的问题在于，初次预估被固定下来之后，是当做计划，而不是初稿。当团队处在关键阶段，将初步预估当成计划（之后），却不注意及时修正，就可能会带来问题（译者：也不必做惊弓之鸟，需求排期大概2-3天左右更新一次即可）。一旦项目获得批准，细节更是需要留意 — 随着对如何实现需求有更加清晰的认识，原本3个月的预估可能就要变成2个月（或4个月）</p><p>你几乎总是尽可能想要让预估驱动你的计划，或者是让计划驱动更新你的预估。在我的团队中，如果我们确实有一些不可推迟的 DDL（如会议），（其他需求）预期超过ddl 可能也是可以的 — 我们可以通过修改提示（如：预览，或在界面提示：该功能将在不久之后实现）、将需求推向更久之后的未来完成等，这些都是可以和领导商量的选项。当然，我必须确认，这些（变化）并不总是这么微小（所以需要谨慎考虑）。当工作计划变得紧张的时候，我们可以把工作拆解成 “必须实现（<strong>must-have</strong>）” 和 “如果有会更好（<strong>nice-to-have</strong>）” 两部分，将后者移到后续的迭代中去，并确认前者是否能赶上 DDL</p><p>（在做了这些调整之后）如果计划还是太赶，你还有其他问题可以确认：比如 “我们是否还可以增加项目人手？” 以及 “是否有一大部分（工作）范围可以削减，之后依然能实现（令用户）满意的交付水准？”</p><p>译者：对 leader 来说，还应该注重的点是<strong>备用方案的制定</strong>。需求在实现过程中不可能所有事都一帆风顺，对中间环节可能遇到的问题，leader 应该要有准备意识，对各种情况都有一套备用方案，保证需求能够按时交付</p><h3 id="有时取消项目是正确的选择（即便是让人感到不舒服）"><a href="#有时取消项目是正确的选择（即便是让人感到不舒服）" class="headerlink" title="有时取消项目是正确的选择（即便是让人感到不舒服）"></a>有时取消项目是正确的选择（即便是让人感到不舒服）</h3><p>我讨厌（取消项目）这件事，但长远来看，对项目和组织来说它确实可能是最健康的选择。特别是在项目获得支持、准备正式上线之前，却因为团队成员要解散，而最终不得不停止之前做这个（取消项目的）决定，（提前取消项目）是尤其正确的。如果大家想知道，建议阅读 《Killed by Google》<sup><font color='#49E844'>[28]</font></sup>，这篇文章旨在尽量减少因为大环境问题，导致需要裁减项目的情况。最近我就停止了一个经营了 好几年的项目，感到很艰难</p><p>什么时候会出现需要停止项目的情况？你可以决定投资一个在当时看起来方向正确的新项目，各种事情看起来都完美契合（市场需求、公司投入、人力投入承诺等），使得整个项目也是完全有价值有意义的。<strong>但一年之后，市场、领导层、项目的重要性等环境因素，可能就变了</strong>。定期检视 项目成立初期的假设，随着项目的发展，是否依然成立 （对保障项目稳定）很关键</p><p>当你越能为你的假设支撑起更多的信心时，你就越有机会让项目成功启动，并继续获得支持。有很多原因 让停止项目很艰难，包括参与项目的同事们，已经投入了真心实意的情感，希望能看到项目成功落地。作为leader，将被解散团队的成员引导到其他已经成功落地的项目 也是一个艰难的选择，因此让他们重新感觉到 内心的安全、信任和幸福 是很重要的。从客户角度来说，（作为leader）也需要留意 用户的信任度，你需要认识到你的长期决策 会如何影响到用户感受</p><h3 id="关于技术债：预防远远-gt-补救"><a href="#关于技术债：预防远远-gt-补救" class="headerlink" title="关于技术债：预防远远 &gt; 补救"></a>关于技术债：预防远远 &gt; 补救</h3><p>Titus Winters<sup><font color='#49E844'>[29]</font></sup> （Google c++ 代码负责人） 将技术债定义为“<strong>系统（效果）和代码之间的差距，在当下的情况 vs 我们预期的情况</strong>”（译者：这里提到的“差距”，其实就是需要“<strong>补救</strong>”的工作，<strong>在项目起步阶段容易被忽略的事情</strong>，比如单元测试、调试工具、故障处理机制等）。这些差距会有具体的体现，并且会比其他债务的影响更深。技术债有的来自早期没有出现的软件异常（疏忽），有的来自事后发现（后见之明），还有的来自技术的变化（环境因素）</p><p>持续优先应对技术债还是很难的，因为你不是总能将还没出现的bug 或者 还没发生的 服务故障 量化，因为你还没“还清足够的技术债”。因此 保持住团队对 修补技术债 这种事情的兴趣，并在评估绩效的时候（适当）奖励这种事项，是很重要的。问题随着时间的积累，“补救”的成本也会越来越大，就像解决污染问题一样，因此对技术债的预防，永远是比在之后再进行补救的成本更低</p><p>那么，我们该怎么避免技术债（过度）积累呢？技术 leader 应该在迭代中，除了新功能的需求之外，也定期安排 整理和“弥补”技术债的工作。检视者需要意识到，（过于）追求短期成效，可能会在之后导致问题。管理者和董事会也应该特别小心 用新项目替换（覆盖）已存在项目。除非权衡利弊之后，觉得替换值得的（比如需要对比：解决当前项目技术债是不值得的 vs 构建新的项目）。另外，监控项目的健康状态，是在这里讨论如何解决技术债的 基础</p><h3 id="如果没有充足的休息，和-work-life-balance（的习惯），你的团队将会产生职业倦怠"><a href="#如果没有充足的休息，和-work-life-balance（的习惯），你的团队将会产生职业倦怠" class="headerlink" title="如果没有充足的休息，和 work-life balance（的习惯），你的团队将会产生职业倦怠"></a>如果没有充足的休息，和 work-life balance（的习惯），你的团队将会产生职业倦怠</h3><p><strong>Burnout</strong><sup>（<strong>职业倦怠</strong><font color='#49E844'>[30]</font></sup>）是一种 由于压力没有被成功管理好，而导致 精力耗尽的状态。我见过很多程序员，在大环境导致的工作压力下，产生职业倦怠。在科技领域，这种情况总是会出现。最近我采访（同事）会按 1:1 的比例问两个问题：“你的压力等级现在怎么样？”、“我可以怎么帮助你？”</p><p>我对职业倦怠的体验是：<strong>这种感觉来得不知不觉，又很难消散</strong>。你会慢慢地感觉能量开始变少，失去动力，甚至还要继续尽力应付工作压力。你开始怀疑自己出现了什么问题，但没有意识到，你的身体已经在过度工作，来弥补能量的不足。你还会继续让自己工作强度越来越大，但最终会发现（身体）已经没有多少可以付出的了</p><p>大概5年前，我经历过这种职业倦怠，不过我感到欣慰的是现在走出来了。是什么让我走出来的呢？有很多因素。（职业生涯）前几年，我把工作放在第一位，工作时间越来越长，并总是说做得还不够。从来没有进行足够的休息的假期。晚上平均只睡5个小时。到家之后，我已经是“低能量”的状态了，没有给家庭足够多的陪伴<br>所谓的“修正”，就是做和这些相反的事：<strong>工作之余多休息、晚上多睡觉、在工作时间内挤出更多价值（即 提升工作效率），更好地委派（工作），并有一个明确的“非工作”时间</strong></p><p>对主管来说，为了避免下属产生职业倦怠，我们应该鼓励团队成员多用上假期时间，获得休息，并定期（沟通）确认下属在有压力情况下，依然能顺利做好他们的工作</p><h3 id="大型组织-公司中流程会比较缓慢"><a href="#大型组织-公司中流程会比较缓慢" class="headerlink" title="大型组织/公司中流程会比较缓慢"></a>大型组织/公司中流程会比较缓慢</h3><p>我和工程师们进行过很多对话，最后（主题）都可以归结为“为什么在大型组织中进行 <strong>X moon-shot</strong>（谷歌内部形容 “创新性的、难以实现的项目” ） 很困难？”Alex Komoroske<sup><font color='#49E844'>[31]</font></sup>（前谷歌产品经理） 对此有一个很好的比喻：<strong>黏菌</strong><sup><font color='#49E844'>[32]</font></sup>（slime mold）。背后的意思是，即使是（在公司中）执行一件很小的工作，可能都会因为 协作阻力，比你理想中进展要慢很多。随着直接参与、或者合作参与项目的人变多，组织的系统、架构和内部动态 变得复杂，这种阻力就会变大</p><p>还有很多因素对这种阻力起着作用，包括对其他同事的工作事项复杂度的低估（比如：这些事情之间有依赖关系的时候），你不能忽略这些因素，因为它们会让系统故障（影响面）扩散开。解决这种阻碍的唯一方式就是尽可能地<strong>解耦</strong><sup><font color='#49E844'>[33]</font></sup>，这样才能让（功能）能按正确的时间节点交付，最终收敛于目标需求</p><p>与其一开始就追踪所有的不确定（X）因素，你可以避免只关注“对月亮射击”（成功风险较大的努力）的问题，而更多地关注“对天花板射击”（完成每一步的风险更小）的问题，能让你更容易地接近目标。如果你遇到的问题和这个章节非常类似，非常建议你阅读 Alex 的 分享《Coordination Headwinds》<sup><font color='#49E844'>[34]</font></sup> （PPT）</p><h3 id="专注于-问题-VS-专注于-项目"><a href="#专注于-问题-VS-专注于-项目" class="headerlink" title="专注于 问题 VS 专注于 项目"></a>专注于 问题 VS 专注于 项目</h3><p>想象你的用户有一个未解决的需求（比如 一个问题），当你是具体负责一个项目的工程师的时候，思考你的项目会如何解决这个问题是很正常的（局部最大值）。在一个拥有几个类似项目的大型组织中，很可能会看到工程师们独自思考“我的项目如何解决这个问题”。如果你是一批项目的管理者，（这种解决问题的思考方式）就不是那么清晰了。如果你的用户表示希望用到你们好几个产品的时候呢？如果每个项目都独立地按几乎相同的思路，去解决问题，不会觉得很奇怪吗？相反，你真正想提的问题可能是 “<strong>什么是解决这个问题 端到端 的方案？</strong>”，并探索需要如何对多个项目进行修改/升级，才能够全面地解决用户需求。这种方式可能需要参与了多个相关项目的开发者，进行更深入的合作。（虽然人力成本会提升，然而）这种方式能最终给你的用户一个更清晰、更全面的解决方案（场景故事）</p><p>译者：作者的出发点主要是在有多个成熟方案的基础上，保留最优解。但在项目还处于探索阶段，需要跟紧开源社区、竞争对手的时候，产品之间出现重叠并不算大问题，甚至公司还会有意保留产品功能类似的团队，促进竞争</p><h2 id="作者总结"><a href="#作者总结" class="headerlink" title="作者总结"></a>作者总结</h2><p>Brian Staufenbiel（Opera Parallèle 的创意总监和设计师） - “多和专家在一起（共事），多和那些在特定领域有专长的同事一起工作”</p><p>（将时间）投资于 那些 能够让你学到东西的同事的关系和友谊上，对他们的指导、领导和成功保持开放态度。<strong>永远不要羞于提出问题或者咨询意见</strong>。在很多情况下，（你离正解）只是一个问题的差距。</p><p>不管在什么阶段，<strong>对技术、商业领域和 人脉资源 技能的掌控（能力）</strong> 都是需要持续培养的。一个企业不可能期待 从别的企业招来的 高级别人才，从第一天就能非常适应公司并高效工作。如果你是一个优秀的工程师，你将会对公司的成长也有所帮助。作为回报，你也会获得一些新的途径，它们将指引你 继续吸收新的技术，不断成长</p><p>最后，感谢 Leena Sohoni, Joshua Cruz, Kara Erickson, Jeff Posnick, Houssein Djirdeh and Sriram Krishnan 对本文积极的帮助和贡献</p><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><p>[1] <a href="https://addyosmani.com/">Addy Osmani</a></p><p>[2] <a href="https://addyosmani.com/blog">作者博客首页</a></p><p>[3] <a href="https://www.glassdoor.com/blog/guide/soft-skills-vs-hard-skills">通用技巧</a></p><p>[4] <a href="https://en.wikipedia.org/wiki/First_principle">第一原则</a></p><p>[5] <a href="https://www.learningscientists.org/blog/2021/3/25-1">批判性思考是通用技能吗？</a></p><p>[6] <a href="https://skorks.com/2010/04/on-the-value-of-fundamentals-in-software-development">The value of fundamentals in Software Engineering</a></p><p>[7] <a href="https://medium.com/@felixthedev/why-learning-the-programming-fundamentals-matters-67e5dbbdee8f">Why learning the fundamentals matters</a></p><p>[8] <a href="https://www.freecodecamp.org/news/learn-the-fundamentals-of-a-good-developer-mindset-in-15-minutes-81321ab8a682">Learn the fundamentals of a good developer mindset</a></p><p>[9] <a href="https://en.wikipedia.org/wiki/Fear_of_missing_out">FOMO</a></p><p>[10] <a href="https://itrevolution.com/articles/why-the-full-stack-engineer-is-problematic">T型工程师</a></p><p>[11] <a href="https://www.csc.gov.sg/articles/how-to-build-good-software">Why Bad Software Happens to Good People</a></p><p>[12] <a href="https://en.m.wikipedia.org/wiki/You_aren%27t_gonna_need_it">YAGNI</a></p><p>[13] <a href="https://ronjeffries.com/xprog/articles/practices/pracsimplest">Do the simplest thing that could possibly work</a></p><p>[14] <a href="https://en.m.wikipedia.org/wiki/Overengineering">不要过度设计</a></p><p>[15] <a href="https://en.m.wikipedia.org/wiki/Abstraction_principle_(computer_programming)">抽象原则</a></p><p>[16] <a href="https://en.m.wikipedia.org/wiki/Don%27t_repeat_yourself#AHA">AHA</a></p><p>[17] <a href="https://medium.com/@nathan.fooo/4-notes-modules-should-be-deep-ba5671c4288c">Deep Module</a></p><p>[18] <a href="https://asbresources.com/pros-and-cons-of-failing-fast-with-agile">快速失败</a></p><p>[19] <a href="https://www.productplan.com/learn/agile-definition-of-done">The Definition of Done</a></p><p>[20] <a href="https://hbr.org/2017/06/help-your-team-stop-overcommitting-by-empowering-them-to-say-no">Help Your Team Stop Overcommitting by Empowering Them to Say No</a></p><p>[21] <a href="https://www.saffo.com/02008/07/26/strong-opinions-weakly-held">Strong opinions weakly held</a></p><p>[22] <a href="https://www.healthline.com/health/mental-health/imposter-syndrome">Imposter syndrome</a></p><p>[23] <a href="https://news.ycombinator.com/item?id=26177680">来源</a></p><p>[24] <a href="https://hbr.org/2016/01/collaborative-overload">collaboration overload</a></p><p>[25] <a href="https://www.amazon.co.jp/-/en/Cal-Newport/dp/1455586692">Deep Work: Rules for Focused Success in a Distracted World</a></p><p>[26] <a href="https://www.amazon.com/Doesnt-Have-Be-Crazy-Work/dp/0062874780">It doesn’t have to be crazy at work</a></p><p>[27] <a href="https://www.apa.org/topics/stress/body">压力对身体带来的影响</a></p><p>[28] <a href="https://killedbygoogle.com/">Killed by Google</a></p><p>[29] <a href="https://www.oreilly.com/pub/au/7953">Titus Winters</a></p><p>[30] <a href="https://zh.m.wikipedia.org/zh-hans/%E8%81%8C%E4%B8%9A%E5%80%A6%E6%80%A0">职业倦怠</a></p><p>[31] <a href="https://www.komoroske.com/">Alex Komoroske</a></p><p>[32] <a href="https://zh.wikipedia.org/wiki/%E9%BB%8F%E8%8F%8C">黏菌</a></p><p>[33] <a href="https://www.infoq.cn/article/8hlh2qewp1y00qumdmqj">解耦</a></p><p>[34] <a href="https://komoroske.com/slime-mold">Coordination Headwinds</a></p>]]></content>
    
    
    <summary type="html">既有感情，又有技巧</summary>
    
    
    
    <category term="职业规划" scheme="http://smiecj.github.io/categories/%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/"/>
    
    
    <category term="翻译" scheme="http://smiecj.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
    <category term="职业规划" scheme="http://smiecj.github.io/tags/%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>通过 sealos 部署 k8s 集群</title>
    <link href="http://smiecj.github.io/2022/09/22/sealos/"/>
    <id>http://smiecj.github.io/2022/09/22/sealos/</id>
    <published>2022-09-21T16:00:00.000Z</published>
    <updated>2022-09-21T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/xiaoliizi/article/details/126998976">本文csdn地址</a></p><h2 id="sealos"><a href="#sealos" class="headerlink" title="sealos"></a>sealos</h2><p><a href="https://docs.sealos.io/zh-Hans/docs/Intro">官方文档</a></p><p><a href="https://github.com/labring/sealos/releases">release</a></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>sealos 是用于一键部署 k8s 集群的<strong>工具</strong>。对于不想被太多操作系统细节配置困扰，又想快速装好一套测试k8s集群的同学，无疑是很方便的</p><p>网上教程很多，这边自己简单写下在公司机器上安装的过程，绕了一部分坑，帮助大家更快地使用</p><p>官方文档还说明 sealos 可用来安装其他分布式组件，mysql、redis、pgsql 等</p><h2 id="下载-sealos"><a href="#下载-sealos" class="headerlink" title="下载 sealos"></a>下载 sealos</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -LO https://github.com/labring/sealos/releases/download/v4.0.0/sealos_4.0.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure><p>解压后的文件列表:</p><p>[root@host_name sealos]# ll<br>总用量 68568<br>-rw-r—– 1 root root Clusterfile<br>-rwxr-xr-x 1  501   20 image-cri-shim<br>-rw-r–r– 1  501   20 LICENSE<br>-rw-r–r– 1  501   20 README.md<br>-rwxr-xr-x 1  501   20 sealctl<br>-rwxr-xr-x 1  501   20 sealos</p><p>sealos: 安装 k8s 工具<br>sealctl: 管理员工具，如生成证书。自己暂时没用到过</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><h3 id="免密登录"><a href="#免密登录" class="headerlink" title="免密登录"></a>免密登录</h3><p>对于没有给 机器登录密码（比如 root 密码） 的环境来说，可以登录节点后配置 ssh key ，用于在<strong>执行 sealos 指令的节点 免密登录 安装节点</strong>（包括 master 和 其他节点）</p><h2 id="安装-k8s"><a href="#安装-k8s" class="headerlink" title="安装 k8s"></a>安装 k8s</h2><p>常用的安装方式有两种: 直接安装 和 导出配置文件后再安装</p><h3 id="直接安装"><a href="#直接安装" class="headerlink" title="直接安装"></a>直接安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sealos run labring/kubernetes:k8s_version labring/calico:calico_version \</span><br><span class="line">     --masters master_ip:ssh_port \</span><br><span class="line">     --nodes node_1_ip:ssh_port,node_2_ip:ssh_port</span><br></pre></td></tr></table></figure><p>自己测试用的版本: k8s: v1.20.0, calico: v3.22.1</p><h3 id="导出配置后安装（推荐）"><a href="#导出配置后安装（推荐）" class="headerlink" title="导出配置后安装（推荐）"></a>导出配置后安装（推荐）</h3><p>导出配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./sealos gen labring/kubernetes:k8s_version labring/calico:calico_version \</span><br><span class="line">     --masters master_ip:ssh_port \</span><br><span class="line">     --nodes node_1_ip:ssh_port,node_2_ip:ssh_port &gt; Clusterfile</span><br></pre></td></tr></table></figure><p>配置google镜像源</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim Clusterfile</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps.sealos.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Cluster</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 设置 google container 阿里代理源，加速下载</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeadm.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterConfiguration</span></span><br><span class="line"><span class="attr">imageRepository:</span> <span class="string">registry.aliyuncs.com/google_containers</span></span><br></pre></td></tr></table></figure><p>运行集群</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./sealos apply -f Clusterfile</span><br></pre></td></tr></table></figure><h3 id="安装后测试"><a href="#安装后测试" class="headerlink" title="安装后测试"></a>安装后测试</h3><p>查看 pod</p><p><img src="/2022/09/22/sealos/sealos03.png" alt="all pods"></p><p>查看镜像</p><p><img src="/2022/09/22/sealos/sealos02.png" alt="all images"></p>]]></content>
    
    
    <summary type="html">sealos 使用初体验</summary>
    
    
    
    <category term="开发工具" scheme="http://smiecj.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Kubernetes" scheme="http://smiecj.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Kubernetes/"/>
    
    
    <category term="Linux" scheme="http://smiecj.github.io/tags/Linux/"/>
    
    <category term="Kubernetes" scheme="http://smiecj.github.io/tags/Kubernetes/"/>
    
  </entry>
  
</feed>
