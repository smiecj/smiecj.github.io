<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Smiecj的小窝</title>
  <icon>https://www.gravatar.com/avatar/8b59dee7e59ad63ca309edd9effc2618</icon>
  <subtitle>tech make life better</subtitle>
  <link href="http://smiecj.github.io/atom.xml" rel="self"/>
  
  <link href="http://smiecj.github.io/"/>
  <updated>2023-11-08T16:00:00.000Z</updated>
  <id>http://smiecj.github.io/</id>
  
  <author>
    <name>smiecj</name>
    <email>xxx@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mongodb数据同步到hive</title>
    <link href="http://smiecj.github.io/2023/10/31/emr-mongo-to-hive/"/>
    <id>http://smiecj.github.io/2023/10/31/emr-mongo-to-hive/</id>
    <published>2023-10-30T16:00:00.000Z</published>
    <updated>2023-11-08T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/xiaoliizi/article/details/134313303">本文csdn地址</a></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>用户需求: 需要将 mongodb 的数据同步到 hive 表，共 2 亿+条数据，总数据量约 30G</p><p>查阅一些博客后，了解到同步方法有以下几种</p><ul><li><p>手动+离线</p><p>对于比较小的数据，可以先通过 <strong>mongoexport</strong> 将数据导出到本地 json 文件，再将 json 直接上传到 hdfs，创建 hive 表关联到这个文件即可</p><p>这种方式非常简单直接，但需要两次 读取到写入 的过程，而且如果 mongodb 中的数据很大，需要先导到本地的方式将会导致本地磁盘占用升高，不是很适合</p><p>参考: <a href="https://www.cnblogs.com/beststrive/p/14187383.html">Mongoexport同步数据到Hive</a></p></li><li><p>工具+离线</p><p>通过 datax / seatunnel 之类的数据同步服务，数据在内存中完成同步</p><p><a href="https://github.com/alibaba/DataX/blob/master/mongodbreader/doc/mongodbreader.md">datax-mongodbreader</a></p><p><a href="https://github.com/alibaba/DataX/blob/master/hdfswriter/doc/hdfswriter.md">datax-hdfswriter</a></p><p><a href="https://seatunnel.apache.org/docs/2.3.3/connector-v2/source/MongoDB">seatunnel-connector-mongo</a></p><p><a href="https://seatunnel.apache.org/docs/2.3.3/connector-v2/sink/Hive/">seatunnel-connector-hive</a></p></li><li><p>实时</p><p>mongodb 在 3.6 版本支持了 change streamer，支持在客户端监听数据变更，实现实时更新</p><p>但这个同步逻辑需要依赖单独的程序去完成，这次用户需求也只要一次性的全量更新，不涉及增量更新，因此这一块就不具体看了</p><p><a href="https://cloud.tencent.com/developer/article/1711794">MongoDB Change Stream之一——上手及初体验原创</a></p></li></ul><h2 id="通过-datax-同步数据"><a href="#通过-datax-同步数据" class="headerlink" title="通过 datax 同步数据"></a>通过 datax 同步数据</h2><h3 id="任务定义"><a href="#任务定义" class="headerlink" title="任务定义"></a>任务定义</h3><p>json 配置文件参考官方文档进行适配即可</p><p>注意: hdfswriter 的 defaultFS 如果指定的是集群地址，比如 hdfs://cluster_name，可能会遇到解析不了的问题，需要把 hdfs 的配置文件打入到 hdfswriter-0.0.1-SNAPSHOT.jar 包中去</p><p><a href="https://github.com/alibaba/DataX/issues/197#issuecomment-436843464">参考issue</a></p><p><a href="https://stackoverflow.com/a/2591548">jar 打包指令参考</a></p><p>datax 任务定义:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;job&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;content&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;reader&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;mongodbreader&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;parameter&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;address&quot;</span>: [</span><br><span class="line">              <span class="string">&quot;host1:27017&quot;</span>,</span><br><span class="line">              <span class="string">&quot;host2:27017&quot;</span>,</span><br><span class="line">              <span class="string">&quot;host3:27017&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;collectionName&quot;</span>: <span class="string">&quot;collection_name&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;column&quot;</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">&quot;index&quot;</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;id&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span></span><br><span class="line">              &#125;,</span><br><span class="line">              ...</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;dbName&quot;</span>: <span class="string">&quot;db&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;userName&quot;</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;userPassword&quot;</span>: <span class="string">&quot;password&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;writer&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;hdfswriter&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;parameter&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;column&quot;</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;id&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span></span><br><span class="line">              &#125;</span><br><span class="line">              ...</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;compress&quot;</span>: <span class="string">&quot;SNAPPY&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;defaultFS&quot;</span>: <span class="string">&quot;hdfs://cluster_name&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;fieldDelimiter&quot;</span>: <span class="string">&quot;\u0001&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;fileName&quot;</span>: <span class="string">&quot;$table&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;fileType&quot;</span>: <span class="string">&quot;orc&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;/user/hive/warehouse/db_name.db/table_name&quot;</span>, <span class="comment">// hdfs 路径需要先创建好</span></span><br><span class="line">            <span class="attr">&quot;writeMode&quot;</span>: <span class="string">&quot;truncate&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;setting&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;speed&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;channel&quot;</span>: <span class="string">&quot;2&quot;</span> <span class="comment">// 任务并行度，可根据实际情况调大</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>启动任务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python bin/datax.py tmp/mongo_to_hive.json</span><br></pre></td></tr></table></figure><p>等待同步完成后，查看 hdfs 对应表路径的数据，可以看到生成的 txt 文件</p><p>然后创建 hive 表关联这个路径即可</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> table_name</span><br><span class="line">(</span><br><span class="line">    id string,</span><br><span class="line">    ...</span><br><span class="line">)</span><br><span class="line">COMMENT <span class="string">&#x27;同步表&#x27;</span></span><br><span class="line"><span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\t&#x27;</span> LINES TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">STORED <span class="keyword">AS</span> ORC <span class="comment">-- 和 datax 任务中的 fileType 对应</span></span><br><span class="line">LOCATION <span class="string">&#x27;/user/hive/warehouse/db_name.db/table_name&#x27;</span>; <span class="comment">-- 和 path 对应</span></span><br></pre></td></tr></table></figure><h2 id="通过-seatunnel-同步数据"><a href="#通过-seatunnel-同步数据" class="headerlink" title="通过 seatunnel 同步数据"></a>通过 seatunnel 同步数据</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>不同于 datax，seatunnel 的安装过程稍微复杂点，而且和 hive 相关的ja包需要手动导入，因此在这里特别说明</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载 seatunnel 后，需要先安装插件（即各个connector）</span></span><br><span class="line">sh bin/install-plugin.sh 2.3.3</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载 hive 2.3.9 版本 （主要是为了拿到 jar 包，也可以从 maven 仓库单独下载下面的每个 jar 包）</span></span><br><span class="line">wget https://downloads.apache.org/hive/hive-2.3.9/apache-hive-2.3.9-bin.tar.gz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压后，把以下 jar 包拷贝到 seatunnel 的 lib 下</span></span><br><span class="line"></span><br><span class="line">seatunnel_home=/opt/modules/seatunnel</span><br><span class="line"></span><br><span class="line">cd /opt/modules/apache-hive-2.3.9-bin/lib</span><br><span class="line"></span><br><span class="line">cp hive-metastore-2.3.9.jar $&#123;seatunnel_home&#125;/lib</span><br><span class="line"></span><br><span class="line">cp hive-common-2.3.9.jar $&#123;seatunnel_home&#125;/lib</span><br><span class="line"></span><br><span class="line">cp hive-exec-2.3.9.jar $&#123;seatunnel_home&#125;/lib</span><br><span class="line"></span><br><span class="line">cp libthrift-0.9.3.jar $&#123;seatunnel_home&#125;/lib</span><br><span class="line"></span><br><span class="line">cp libfb303-0.9.3.jar $&#123;seatunnel_home&#125;/lib</span><br></pre></td></tr></table></figure><h3 id="任务定义-1"><a href="#任务定义-1" class="headerlink" title="任务定义"></a>任务定义</h3><p>配置示例如下:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">env &#123;</span><br><span class="line">  <span class="attr">execution.parallelism</span> = <span class="number">1</span></span><br><span class="line">  <span class="attr">job.mode</span> = <span class="string">&quot;BATCH&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">source &#123;</span><br><span class="line">  MongoDB &#123;</span><br><span class="line">    <span class="attr">uri</span> = <span class="string">&quot;mongodb://user:password@host1,host2,host3&quot;</span></span><br><span class="line">    <span class="attr">database</span> = <span class="string">&quot;db&quot;</span></span><br><span class="line">    <span class="attr">collection</span> = <span class="string">&quot;collection&quot;</span></span><br><span class="line">    <span class="attr">schema</span> = &#123;</span><br><span class="line">      fields &#123;</span><br><span class="line">            <span class="attr">id</span> = string</span><br><span class="line">            <span class="attr">create_time</span> = string</span><br><span class="line">            <span class="attr">update_time</span> = string</span><br><span class="line">            <span class="attr">name</span> = string</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">sink &#123;</span><br><span class="line">  Hive &#123;</span><br><span class="line">    <span class="attr">table_name</span> = <span class="string">&quot;db.table&quot;</span></span><br><span class="line">    <span class="attr">metastore_uri</span> = <span class="string">&quot;thrift://metastore_host:9083&quot;</span></span><br><span class="line">    <span class="attr">hdfs_site_path</span> = <span class="string">&quot;/etc/hadoop/conf/hdfs-site.xml&quot;</span> <span class="comment"># 和 datax 的问题类似，添加 hdfs 配置用于解析 hdfs 集群地址</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3><p>执行任务:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/seatunnel.sh --config mongo_to_hive.conf -e local&quot;</span><br></pre></td></tr></table></figure><p>目前还存在 空值无法转换的问题，报错: <strong>Unable to convert to &lt;STRING&gt; from nullable value null</strong>，需要等待社区解决</p><p>相关 issue: <a href="https://github.com/apache/seatunnel/issues/5340">[Bug] [MongoDB-CDC] 数据中有字段值为 Null 直接异常. #5340</a></p><h3 id="和-datax-的对比"><a href="#和-datax-的对比" class="headerlink" title="和 datax 的对比"></a>和 datax 的对比</h3><ul><li><p>配置: 都是 hive reader 和 mongo writer 的两部分数据源配置方式</p></li><li><p>写入方式: 都是把数据写入到 hdfs 路径，hive 表需要用户自己创建</p><p>seatunnel 的 hive connector 也是先从 hive 中读取 location，拿到 hdfs 的路径，参考: HiveSinkAggregatedCommitter 继承了 FileSinkAggregatedCommitter, HiveSink 继承了 BaseHdfsFileSink</p></li><li><p>运行环境: datax 只能本地运行，seatunnel 支持 local、flink、spark 等运行模式</p></li></ul><!-- 扩展: airbyte 同步方式 -->]]></content>
    
    
    <summary type="html">一次用户数据的处理过程</summary>
    
    
    
    <category term="大数据" scheme="http://smiecj.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="大数据" scheme="http://smiecj.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    <category term="hive" scheme="http://smiecj.github.io/tags/hive/"/>
    
    <category term="mongo" scheme="http://smiecj.github.io/tags/mongo/"/>
    
  </entry>
  
  <entry>
    <title>go 语言介绍</title>
    <link href="http://smiecj.github.io/2023/10/23/golang-origin/"/>
    <id>http://smiecj.github.io/2023/10/23/golang-origin/</id>
    <published>2023-10-22T16:00:00.000Z</published>
    <updated>2023-11-01T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/xiaoliizi/article/details/134160923">本文 csdn</a></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>一直有在零散的时间用go写点代码，正好借着最近比较有时间写东西的契机，给这个看着年轻，实际也已经发展10几年，并在当下众多开发领域都有不可忽视作用的语言做个介绍吧</p><h1 id="golang-的起点"><a href="#golang-的起点" class="headerlink" title="golang 的起点"></a>golang 的起点</h1><p>golang 的诞生可以说是时代造就了它，它也成就了研发工具、云原生和高性能服务开发百花齐放的时代</p><p>本节主要参考文章:</p><p><a href="https://go.dev/talks/2012/splash.article">Go at Google: Language Design in the Service of Software Engineering</a><br><a href="https://jaycechant.info/2020/translation-language-design-in-the-service-of-software-engineering">翻译-Google 里的 Go 语言：服务于软件工程的语言设计</a></p><p><a href="https://blog.csdn.net/EDDYCJY/article/details/122551805">煎鱼-为什么要开发 Go 这门新语言？</a></p><h2 id="开发痛点"><a href="#开发痛点" class="headerlink" title="开发痛点"></a>开发痛点</h2><ul><li>当时谷歌使用的语言：C++、Java 和 Python ，已经不适用于计算层面的需求，对于多核处理、大规模计算 和 web应用编程层面，遇到的问题都只能绕过，而不是直接解决</li></ul><p>ced by multicore processors, networked systems, massive computation clusters, and the web programming model </p><ul><li><p>软件规模：千万行代码，数千程序员共同维护（言外之意就是效率太低了，语言和开发者两个层面）</p></li><li><p>编译时间太长，几分钟到几小时都有（特别讲了 C++ #include 在编译上的消耗: <a href="https://go.dev/talks/2012/splash.article#TOC_5.">Dependencies in C and C++</a>）</p></li><li><p>依赖混乱，跨语言构建麻烦</p></li><li><p>难以编写自动化工具</p></li></ul><p>译者注: 结合原文之后的内容来看，最主要的两类问题就是 大规模的 C++ 项目编译时间长，以及多种语言维护成本高的问题</p><h2 id="发明者"><a href="#发明者" class="headerlink" title="发明者"></a>发明者</h2><p><a href="https://en.wikipedia.org/wiki/Robert_Griesemer">Robert Griesemer</a>: 参与过谷歌 V8 引擎的开发，<a href="https://en.wikipedia.org/wiki/Sawzall_(programming_language)">Sawzall 语言</a>（谷歌内部用的日志分级打印库，之后被 go 的日志库替代）、JVM 和 <a href="https://en.wikipedia.org/wiki/Strongtalk">strongtalk</a> 系统（用于类型检查，现在<a href="https://blog.csdn.net/iteye_14991/article/details/81522227">不维护了</a>）</p><p><a href="https://en.wikipedia.org/wiki/Rob_Pike">Rob Pike</a>：Unix 开发者之一，为 Unix 编写过终端，后续编写过 sam、acme 文本编辑器，再之后和 Ken Thompson 一起创造了 UTF-8</p><p><a href="https://en.wikipedia.org/wiki/Ken_Thompson">Ken Thompson</a>: Unix 开发者之一，B语言（C语言的前身）的发明者，后面 <a href="https://en.wikipedia.org/wiki/Dennis_Ritchie">Dennis Ritchie</a> 基于 B 语言又开发了 C语言。1983 年 Ken 和 Dennis 一同获得了<a href="https://zh.wikipedia.org/wiki/%E5%9B%BE%E7%81%B5%E5%A5%96">图灵奖</a></p><p>扩展: <a href="https://polarisxu.studygolang.com/posts/talk/go-celebrity-rsc">Russ Cox</a>，你可以在 golang 的很多 issue 中看到他的身影，他也是go代码<a href="https://github.com/golang/go/graphs/contributors">提交</a>次数最多的</p><p><img src="/2023/10/23/golang-origin/golang-commits.png" alt="golang commits"></p><p>推荐阅读: 图灵奖历届得主、<a href="https://changelog.com/gotime/77">golang talk</a></p><h2 id="吉祥物"><a href="#吉祥物" class="headerlink" title="吉祥物"></a>吉祥物</h2><p>名字: Gopher（囊地鼠）</p><p>由 Rob Pike 的妻子 Renee French 创作，官网甚至还有<a href="https://go.dev/doc/gopher/modelsheet.jpg">细节描述</a>呢</p><p><img src="/2023/10/23/golang-origin/gopher02.jpeg" alt="gopher"></p><p><img src="/2023/10/23/golang-origin/gopher03.jpeg" alt="gopher 特点"></p><h2 id="go-是什么样的语言"><a href="#go-是什么样的语言" class="headerlink" title="go 是什么样的语言"></a>go 是什么样的语言</h2><p>为了解决前面说的问题，go 必须有下面的特点:</p><ul><li>高效率、可扩展、满足生产力需求</li><li>必须有可扩展性，对于代码量多、依赖多、开发者多的大型项目 必须能很好运作</li><li>自带 GC，并在对象内存申请、释放空间上进行优化，保证GC尽量不影响业务运行</li><li>符合C的编程习惯，让程序员能丝滑切换（如: 静态类型对象）</li><li>必须足够现代化，在多核处理、网络、web 应用开发上需要更加方便，也要支持更多新特性，如内置的并发编程方案</li></ul><h2 id="时间和版本"><a href="#时间和版本" class="headerlink" title="时间和版本"></a>时间和版本</h2><p><a href="https://endoflife.date/go">golang 版本来源</a>: 从 1.10 到最新</p><p><img src="/2023/10/23/golang-origin/golang-versions.png" alt="golang versions"></p><h1 id="go-语言特点"><a href="#go-语言特点" class="headerlink" title="go 语言特点"></a>go 语言特点</h1><p>本节中，笔者将结合自己平时开发过程中使用到的 go 比较核心的特性进行基本介绍，这些也是 go 和其他编程语言最不同的地方，包括 基本语法、基本指令、函数、关键字、基本类型、打包方式等</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul><li><strong>通过大括号划分代码块</strong>，保证大项目下依旧结构清晰</li><li><strong>不需要分号</strong>，虽然加了也不会报错</li><li><strong>不需要小括号</strong>，比如在 if a &lt; b 判断语句、for 循环中的判断，都不需要</li><li><strong>未使用的 import / 局部变量将报错</strong>，保证编译不会引入多余的代码，提升编译效率</li></ul><h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><ul><li><strong>go build</strong>: 统一的打包语句</li><li>编译后生成<strong>一个可执行文件</strong></li></ul><h2 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h2><ul><li><strong>pprof</strong>: 自带性能指标库，可通过火焰图、命令行查看堆栈情况、堆大小、各协程调用耗时等</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li>接口不需要显式说明继承，只要实现了接口的方法即算是继承</li><li>接口可以通过 <strong>指针接收器（pointer receiver）</strong> 或 <strong>值接收器（value receiver）</strong>实现，分别适合 setter 和 getter 的实现，大对象的方法也适合用 指针接收器 避免频繁拷贝（参考: <a href="https://go.dev/doc/faq#methods_on_values_or_pointers">什么时候适合用什么接收器？</a>）</li><li>方法可以作为对象传递，可以作为 map 的 value、声明匿名方法、定义闭包（闭包常用于定义配置方法，如 <a href="https://github.com/trpc-group/trpc-go/blob/v1.0.1/trpc.go#L68C53-L68C59">trpc 的 server.Opts</a> 及其具体实现方法）</li><li><strong>不支持重载</strong>，用开发必须增加少量代码的代价换来了 代码可读性和编译性能（一些<a href="https://github.com/golang/go/issues/21659">讨论</a>）</li><li><strong>建议使用组合（composition），而不是继承（inheritance）</strong>（对比: java 类在多次继承后，要找到只在基类实现的方法的源代码，需要跳很多次才能找到，相反，组合的结构就很清晰，只有一层）</li></ul><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><ul><li><strong>没有异常机制</strong>，通过 error + 函数返回值 直接返回报错，在外部及时处理错误（也促使开发者封装好会出现 error 的代码块，减少主函数的层级）</li><li>通过 <strong>panic + recover</strong> 机制捕获协程中发生的严重错误（如空指针）</li></ul><h2 id="基本类型和关键字"><a href="#基本类型和关键字" class="headerlink" title="基本类型和关键字"></a>基本类型和关键字</h2><ul><li><strong>切片（slice）和数组（array）</strong>: 切片包含数组、长度（len）和容量（cap）</li><li><strong>map</strong>: 非协程安全的 map（slice 也是非协程安全的，go 设计上就是让 channel 成为唯一的协程间通信对象）</li><li><strong>defer:</strong> 常用于释放资源、panic 处理</li><li><strong>make</strong>: 申请切片、map 和 channel 的空间</li><li><strong>init 方法</strong>: 被引用的时候，包内的所有 init 方法会自动执行。单个包内的 init 方法执行顺序按 文件名字段序 -&gt; 方法从上到下 的顺序执行，<a href="https://go.dev/ref/spec#Package_initialization">参考</a></li><li><strong>声明对象的方式</strong>: 通过 <strong>var</strong> 指定对象名称和类型，或直接 <strong>a := 1</strong>，编译器自动识别字段类型</li><li><strong>const</strong>: 声明常量</li><li><strong>iota</strong>: 枚举，只能是数值</li><li><strong>空白标识符</strong>: 下划线(_)，可用于忽略返回值，迭代 slice 或者 map 时忽略 下标/key，以及 init import（只执行包的 init 方法，不需要显式调用包的资源，如: import _ “net/http/pprof”）</li><li><strong>select case</strong>: 多个 Channel 同时读取方式</li><li><strong>总共只有[25个关键字]</strong>(<a href="https://articles.wesionary.team/know-about-25-keywords-in-go-eca109855d4d)%EF%BC%8C%E7%9B%B8%E6%AF%94">https://articles.wesionary.team/know-about-25-keywords-in-go-eca109855d4d)，相比</a>: C99 有 37 个，C++11 有 84 个</li></ul><h2 id="原生库和方法"><a href="#原生库和方法" class="headerlink" title="原生库和方法"></a>原生库和方法</h2><ul><li><strong>time</strong>: 时间，方法有 time.Parse, time.Now, time.DateTime（常量 2006-01-02 15:04:05）等</li><li><strong>io.ReadAll</strong>: 数据流</li><li><strong>bytes.Buffer</strong>: 字符串缓冲</li><li><strong>strings、maps、slices</strong>: 集合类型的工具方法，如 strings.ReplaceAll、maps.Clone、slices.Sort 等</li><li><strong>regexp</strong>: 正则</li><li><strong>net/http</strong>: http 核心库</li><li><strong>sort</strong>: 1.19 之前的数组排序库</li><li><strong>log/slog</strong>: 1.21 新增的日志库，支持等级和格式化打印</li><li><strong>sync</strong>: 协程之间同步、状态共享的相关组件库。<strong>Mutex</strong>: 锁；<strong>Once</strong>: 只执行一次；<strong>WaitGroup</strong>: 等待n个协程执行；<strong>Pool</strong>: 协程间复用对象；<strong>Cond</strong>: 等待和唤醒</li></ul><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><ul><li><strong>reflect.TypeOf</strong>: 获取对象的具体<strong>类型</strong></li><li><strong>reflect.Kind</strong>: 获取对象的<strong>类别</strong>（和类型的区别: 具体值或指针的类别为 interface / pointer，类型可以拿到具体的 struct或接口类型）</li><li><strong>reflect.ValueOf</strong>: 获取对象的具体值</li><li><strong>struct tag</strong>: 标注 struct 内属性的附加信息，一般用于 json序列化、yaml 内容解析、orm 字段映射等场景</li></ul><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><ul><li><strong>协程（Routine）</strong>: 用户层的“线程”，通过 go func() 开启并发</li><li><strong>管道（Channel）</strong>: 协程间的通信方式</li><li><strong>上下文（Context）</strong>: 协程间传递数据、父协程控制子协程状态的媒介</li></ul><h2 id="运行时（Runtime）"><a href="#运行时（Runtime）" class="headerlink" title="运行时（Runtime）"></a>运行时（Runtime）</h2><ul><li><strong>GPM</strong>: Go 进程的核心，协程（Goroutine）、处理器（Processor）、系统线程（Machine）</li><li><strong>GC</strong>: 三色标记法、混合写屏障等</li></ul><h2 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h2><ul><li><strong>从 git 路径引用依赖</strong>，没有“官方仓库”的说法，去中心化的设计</li><li>以 git tag 或者 commit id 作为版本标识</li><li>对象和方法是否对外可见，通过首字母大小写来标识，大写为开放，简单明了</li></ul><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li><strong>gofmt、goformat、staticcheck</strong>: 代码格式化</li><li><strong>test、bench、fuzz</strong>: 普通测试、并发测试、混沌测试</li><li><strong>doc</strong>: 文档，go 的文档可在源码中通过注释编写，并自动生成</li></ul><p>以上就是自己常接触的原生库了，可以从 <a href="https://github.com/golang/go/tree/master/src">go源码的src目录</a> 更多的实现细节</p><!--## Sync- Mutex- Once- WaitGroup- Pool- Cond## package & import- from git tag / latest- import git path（ repo decentralized, can be same name ）- name case indicate visiable- not allow circle import## tools- gofmt / goformat / staticcheck- test / bench / fuzz- doc- gopls--><h1 id="自己写的和go有关的博客"><a href="#自己写的和go有关的博客" class="headerlink" title="自己写的和go有关的博客"></a>自己写的和go有关的博客</h1><p><a href="https://blog.csdn.net/xiaoliizi/article/details/133747191">golang 编程规范查漏补缺</a></p><p><a href="https://blog.csdn.net/xiaoliizi/article/details/107568024">golang-使用 go test 输出单元测试覆盖率</a></p><p><a href="https://blog.csdn.net/xiaoliizi/article/details/111768852">golang-单元测试和mock框架的介绍和推荐</a></p><p><a href="https://blog.csdn.net/xiaoliizi/article/details/111461690">golang-使用 godoc 工具编写代码注释</a></p><p><a href="https://blog.csdn.net/xiaoliizi/article/details/113177952">golang-文章翻译-go高效编程</a></p><p><a href="https://blog.csdn.net/xiaoliizi/article/details/118873747">golang-文章翻译-go常见的10种错误</a></p><p><a href="https://mp.weixin.qq.com/s/H6QUS0CtW_qUBSdXTK8E_w">vscode 使用技巧（vscode+go插件的开发环境）</a></p><h1 id="go-学习方法总结"><a href="#go-学习方法总结" class="headerlink" title="go 学习方法总结"></a>go 学习方法总结</h1><h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><p>Go 的官网其实是最好的学习资料，教程、博客、社区动态都有，绝对适合作为入门资料的第一位</p><p>下面说明官网中右上角各个栏目的内容</p><p><img src="/2023/10/23/golang-origin/go.dev.png" alt="go官网"></p><h3 id="为什么使用-Go（Why-Go）"><a href="#为什么使用-Go（Why-Go）" class="headerlink" title="为什么使用 Go（Why Go）"></a>为什么使用 Go（Why Go）</h3><p>大体就是 Go 在一些通用领域的使用场景，以及在大厂的使用情况</p><p>Case Studies: 大厂的使用场景，如 Google、CloudFare、Meta、Netflix 等</p><p>Use Cases: 在云服务、网络通信、命令行工具、网页/客户端应用 和 运维和可持续开发（DevOps、SRE）领域的应用<br>每一个领域下都有比较流行的开源项目的推荐</p><p>Security: 如何提升自己工程的安全性，如通过 <a href="https://go.dev/doc/tutorial/govulncheck">govulncheck</a> 检查项目存在哪些已知漏洞</p><h3 id="Learn"><a href="#Learn" class="headerlink" title="Learn"></a>Learn</h3><p>非常适合上手的 <a href="https://go.dev/tour">go tour</a>，几乎覆盖了 go，可以说练习完所有示例就会写 go 代码了</p><h3 id="Docs"><a href="#Docs" class="headerlink" title="Docs"></a>Docs</h3><p><a href="https://go.dev/doc">所有官方文章</a>: 可以挑讲原理的文章看，如 Using and understanding Go 中的 <a href="https://go.dev/doc/gc-guide">A Guide to the Go Garbage Collector</a> 以及 References 中的 <a href="https://go.dev/ref/mem">The Go Memory Model</a></p><p><a href="https://go.dev/doc/effective_go">Effective Go</a>: 上手之后，进一步了解 go 编程风格的必读文章</p><p><a href="https://pkg.go.dev/std">std</a>: 标准库文档</p><p><a href="https://go.dev/doc/faq">faq</a>: 囊括了从其他语言迁到 go 语言的常见问题，也体现了 go 的设计思想</p><h3 id="社区"><a href="#社区" class="headerlink" title="社区"></a>社区</h3><p><a href="https://go.dev/blog">blog</a>: go 博客，社区新动态</p><h2 id="开源项目和代码推荐"><a href="#开源项目和代码推荐" class="headerlink" title="开源项目和代码推荐"></a>开源项目和代码推荐</h2><h3 id="go"><a href="#go" class="headerlink" title="go"></a>go</h3><p>go 本身的源码就很好阅读，也和 go 本身语法比较简洁有关。如果你想了解 go 的基础库的原理，大可不用搜一堆博客，一点点地消化别人的总结，读go源码就是最好的学习go原理的方法<br>包括: sync, runtime, context, reflect，这些都是 go 的核心库</p><h3 id="web-应用"><a href="#web-应用" class="headerlink" title="web 应用"></a>web 应用</h3><p>开发后台必须要掌握的就是 web 框架，当然不同公司对它的定制化也会不同，如果想从简单的入手，使用官方推荐的 gin 就行。想参考大厂实际用的，可参考国内开发者开源的 web 框架（功能比较全），如字节的 hertz、go-zero、goframe 等</p><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p>gorm: 数据库 orm 库<br>redis: redigo<br>kafka: sarama</p><h3 id="云原生和监控"><a href="#云原生和监控" class="headerlink" title="云原生和监控"></a>云原生和监控</h3><p>如 Kubernetes、Istio、Prometheus、Grafana 等，也能接触到当下比较流行的项目</p><h3 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h3><p>以往我们需要用工具进行文档格式转换、爬虫、文件批量下载等场景，可能会主要以 python 项目作参考，因为它语法简单，执行方便，你需要的只是一个 python 环境</p><p>现在，拥有类似特性的 go 让我们多了一个选项，同样的需求，也可以看 go 社区有没有现成的方案。甚至 go 只需要编译好的可执行文件，更加方便</p><p>具体用哪个工具因需求而异，可以参考<a href="https://github.com/shockerli/go-awesome">别人的整理</a>，这里列几个可能比较常用的:</p><p><a href="https://github.com/gohugoio/hugo">hugo</a>: 博客网站生成，类似 hexo</p><p><a href="https://github.com/gobuffalo/buffalo">buffalo</a>: 快速生成 web 项目</p><p><a href="https://github.com/charmbracelet/vhs">vhs</a>: 终端录制</p><p><a href="https://github.com/Code-Hex/pget">pget</a>: 并发下载</p><p><a href="https://github.com/fsnotify/fsnotify">fsnotify</a>: 系统文件监听</p><p><a href="https://github.com/iawia002/lux">lux</a>: 网站视频下载工具（不能下载需要登录才能下的超高画质）</p><p><a href="https://github.com/golang-migrate/migrate">migrate</a>: 跨不同类型数据库迁移</p><h2 id="博客推荐"><a href="#博客推荐" class="headerlink" title="博客推荐"></a>博客推荐</h2><p>golang 在国内大厂实践还是比较多的，因此国内开发者写的博客也不会缺少。本着技术的学习方法来说，这里推荐两个博主 分别对应前沿动态，和深度剖析原理</p><p><a href="https://blog.csdn.net/EDDYCJY?type=blog">煎鱼</a>: go 语言开发者，对 go 社区动态、新版本特性的跟踪比较及时，类似的博主还有 <a href="https://polarisxu.studygolang.com/">polarisxu</a></p><p><a href="https://draveness.me/golang">go语言设计与实现</a>: go 原理和设计思想，这个博客对技术的思考方式值得应用到所有技术的学习上: 从为什么这么设计的问题基础上，去理解技术实现细节</p>]]></content>
    
    
    <summary type="html">关于 go 的起源，特点以及学习建议</summary>
    
    
    
    <category term="编程语言" scheme="http://smiecj.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="golang" scheme="http://smiecj.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/golang/"/>
    
    
    <category term="golang" scheme="http://smiecj.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>鹿横行注意！</title>
    <link href="http://smiecj.github.io/2023/09/18/japan-travel-note-nara/"/>
    <id>http://smiecj.github.io/2023/09/18/japan-travel-note-nara/</id>
    <published>2023-09-17T16:00:00.000Z</published>
    <updated>2023-09-22T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/yv01ZUx2JthX30od-AtdLw">本文公众号地址</a></p><p>真的被鹿包围了</p><p><img src="/2023/09/18/japan-travel-note-nara/nara-05.JPG" alt="鹿饼"></p><p><img src="/2023/09/18/japan-travel-note-nara/nara-04.JPG" alt="鹿"></p><p><img src="/2023/09/18/japan-travel-note-nara/nara-01.JPG" alt="鹿"></p><p><img src="/2023/09/18/japan-travel-note-nara/nara-02.JPG" alt="东大寺"></p><p>网上看到一种说法，鹿吃鹿饼，其实是为了讨人类欢心</p><p>还真的从小鹿的身上验证了。别的鹿都像猎物一般地扫视周围有鹿饼的人，但小鹿对此毫无兴趣，递到它们嘴边的鹿饼都不吃，似乎只有青青草地才是它们的钟爱</p><p><img src="/2023/09/18/japan-travel-note-nara/nara-03.JPG" alt="人与自然的和谐共处"></p><p>最后在回程路上，还看到了如此和谐的一幕：共同生活，但又有各自的世界，或许这才是人与自然真正的和谐共处方式</p>]]></content>
    
    
    <summary type="html">日本旅游日记系列</summary>
    
    
    
    <category term="旅游" scheme="http://smiecj.github.io/categories/%E6%97%85%E6%B8%B8/"/>
    
    <category term="日本" scheme="http://smiecj.github.io/categories/%E6%97%85%E6%B8%B8/%E6%97%A5%E6%9C%AC/"/>
    
    
    <category term="旅游" scheme="http://smiecj.github.io/tags/%E6%97%85%E6%B8%B8/"/>
    
    <category term="日本" scheme="http://smiecj.github.io/tags/%E6%97%A5%E6%9C%AC/"/>
    
    <category term="日记" scheme="http://smiecj.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>大阪之烟火气</title>
    <link href="http://smiecj.github.io/2023/09/18/japan-travel-note-oosaka/"/>
    <id>http://smiecj.github.io/2023/09/18/japan-travel-note-oosaka/</id>
    <published>2023-09-17T16:00:00.000Z</published>
    <updated>2023-09-22T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/M8P4swRyiDYdU2Fb8M6c3g">本文公众号地址</a></p><p>要说东京和大阪有什么区别，从旅游者的角度来说还真体验不太出来，都是一线城市，都有很繁华的地方和朴素的居民区，工作和生活每天都交织在一起</p><p>但大阪的生活，是那种真正和工作区分开的生活，称得上慢节奏，东京的生活感和这座城市紧密相关，而说到大阪则必定离不开大阪人</p><h3 id="心斋桥和道顿堀"><a href="#心斋桥和道顿堀" class="headerlink" title="心斋桥和道顿堀"></a>心斋桥和道顿堀</h3><p>从心斋桥开始，走过长长的一段街道，两边是各种店铺，有点像在京都那时逛的商业街，不过显然免税店和化妆品店更多点</p><p><img src="/2023/09/18/japan-travel-note-oosaka/oosaka-02.JPG" alt="心斋桥"></p><p>到了格力高，很想拍一张不带人的照片，但实在是没办法 😂 看来台风刚过也不能阻挡大家来打卡的热情</p><p><img src="/2023/09/18/japan-travel-note-oosaka/oosaka-01.JPG" alt="格力高"></p><p>在这里的一家小店点了点秋葵烤肉和薯条，都挺下酒的。不过最最下酒的还得是咸乌贼（日语：塩辛　しおから）这道菜。光看中文菜名根本感受不到它的威力。托它的福，让我把这一大杯酒喝完毫不费劲（其实吃完还是有点撑了）</p><p><img src="/2023/09/18/japan-travel-note-oosaka/oosaka-03.JPG" alt="生啤喝得还是舒服"></p><p><img src="/2023/09/18/japan-travel-note-oosaka/oosaka-04.JPG" alt="左上角最佳下酒菜"></p><h3 id="大阪城"><a href="#大阪城" class="headerlink" title="大阪城"></a>大阪城</h3><p>天守阁象征了关西曾经是日本的中心，不过毕竟是翻修过的，历史感差点味</p><p>反倒是路边摊小哥的热情让我印象深刻，每想起 3 位小哥在我说买一杯刨冰之后，笑着说“一杯吗？真的只要一杯吗？No no no，three！”都忍不住放松地笑，大阪人的热情真的是名副其实</p><p><img src="/2023/09/18/japan-travel-note-oosaka/oosaka-05.JPG" alt="大阪城"></p><p><img src="/2023/09/18/japan-travel-note-oosaka/oosaka-06.JPG" alt="天守阁远眺"></p><h3 id="大阪烧"><a href="#大阪烧" class="headerlink" title="大阪烧"></a>大阪烧</h3><p>说到热情，大阪烧同样有它的热情直爽，烤得干脆的面饼，软糯的年糕，虾肉和牛杂的共同点缀，成就了这样一道本地特色菜</p><p>不过我也注意到旁边的那对情侣，比我们进来得晚一点，但是点的菜和我们完全不同，一直在点小菜，有烤章鱼，烤玉米，炒面什么的。两人也一直有说有笑，边烤边吃，似乎正享受着他们专属的下班时光</p><p><img src="/2023/09/18/japan-travel-note-oosaka/oosaka-07.JPG" alt="米酒越喝越有"></p><p><img src="/2023/09/18/japan-travel-note-oosaka/oosaka-08.JPG" alt="大阪烧"></p>]]></content>
    
    
    <summary type="html">日本旅游日记系列</summary>
    
    
    
    <category term="旅游" scheme="http://smiecj.github.io/categories/%E6%97%85%E6%B8%B8/"/>
    
    <category term="日本" scheme="http://smiecj.github.io/categories/%E6%97%85%E6%B8%B8/%E6%97%A5%E6%9C%AC/"/>
    
    
    <category term="旅游" scheme="http://smiecj.github.io/tags/%E6%97%85%E6%B8%B8/"/>
    
    <category term="日本" scheme="http://smiecj.github.io/tags/%E6%97%A5%E6%9C%AC/"/>
    
    <category term="日记" scheme="http://smiecj.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>暮色与京都</title>
    <link href="http://smiecj.github.io/2023/09/18/japan-travel-note-kyoto/"/>
    <id>http://smiecj.github.io/2023/09/18/japan-travel-note-kyoto/</id>
    <published>2023-09-17T16:00:00.000Z</published>
    <updated>2023-09-22T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/6IF1jnZjwDrqeqZX08XakQ">本文公众号地址</a></p><h2 id="伏见稻荷神社"><a href="#伏见稻荷神社" class="headerlink" title="伏见稻荷神社"></a>伏见稻荷神社</h2><p>傍晚和伏见稻荷神社真的是绝配</p><p>和东京的神社，那种与都市融为一体的神社不同，伏见稻荷神社尽管也在京都城区，但给人的感觉却是真正的远离了城市的喧嚣</p><p><img src="/2023/09/18/japan-travel-note-kyoto/kyoto-01.JPG" alt="伏见稻荷神社"></p><p><img src="/2023/09/18/japan-travel-note-kyoto/kyoto-02.JPG" alt="伏见稻荷神社"></p><h2 id="天津饭"><a href="#天津饭" class="headerlink" title="天津饭"></a>天津饭</h2><p>和天津没有什么关系的天津饭，口味也真的很难适应，日料到底还能有多咸，恐怕我也是想象不到了</p><p><img src="/2023/09/18/japan-travel-note-kyoto/kyoto-03.JPG" alt="伏见稻荷神社"></p><h2 id="玉子市场"><a href="#玉子市场" class="headerlink" title="玉子市场"></a>玉子市场</h2><p>来到了玉子和饼藏的名场面之地，虽然没有感受到夕阳西下的氛围，但是跳大乌龟的经历也足够让我记住飛び石这个地名了</p><p>奋力跃过飛び石，再往前走一点就是民风淳朴的“玉子市场”（出町桝形商店街），上午的商业街还略显安静，走走停停，又感觉或许安静平和才是真正专属这条商业街的氛围。动漫里商业街的熙熙攘攘也存在，只是藏在各个角落中，需要慢慢去找寻</p><p><img src="/2023/09/18/japan-travel-note-kyoto/kyoto-04.JPG" alt="飛び石"></p><p><img src="/2023/09/18/japan-travel-note-kyoto/kyoto-05.JPG" alt="飛び石"></p><p><img src="/2023/09/18/japan-travel-note-kyoto/kyoto-06.JPG" alt="似乎每天都会充满活力的商业街"></p><p><img src="/2023/09/18/japan-travel-note-kyoto/kyoto-07.JPG" alt="佑子！"></p><p><img src="/2023/09/18/japan-travel-note-kyoto/kyoto-08.JPG" alt="佑子的那个段子属实没看懂"></p><!-- https://m.youtube.com/watch?v=u8GjG51XzJ8 --><p><img src="/2023/09/18/japan-travel-note-kyoto/kyoto-09.JPG" alt="有点不好找的迪拉"></p><h2 id="二年坂三年坂"><a href="#二年坂三年坂" class="headerlink" title="二年坂三年坂"></a>二年坂三年坂</h2><p>熙熙攘攘的小长街，逛不完的小吃，需要耐心去发现惊喜的伴手礼店</p><p>去清水寺的必经之路，值得回味每一个转角，值得期待每次回头的那瞬间，看着坡下熙熙攘攘的人群和两边的商店融为一体，仿佛在东京之外，找到了人和自然的另一种共存方式</p><p><img src="/2023/09/18/japan-travel-note-kyoto/kyoto-11.JPG" alt="二年坂"></p><p><img src="/2023/09/18/japan-travel-note-kyoto/kyoto-14.JPG" alt="边走边在纪念品店乘凉，生肖不倒翁挺可爱的"></p><p>![快到清水寺，俯瞰上来的路](kyoto-13 .JPG)</p><h2 id="清水寺"><a href="#清水寺" class="headerlink" title="清水寺"></a>清水寺</h2><p>到清水寺刚好是正午，充分感受了一波猛烈的夏日，实在是没有再上清水舞台的欲望了，还是就给远处的京都之景打个卡吧</p><p><img src="/2023/09/18/japan-travel-note-kyoto/kyoto-13.JPG" alt="远眺京都"></p>]]></content>
    
    
    <summary type="html">日本旅游日记系列</summary>
    
    
    
    <category term="旅游" scheme="http://smiecj.github.io/categories/%E6%97%85%E6%B8%B8/"/>
    
    <category term="日本" scheme="http://smiecj.github.io/categories/%E6%97%85%E6%B8%B8/%E6%97%A5%E6%9C%AC/"/>
    
    
    <category term="旅游" scheme="http://smiecj.github.io/tags/%E6%97%85%E6%B8%B8/"/>
    
    <category term="日本" scheme="http://smiecj.github.io/tags/%E6%97%A5%E6%9C%AC/"/>
    
    <category term="日记" scheme="http://smiecj.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>golang 编程规范查漏补缺</title>
    <link href="http://smiecj.github.io/2023/09/11/golang-standard-company/"/>
    <id>http://smiecj.github.io/2023/09/11/golang-standard-company/</id>
    <published>2023-09-10T16:00:00.000Z</published>
    <updated>2023-10-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/xiaoliizi/article/details/133747191">本文csdn</a></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>公司最近出了 golang 语言规范，大部分参考 uber 的 go 语言规范（<a href="https://github.com/uber-go/guide/blob/master/style.md" title="原版">原版</a>和<a href="https://github.com/xxjwxc/uber_go_guide_cn" title="翻译">翻译</a>），以及官方的 <a href="https://go.dev/doc/effective_go" title="Effective Go">Effective Go</a>。这里分享一下自己之前没注意的点，查漏补缺</p><p>主要内容包括：go 语言特性中 defer、Mutex、interface 和 channel 的使用注意点，高性能场景中 string 和 byte 数组的相互转换，以及协程池的使用</p><h1 id="方法和函数"><a href="#方法和函数" class="headerlink" title="方法和函数"></a>方法和函数</h1><h2 id="defer-和返回值"><a href="#defer-和返回值" class="headerlink" title="defer 和返回值"></a>defer 和返回值</h2><p>对应知识点为方法返回值是有名还是无名的时候，defer 的顺序的差异</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deferWithAnonymous</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">ret := <span class="number">1</span></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">ret++</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deferWithNamed</span><span class="params">()</span> <span class="params">(ret <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">ret = <span class="number">1</span></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">ret++</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="built_in">println</span>(deferWithAnonymous()) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">println</span>(deferWithNamed()) <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>defer 和返回值之间的关系: <strong>设置函数返回值 -&gt; 执行 defer -&gt; 最终返回给调用方</strong></p><p>关键在第一步，匿名返回值函数中，设置的返回值就是具体的值，而在有名返回值函数，设置的是返回值的引用（即 ret 的引用）</p><p>所以有名返回值函数的 defer 会影响最后的返回值</p><p>对 defer 的编译后字节码解析可以参考<a href="https://dengchengchao.com/?p=1479" title="这篇文章">这篇文章</a></p><h2 id="sync-Mutex-作为传参的时候，需要传指针，否则可能导致死锁"><a href="#sync-Mutex-作为传参的时候，需要传指针，否则可能导致死锁" class="headerlink" title="sync.Mutex 作为传参的时候，需要传指针，否则可能导致死锁"></a>sync.Mutex 作为传参的时候，需要传指针，否则可能导致死锁</h2><p>Mutex 的加锁和释放锁逻辑是通过内部的s<strong>tate和sema两个整数对象</strong>控制的，直接拷贝 Mutex 只是复制了锁的状态，但和原来的锁并不是同一个，所以释放复制后的 Mutex 并不能解锁原来的 Mutex</p><p>一个复现这个问题的示例，是通过 pointer receiver 占锁，通过 value receiver 释放锁，由于 value receiver 会拷贝调用者对象，所以释放的锁对象和外面的不同，导致死锁</p><p><a href="https://medium.com/golangspec/detect-locks-passed-by-value-in-go-efb4ac9a3f2b" title="参考-Detect locks passed by value in Go">参考-Detect locks passed by value in Go</a></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;sync&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">    lock sync.Mutex</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *T)</span> <span class="title">Lock</span><span class="params">()</span></span> &#123;</span><br><span class="line">    t.lock.Lock()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t T)</span> <span class="title">Unlock</span><span class="params">()</span></span> &#123;</span><br><span class="line">   t.lock.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    t := T&#123;lock: sync.Mutex&#123;&#125;&#125;</span><br><span class="line">    t.Lock()</span><br><span class="line">    t.Unlock()</span><br><span class="line">    t.Lock() <span class="comment">// 死锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h1><h2 id="interface-的判空"><a href="#interface-的判空" class="headerlink" title="interface 的判空"></a>interface 的判空</h2><p>interface 表示 golang 的接口类型，它和其他语言的“基类”（如 Java 的 interface）相比，在空对象的判空和调用方法的表现上不太一样</p><p>示例代码: 思考以下代码会输出什么</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyError <span class="keyword">struct</span> &#123;</span><br><span class="line">msg <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(err *MyError)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> err.msg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">workWithBalance</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">workTooHard</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getError</span><span class="params">(f <span class="keyword">func</span>()</span> <span class="title">bool</span>) <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> err *MyError</span><br><span class="line"><span class="keyword">if</span> !f() &#123;</span><br><span class="line">err = &amp;MyError&#123;</span><br><span class="line">msg: <span class="string">&quot;need relax&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := getError(workTooHard); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;work too hard caused &quot;</span> + err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> getError(workWithBalance) == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;work with balance&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码对自定义错误 MyError 进行了判空，预期 getError(workWithBalance) 获取到的 error 为空，但结果却不为空（work with balance 不会打印）</p><p>那么为什么声明未赋值的 err 判空得到的是 false 呢？我们可以从 interface 的内部结构 iface、eface 可以了解到端倪</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// runtime/runtime2.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> eface <span class="keyword">struct</span> &#123;</span><br><span class="line">    _type *_type</span><br><span class="line">    data  unsafe.Pointer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> iface <span class="keyword">struct</span> &#123;</span><br><span class="line">    tab  *itab</span><br><span class="line">    data unsafe.Pointer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，iface 包含了<strong>接口的类型、方法和数据</strong>，iface 的 tab 描述了接口的类型和方法，data 则指向实际的接口数据</p><p>itab 的结构如下:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> itab <span class="keyword">struct</span> &#123;</span><br><span class="line">inter *interfacetype <span class="comment">// abi.InterfaceType（abi: application binary interface 二进制接口），包含接口类型，pkg path（import 的路径）和接口方法（Imethod）</span></span><br><span class="line">_type *_type <span class="comment">// abi.Type，实体类型</span></span><br><span class="line">hash  <span class="keyword">uint32</span> <span class="comment">// _type.hash 拷贝而来</span></span><br><span class="line">_     [<span class="number">4</span>]<span class="keyword">byte</span> <span class="comment">// 占位，留给以后可能用到的对象</span></span><br><span class="line">fun   [<span class="number">1</span>]<span class="keyword">uintptr</span> <span class="comment">// 接口方法对应的地址，多个方法则在这个数组后面继续添加，fun[0] == 0 表示未实现接口的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 eface 的数据结构就简单很多了，只包含<strong>具体类型 _type 和数据指针 data</strong>，不包含方法信息</p><p>不包含方法的 eface 对应 var i interface{} 这种对象声明，主要用于<strong>传参、序列化和泛型</strong>场景</p><p>那么 go 是如何判断一个 interface 类型对象是否为空呢？需要两个条件：<strong>data 对应的值为空，且 _type 具体类型也为空</strong></p><p>通过 getError(workWithBalance) 获取的 error，虽然没有被初始化，但它有具体实现类型（MyError）而不是原始接口类型（error），所以 err == nil 为 false</p><p>想要判断 interface 背后的对象的值确实为空，有两种办法：先强转成具体的类型指针再判断，或者是通过反射方法 reflact.ValueOf 获取到内部的值来判断</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">e := getError(workWithBalance)</span><br><span class="line">v := reflect.ValueOf(e)</span><br><span class="line"><span class="keyword">if</span> e.(*MyError) == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;err is nil&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注意: IsNil 对一些无法判断空值的类型，或者未初始化的 interface 会直接 panic，所以需要先判断 value 的 kind</span></span><br><span class="line"><span class="keyword">if</span> v.Kind() == reflect.Pointer &#123;</span><br><span class="line"><span class="keyword">if</span> v.IsNil() &#123;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;err is nil&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扩展: 空接口对象，是否可以调用接口方法呢？</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyError <span class="keyword">struct</span> &#123;</span><br><span class="line">msg <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(err *MyError)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;empty error&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> err.msg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> emptyErr *MyError</span><br><span class="line"><span class="built_in">println</span>(emptyErr.Error()) <span class="comment">// 不会 panic</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结论是可以调用，这一点和其他语言很不同。一个有具体类型的空接口对象调用 pointer receiver 不会报空指针，但注意只是能调用，如果 pointer receiver 内部有获取对象属性的操作，还是会报空指针错误</p><p><a href="https://medium.com/@reetas/nil-receiver-in-golang-9d61ed8fd230" title="参考-nil receiver in GoLang">参考-nil receiver in GoLang</a></p><p><a href="https://stackoverflow.com/questions/42238624/calling-a-method-on-a-nil-struct-pointer-doesnt-panic-why-not" title="参考-Calling a method on a nil struct pointer doesn&#39;t panic. Why not?">参考-Calling a method on a nil struct pointer doesn’t panic. Why not?</a></p><h2 id="nil-channel-的使用场景"><a href="#nil-channel-的使用场景" class="headerlink" title="nil channel 的使用场景"></a>nil channel 的使用场景</h2><p>在公司规范中，说明“禁止对 nil 或已关闭的 channel 进行读写关闭操作”，这算是为数不多需要指正的一点：nil channel 在特定场景也是可以操作的</p><p>先了解一下各种特殊情况下使用 channel 会出现什么情况：</p><p>closed channel: <strong>读不阻塞（会读完剩下的数据，之后返回零值）、写 panic、再次 close panic</strong></p><p>nil channel: <strong>读阻塞、写阻塞、close panic</strong></p><p>对于 nil channel 读写都会阻塞的特性，有一个使用场景是 合并多个 channel 数据的时候，对于已经取完数据的 channel 可以置为空，这样在继续使用 select 的同时也不影响其他还有数据的 channel 的读取，<a href="https://medium.com/justforfunc/why-are-there-nil-channels-in-go-9877cc0b2308" title="参考">参考</a></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(a, b &lt;-<span class="keyword">chan</span> <span class="keyword">int</span>)</span> &lt;-<span class="title">chan</span> <span class="title">int</span></span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(c)</span><br><span class="line"><span class="keyword">for</span> a != <span class="literal">nil</span> || b != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> v, ok := &lt;-a:</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;a is done&quot;</span>)</span><br><span class="line">a = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">c &lt;- v</span><br><span class="line"><span class="keyword">case</span> v, ok := &lt;-b:</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;b is done&quot;</span>)</span><br><span class="line">b = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">c &lt;- v</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="高性能场景"><a href="#高性能场景" class="headerlink" title="高性能场景"></a>高性能场景</h1><h2 id="使用-sync-Pool-获取需要频繁申请的对象"><a href="#使用-sync-Pool-获取需要频繁申请的对象" class="headerlink" title="使用 sync.Pool 获取需要频繁申请的对象"></a>使用 sync.Pool 获取需要频繁申请的对象</h2><p>比较典型的场景是在高并发的数据流读取和写入场景中，通过 pool 缓存 buffer，避免每次都申请新的 buffer 造成频繁内存资源申请</p><p>在框架层代码中会比较容易看到 pool 的使用，如 gin 用来缓存处理请求的 Context 对象，gorm 用来缓存序列化对象（SerializerInterface）等</p><p>性能测试结果:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkByteBufferWithoutPool</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">buf := bytes.Buffer&#123;&#125;</span><br><span class="line">buf.WriteString(longStr)</span><br><span class="line">io.Copy(io.Discard, &amp;buf)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkByteBufferWithPool</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">pool := sync.Pool&#123;</span><br><span class="line">New: <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">any</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">new</span>(bytes.Buffer)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">buf := pool.Get().(*bytes.Buffer)</span><br><span class="line">buf.WriteString(longStr)</span><br><span class="line">io.Copy(io.Discard, buf)</span><br><span class="line">buf.Reset()</span><br><span class="line">pool.Put(buf)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试结果</span></span><br><span class="line"><span class="comment">// BenchmarkByteBufferWithoutPool-8           55544210               211.1 ns/op          1072 B/op          2 allocs/op</span></span><br><span class="line"><span class="comment">// BenchmarkByteBufferWithPool-8           355192696               33.25 ns/op            0 B/op          0 allocs/op</span></span><br></pre></td></tr></table></figure><p>从执行次数和内存开销来看，pool 在多协程下达到的对象复用的效果，都能带来很大的提升</p><p>关于 sync.Pool 值得留意的还有在 1.13 之后的性能提升，可以参考<a href="https://colobu.com/2019/10/08/how-is-sync-Pool-improved-in-Go-1-13" title="这篇文章">这篇文章</a></p><h2 id="bytes-和-string-的-0-内存申请方法"><a href="#bytes-和-string-的-0-内存申请方法" class="headerlink" title="bytes 和 string 的 0 内存申请方法"></a>bytes 和 string 的 0 内存申请方法</h2><p>直接看无内存开销的转换方式:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ByteSliceToString</span><span class="params">(bytes []<span class="keyword">byte</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s <span class="keyword">string</span></span><br><span class="line">sliceHeader := (*reflect.SliceHeader)(unsafe.Pointer(&amp;bytes))</span><br><span class="line">stringHeader := (*reflect.StringHeader)(unsafe.Pointer(&amp;s))</span><br><span class="line">stringHeader.Data = sliceHeader.Data</span><br><span class="line">stringHeader.Len = sliceHeader.Len</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StringToByteSlice</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="params">(bytes []<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line">bh := (*reflect.SliceHeader)(unsafe.Pointer(&amp;bytes))</span><br><span class="line">sh := *(*reflect.StringHeader)(unsafe.Pointer(&amp;s))</span><br><span class="line">bh.Data = sh.Data</span><br><span class="line">bh.Len = sh.Len</span><br><span class="line">bh.Cap = sh.Len</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://gist.github.com/yakuter/c0df0f4253ea639529f3589e99dc940b" title="参考">参考</a></p><p>两者的相互转换都用到了反射包中表示底层结构的对象，如 slice 的 <strong>SliceHeader</strong>，以及 string 的 <strong>StringHeader</strong></p><p>string 和 byte 数组两者的底层数据结构非常相似，只是 slice 多了 cap，所以转换逻辑并不复杂</p><p>string 和 slice 的底层结构如下：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// runtime/string.go</span></span><br><span class="line"><span class="keyword">type</span> stringStruct <span class="keyword">struct</span> &#123;</span><br><span class="line">str unsafe.Pointer</span><br><span class="line"><span class="built_in">len</span> <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// runtime/slice.go</span></span><br><span class="line"><span class="keyword">type</span> slice <span class="keyword">struct</span> &#123;</span><br><span class="line">array unsafe.Pointer</span><br><span class="line"><span class="built_in">len</span>   <span class="keyword">int</span></span><br><span class="line"><span class="built_in">cap</span>   <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// reflect/value.go</span></span><br><span class="line"><span class="keyword">type</span> StringHeader <span class="keyword">struct</span> &#123;</span><br><span class="line">Data <span class="keyword">uintptr</span></span><br><span class="line">Len  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SliceHeader <span class="keyword">struct</span> &#123;</span><br><span class="line">Data <span class="keyword">uintptr</span></span><br><span class="line">Len  <span class="keyword">int</span></span><br><span class="line">Cap  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>go 1.20 之后，StringHeader 和 SliceHeader 被标注为 Deprecated，改为推荐使用 <strong>StringData</strong> 和 <strong>SliceData</strong>，写法上更简单了</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">byteSliceToString</span><span class="params">(bytes []<span class="keyword">byte</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> unsafe.String(unsafe.SliceData(bytes), <span class="built_in">len</span>(bytes))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stringToByteSlice</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="params">(bytes []<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> unsafe.Slice(unsafe.StringData(s), <span class="built_in">len</span>(s))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实测: 直接强转和通过反射转换的benchmark测试结果对比</p><p>bytes 转 string</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BenchmarkForceConvertBytesToString-8    66501550               178.7 ns/op          1024 B/op          1 allocs/op</span><br><span class="line"></span><br><span class="line">BenchmarkConvertBytesToString-8         1000000000               0.3236 ns/op          0 B/op          0 allocs/op</span><br></pre></td></tr></table></figure><p>可以看到，强转的方式执行速度（平均每次 178ns）远小于通过反射方式执行的，并且强转每次需要申请 1kb 内存，刚好和转换的字符串大小对应</p><p>string 转 bytes</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BenchmarkForceConvertStringToBytes-8    67139846               200.6 ns/op          1024 B/op          1 allocs/op</span><br><span class="line"></span><br><span class="line">BenchmarkConvertStringToBytes-8         1000000000               0.3230 ns/op          0 B/op          0 allocs/op</span><br></pre></td></tr></table></figure><p>结果和 bytes 转 string 类似，不再赘述</p><h2 id="高并发的任务（如接口）创建协程池去消费和执行"><a href="#高并发的任务（如接口）创建协程池去消费和执行" class="headerlink" title="高并发的任务（如接口）创建协程池去消费和执行"></a>高并发的任务（如接口）创建协程池去消费和执行</h2><p>协程确实很”轻“，相比操作系统线程默认大小为1M 来说，它的初始大小只有 2k，确实很小（但随着栈空间扩大可能会扩缩容），不过在高并发场景下还是需要对开启协程进行控制的</p><p>协程池的选型有很多，常见的开源项目有 <a href="https://github.com/Jeffail/tunny" title="tunny">tunny</a> 和 <a href="https://github.com/panjf2000/ants" title="ants">ants</a>，两者实现方式略有区别，tunny 提交任务时是同步提交，可以拿到执行后的返回值，ants 是异步提交，不支持获取返回值，要拿到返回值的话得自己实现。示例如下：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/Jeffail/tunny&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/panjf2000/ants/v2&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestTunnyPool</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">wg.Add(<span class="number">100</span>)</span><br><span class="line">pool := tunny.NewFunc(<span class="number">10</span>, <span class="function"><span class="keyword">func</span><span class="params">(payload <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">time.Sleep(<span class="number">3</span> * time.Second)</span><br><span class="line">wg.Done()</span><br><span class="line"><span class="keyword">return</span> payload</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">defer</span> pool.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line"><span class="comment">// tunny.pool.Process 是同步方法，所以需要开启协程才能并发</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">pool.Process(i)</span><br><span class="line">&#125;(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestAntsPool</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">wg.Add(<span class="number">100</span>)</span><br><span class="line">pool, _ := ants.NewPoolWithFunc(<span class="number">10</span>, <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d execute\n&quot;</span>, i)</span><br><span class="line">time.Sleep(<span class="number">3</span> * time.Second)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d finish\n&quot;</span>, i)</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">defer</span> pool.Release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">pool.Invoke(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，对于 web 框架来说，这种控制并发的功能官方都有。如 gin 通过 <a href="https://github.com/easonlin404/limit/blob/master/limit.go" title="limit">limit</a> 插件，本质也是通过 channel 控制并发协程数</p>]]></content>
    
    
    <summary type="html">一些golang规范的详解</summary>
    
    
    
    <category term="编程语言" scheme="http://smiecj.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="golang" scheme="http://smiecj.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/golang/"/>
    
    
    <category term="golang" scheme="http://smiecj.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>hive 创建 s3 外表</title>
    <link href="http://smiecj.github.io/2023/09/11/hive-s3/"/>
    <id>http://smiecj.github.io/2023/09/11/hive-s3/</id>
    <published>2023-09-10T16:00:00.000Z</published>
    <updated>2023-09-17T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/xiaoliizi/article/details/132985118">本文csdn地址</a></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>有个比较大的技术侧需求: 将数据从 HDFS 迁移到 s3。当然在真正迁移之前，还需要验证迁移到 s3 的数据，和上层查询器（hive、presto 之间的兼容性）</p><p>这里我们对一张业务表的数据做个简单的迁移测试</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><h3 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h3><p>为了让 hdfs 指令能直接操作 s3 的数据，参考 <a href="https://docs.cloudera.com/runtime/7.2.7/scaling-namespaces/topics/hdfs-distcp-with-amazon-s3.html">Using DistCp with Amazon S3</a><br>先在 hdfs-site 中添加配置 fs.s3a.access.key 、 fs.s3a.secret.key 、 fs.s3a.endpoint 和 fs.s3a.connection.ssl.enabled 四个配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fs.s3a.access.key=s3_key</span><br><span class="line">fs.s3a.secret.key=s3_secret</span><br><span class="line">fs.s3a.endpoint=s3服务端地址</span><br><span class="line">fs.s3a.connection.ssl.enabled=false（因为公司内部 s3 服务没开 ssl）</span><br></pre></td></tr></table></figure><p>重启 hdfs 使得配置生效后，通过 distcp 将 hdfs 数据搬到 s3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop distcp hdfs://emr/data/db_name/table_name s3a://bucket_name/data/db_name/table_name</span><br></pre></td></tr></table></figure><p>如上，我们尽量保证了迁移后数据的路径和原路径保持一致</p><p>通过 s3cmd 确认数据是否搬过来了:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s3cmd ls s3://bucket_name/data/db_name/table_name/</span><br></pre></td></tr></table></figure><h3 id="查询验证"><a href="#查询验证" class="headerlink" title="查询验证"></a>查询验证</h3><p>新建 hive 外表并指向 s3 路径：<br>（注意：s3 路径一定要正确，否则建表和查询数据都不会报错，但查出的数据为空）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE EXTERNAL TABLE `db_name`.`table_name`(</span><br><span class="line">  `id` bigint COMMENT &#x27;&#x27;,</span><br><span class="line">  ...)</span><br><span class="line">ROW FORMAT SERDE </span><br><span class="line">  &#x27;org.apache.hadoop.hive.serde2.avro.AvroSerDe&#x27; </span><br><span class="line">STORED AS INPUTFORMAT </span><br><span class="line">  &#x27;org.apache.hadoop.hive.ql.io.avro.AvroContainerInputFormat&#x27; </span><br><span class="line">OUTPUTFORMAT </span><br><span class="line">  &#x27;org.apache.hadoop.hive.ql.io.avro.AvroContainerOutputFormat&#x27;</span><br><span class="line">LOCATION</span><br><span class="line">  &#x27;s3a://bucket_name/data/db_name/table_name&#x27;;</span><br></pre></td></tr></table></figure><h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><p>1、ranger 权限配置</p><p>在 ranger 上集成 hive 插件后，从 hive 权限首页能看到将包含 url、库表、hiveservice 和 udf 四项权限配置。需要在 ‘url’ 配置中添加用户权限</p><p>2、presto、trino 配置</p><p>访问 s3 数据需要额外加上以下配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hive.s3.aws-access-key=s3_key</span><br><span class="line">hive.s3.aws-secret-key=s3_secret</span><br><span class="line">hive.s3.endpoint=s3服务端地址</span><br><span class="line">hive.s3.ssl.enabled=false</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">hadoop 对接 s3 的前期验证</summary>
    
    
    
    <category term="大数据" scheme="http://smiecj.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    <category term="hive" scheme="http://smiecj.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/hive/"/>
    
    
    <category term="hadoop" scheme="http://smiecj.github.io/tags/hadoop/"/>
    
    <category term="s3" scheme="http://smiecj.github.io/tags/s3/"/>
    
  </entry>
  
  <entry>
    <title>是时候改变了</title>
    <link href="http://smiecj.github.io/2023/09/02/life-basketball-worldcup/"/>
    <id>http://smiecj.github.io/2023/09/02/life-basketball-worldcup/</id>
    <published>2023-09-01T16:00:00.000Z</published>
    <updated>2023-09-02T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天中国男篮输给菲律宾，彻底失去了参加2024奥运会的资格。我觉得难以接受的不是我们没在亚洲排上第一，而是一直以来青黄不接的问题都被反复提起，却要到现在易建联退役，周琦受伤之后暴露出来才发觉<br>思前想后，我也看不到什么解决办法，那就来看看别人是怎么说的吧<br>注意: 论坛我只是原话搬运，很多观点也不是很切合国情，需要明辨是非地看</p><h2 id="1、关于今晚的比赛"><a href="#1、关于今晚的比赛" class="headerlink" title="1、关于今晚的比赛"></a>1、关于今晚的比赛</h2><p><a href="https://www.reddit.com/r/nba/comments/1683494/post_game_thread_philippines_14_def_china_14_9675/?utm_source=share&utm_medium=ios_app&utm_name=ioscss&utm_content=2&utm_term=1">[Post Game Thread] Philippines (1-4) def. China (1-4) 96-75 behind 34 points from Jordan ClarksonPost Game Thread</a></p><p>标题：比赛结果：克拉克森34分，中国75-96不敌菲律宾，以 1-4 成绩结束此次世界杯</p><div class="note black flat"><p>克拉克森就是安德森的亲爹（326赞）</p></div><div class="note black flat"><p>解说员说乔特·雷耶斯（菲律宾主帅）已经递交辞臣，是真的吗？如果是的话那这个消息和今晚赢球一样棒（67赞）</p><ul><li>他已经无数次说过辞职了，但是菲律宾还是选择他做主帅</li></ul></div><div class="note black flat"><p>克拉克森并不认同中国对南海的主张（301赞）（破防了属于是）</p></div><div class="note black flat"><p>当球转移更多的时候克拉克森打得更好，他不会陷入孤立无援的状态，当然这也还因为中国队并不像苏丹、安哥拉和意大利那样天赋这么好（55赞）</p></div><h2 id="2、关于中国篮球"><a href="#2、关于中国篮球" class="headerlink" title="2、关于中国篮球"></a>2、关于中国篮球</h2><p><a href="https://www.reddit.com/r/nba/comments/165mm2a/how_is_china_still_so_weak_in_international/?utm_source=share&utm_medium=ios_app&utm_name=ioscss&utm_content=2&utm_term=1">How is China still so weak in international basketball?</a></p><p>标题：为什么中国队在国际赛场上这么弱？<br>副标题：可能篮球在中国并不是最出名的，但是中国有10亿多人，他们还有一个有竞争力的联赛。然而一旦到了国际赛场，前面所提的好像都和他们的表现无关，这届世界杯他们已经0-3了</p><div class="note black flat"><p>其实他们的联赛其实并不是很有竞争力，有的球员在那里能打出非常好的数据，但是到欧洲有竞争力的联赛就只能是平均水平（有时比平均水平更低）<br>米洛斯拉夫-拉杜利察 在CBA 的平均数据是 24分/11篮板和5助攻（<a href="https://www.sohu.com/a/588895902_121082800">数据来源</a>），但是他在欧洲篮球联赛（Euroleague ，简称EL）和 美国篮球联赛（American Basketball Association，简称 ABA，比 NBA 低级别）的贝尔格莱德红星（ Red Star Belgrade）队因为表现不佳，都没能获得上场机会（DNP）。达拉斯-摩尔 能够以 51%命中率、41%三分命中率和83%罚球命中率（51/41/83）在 CBA 拿到 26+6+4的数据，但之后的一个赛季他在欧洲杯（Eurocup ，比 Euroleague  低一个级别）却只能拿到场均6分的数据<br>CBA 受到关注的很大原因是他们为前 NBA 球员提供非常丰厚的薪水，这让他们在没有压力的情况下打比赛，也导致了中国本土球员水平更差<br>（1.1k赞）</p></div><div class="note black flat"><p>引用姚明的话：<br>“中国有14多亿人，但只有1.3w 注册球员，日本有75w，美国有2300w”（2.7赞）<br>（译者注：不过关于这点要说回来，日美是把学校打篮球的也算进来了，因为他们有校园联赛，我们没统计这部分）</p></div><div class="note black flat"><p>篮球系统太孤立了，当全世界的球员球队都在一起比赛对抗的时候，拥有自己联赛其实代表不了什么。日本有不少球员在美国大学打球，甚至在NBA打球，他们在那里进行高水平的比赛，这提升了他们国家队水平。反观中国球员并没有这样的（译者注：校园篮球还是有的，只是都没打出来，今年NBA三个落选秀）（349赞）</p></div><div class="note black flat"><p>我所看到的是他们的培养系统非常糟糕（428赞）</p><ul><li>中国人在这里回复一下，这正是原因所在<br>在美国，如果你表现出了篮球天赋，球探会在你上学的时候，甚至是读小学的时候就注意到你，让你加入更好的球队，跟着更好的教练接受培养，直到你在NBA选秀被选中。整个系统都致力于培养学生成为职业运动员，并且不会放过任何一个有天赋的学生，不管TA来自哪里<br>在中国打篮球的青年男生不计其数，我也确定在他们中一定有天赋优秀的孩子。但是这里并没有将他们看中并培养到top水平运动员的体系。绝大多数小孩只是会被教导把学习放在首要位置上，篮球当作爱好就好。我们也有一些和职业道路紧密相关的体育学校，但只有很小一部分小孩能够选择这条路，而不是常规的进学路，而且这些体育学校往往会被家长当作是垃圾学校<br>所以说，尽管中国有很多小孩在打篮球，但有可能成为职业运动员的人才库却非常干涸，这导致了现在的中国篮球缺少拿得出手的成绩（65赞）</li></ul></div><div class="note black flat"><p>据我了解，他们的篮球文化非常不同。除了 CBA，他们大部分的比赛就只是来自不同城市的业余球队之间，甚至这些业余比赛相比CBA，在民间更火，所以他们并不会把成为职业运动员当作自己的理想。他们更希望有一个普通的工作，为自己城市的球队参与比赛（58赞）</p></div><div class="note black flat"><p>他们在团体运动上表现都很差，不只是篮球（752赞）</p><ul><li>你说的一点毛病没有，从1984 年以来中国拿到的546枚奥运奖牌中，只有13枚来自团队球类项目（<a href="https://en.wikipedia.org/wiki/China_at_the_Olympics">来源</a>）（566赞）</li></ul></div><div class="note black flat"><p>在中国很多体育项目都集中精力于奥运会上，因为这对政府来说最能体现它的强大。他们的奥运团队也主要集中精力在那些能用较少精力，较大概率获得金牌的项目上（参考 <a href="https://www.nytimes.com/2021/07/29/world/asia/china-olympics.html">The Chinese Sports Machine’s Single Goal: The Most Golds, at Any Cost</a>）。从这个角度看，投资篮球或者其他大部分团队体育项目都是非常糟糕的：构建一个具有竞争力的篮球队，需要投入到基础设施的建设太多了，而且你是在参与整个奥运会上最有含金量（是真的含金）的运动，但只能获得一枚奖牌（84赞）</p></div><div class="note black flat"><p>我曾经在美国一个很大的州的高校工作，这个学校专门为有钱的国际学生开设。这个学校在我入职的那一年拿到了州冠军。一半的国际生来自亚洲（其中90%来自中国），大约3/4 的亚洲男孩会在放学后进行投篮训练，他们是真的痴迷于篮球。大部分学生都会尝试校队选拔，只有一个能进入到新生校队，没人能进入二级校队或主力校队（新生校队 -&gt; 二级校队 -&gt; 主力校队：Freshman -&gt; JV -&gt; Varsity）</p><p>我经常和他们一起打球，大部分在基础投篮表现上都不差。大部分学生运球也还可以，少数人投篮也很好，但他们完全不擅长在 5V5 这种常规，需要团队组织的模式下打球。我的一位朋友是他们的教练，他会在选拔周的时候进行一些技能特训，比如3V3，这对这些学生来说非常困难。比如他们不清楚在无球状态下如何跑位，他们知道挡拆怎么做，但并不知道背后的原理，以及应该什么时候做挡拆，什么方向去做挡拆。更不懂如何卡板，对防守的投入也很少。他们模仿的是一个并不适合实战的篮球法则，更像是游戏里面的（他们喜欢玩 2K 和 lol）。尽管这50个学生只是他们庞大人口的很小一部分，但是来自其他国家的学生更懂如何取胜（140赞）</p><ul><li>我是美籍华人，并在06年的大学暑假，在上海做过交换生（是的我上年纪了）。我的两个接近6英尺4英寸（194左右）的白人同学都喜欢打篮球，所以我们去找了一个本地球场打球。所有本地人都大声想要 And one，像机器人一样地运球，并想在高大的老美面前炫技。其次是只要我们提升一点防守强度，他们总是不停地叫犯规，甚至为这还差点打起来，直到我这个老家伙盯着他们，让他们闭嘴。好像你只要不让他们做这些行为，让他们打得爽，他们就随时要拿着球回家。真是非常非常奇怪的经历了（译者：这段比较扯淡，野球场也不能代表国家队的表现）</li></ul></div><div class="note black flat"><p>最大的原因还是他们的基层培养体系不完善。在中国，篮球系统集中依赖于体育学院运作，并且通常以身高作为新秀选拔标准。引用姚明的话，中国只有13w篮球注册人口，不及美国的 1/100 甚至还没有日本多，这真的讲到痛点上了。</p><p>他们没有像美国在初中、高中、业余体育联合会（AAU）这样组织的联赛。只有很小一部分年轻人接受了组织指导和训练。专业学院之外的培训系统几乎就是不存在的。中国大学生的技术平均水平就和美国普通高中学生差不多（我和中国大学校队打过球）</p><p>这也意味着，当中国以高个子为选拔标准的时候，真正有天赋的控卫和前锋就只能从很少的一部分人中挑选了，甚至比大部分国家的选择标准都要少。这也符合了大部分中国球星都是内线（姚明、易建联、周琦、巴特尔等）的情况，他们还小就通过身高容易被发掘并进入到体教体系。举另一个例子，林书豪来自5百万美籍华裔中，而不是14亿中国人口中（280倍之差）（46赞）</p></div><h2 id="自己再说两句"><a href="#自己再说两句" class="headerlink" title="自己再说两句"></a>自己再说两句</h2><p>reddit 上的言论看一圈下来，倒是和国内讨论的八九不离十，基本离不开青训体系建设、联赛对抗水平、海外打球的球员数量等方向。但就只是看这三点，从08到现在我们也几乎没有进步。海外打球的本土球员现在为0，大学生联赛培养出的新秀在CBA都难以立足，整个联赛水平也在退步：以前多少王牌外援，多少本土响当当的球星，现在呢？那反映在大赛上，成绩能好吗？</p><p>网上也看到不少把输球原因归结到某个球员，或者是教练，又甚至是篮协主席身上</p><p>我特别反感这种出现问题就把锅全甩给一个人的言论，除了能宣泄负面情绪没有任何用处，另外我们所看到的输球只是一瞬间的事，那我们是做了什么，为什么会制定这样的规划政策，为什么联赛会培养出这些在国际赛场打不出水平的球员，为什么要频繁换教练，导致永远没有一套自己的技战术体系，这和背后的决策、体系规划、培养方式方方面面都离不开关系</p><p>你说李凯尔打得不好，那就假设把他换了，换成场均能拿30多分的，这种水平在国际比赛赛场已经很猛了。但是我们输的三场比赛，分别输了 42分，20分，18分和21分，归化就算能多拿10多分也是无济于事。看一下隔壁的比赛，渡边雄太这场拉垮了，但是他们还有两个球员拿了20多分，我们呢？</p><p>你说教练有问题，那就说他现在手里的牌又有多少。你说他用人不当调整不及时，那就说现在中国队球员全部加起来，有一个像样的首发阵容吗？真到了比赛要紧时刻，该换谁，能换谁呢？。另一方面是没有个人能力特别突出的球员，球员之间形成不了很好的化学反应，这也直接导致了没有稳定的球队技战术体系。那这怪教练也没用，巧妇也难为无米之炊</p><p>最后，我们到底会怎么发展呢？从08年到现在，已经退步了15年了，现在还看不到答案的话，4年后再参加预选的我们又真的能找到答案吗？我不好说。</p>]]></content>
    
    
    <summary type="html">男篮世界杯表现不吐不快</summary>
    
    
    
    <category term="生活" scheme="http://smiecj.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="篮球" scheme="http://smiecj.github.io/categories/%E7%94%9F%E6%B4%BB/%E7%AF%AE%E7%90%83/"/>
    
    
    <category term="生活" scheme="http://smiecj.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="篮球" scheme="http://smiecj.github.io/tags/%E7%AF%AE%E7%90%83/"/>
    
  </entry>
  
  <entry>
    <title>开源项目观察8月报</title>
    <link href="http://smiecj.github.io/2023/08/23/opensource-monthly-202308/"/>
    <id>http://smiecj.github.io/2023/08/23/opensource-monthly-202308/</id>
    <published>2023-08-22T16:00:00.000Z</published>
    <updated>2023-09-04T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/xiaoliizi/article/details/132702146">本文csdn地址</a></p><p><a href="https://mp.weixin.qq.com/s/z7elA1hgWTRgzsIt_R_4QQ">本文公众号地址</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>要问对一门技术感兴趣的最好办法是什么，必然不是直接揪着原理、源码一点点读，那很容易只见其木不见其林。不妨从新特性去了解，先俯瞰森林全貌，再细看每一棵树的变化</p><p>于是刚旅游回来的我在想，已经这么久没关注技术行情了，那就看看这个月的更新呗，了解一下接触过的技术都有哪些更新</p><p>总览: 大数据: hue、starrocks、airflow、presto、jupyter、seatunnel、starrocks；编程语言: golang、c++</p><h2 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h2><h3 id="hue"><a href="#hue" class="headerlink" title="hue"></a>hue</h3><p><a href="https://github.com/cloudera/hue/releases/tag/release-4.11.0">1月19: 4.11</a><br><a href="https://docs.gethue.com/releases/release-notes-4.11.0/">https://docs.gethue.com/releases/release-notes-4.11.0/</a></p><p><img src="/2023/08/23/opensource-monthly-202308/hue-01.png" alt="hue release"></p><ul><li><p><a href="https://gethue.com/blog/2022-10-11-creating-iceberg-tables-in-hue/">支持 iceberg 数据源</a></p></li><li><p>通过缓存 Livy session 中的信息来加速 SparkSQL，并适配 Spark UDF</p></li><li><p><a href="https://gethue.com/blog/2022-02-01-hplsql-support/">支持 HPL/SQL: hive sql 的高级语法，支持中间结果保存、循环等</a></p></li></ul><p>总结: 基本是小改进，界面样式和4.10一致</p><h3 id="starrocks"><a href="#starrocks" class="headerlink" title="starrocks"></a>starrocks</h3><p><a href="https://docs.starrocks.io/zh-cn/main/release_notes/release-3.1">8月25: 3.1.2</a></p><p><img src="/2023/08/23/opensource-monthly-202308/starrocks-01.png" alt="starrocks release"></p><p>3.1 版本相关的新特性（部分）</p><ul><li><p>存算分离: 支持主键模型</p></li><li><p>存算分离: 抽象 存储卷（Storage Volume） 概念，方便在不重启集群的情况下，对对象存储的配置进行修改</p></li><li><p>Catalog: 支持 ES、Paimon</p></li><li><p>​物化视图: 可以通过ALTER手动重新激活失效的物化视图（之前在 base 表重建后，物化视图需要重建）</p></li><li><p>物化视图: 通过 swap 可进行视图替换（目前还不支持直接 alter 视图 sql）</p></li><li><p>物化视图: 支持随机分桶（Random Bucketing）</p></li><li><p>物化视图: 支持通过 ORDER BY 指定排序键</p></li><li><p>建表: 支持自增列属性 AUTO_INCREMENT，提供表内全局唯一 ID</p></li><li><p>建表: 通过分区表达式自动创建分区，比如 day 表示按天分区</p></li><li><p>建表: 支持随机分桶（仅支持明细表）</p></li><li><p>建表: 支持使用 colocate_group、storage_medium（存储介质 如：SSD）、storage_cooldown_time 等属性</p></li><li><p>建表: 支持生成列（generated column），自动计算表达式结果，提升查询性能</p></li><li><p>导入数据: 通过 insert into 导入数据的时候支持 files 函数，不需要先建 catalog</p></li></ul><p>总结: starrocks 作为目前比较流行的实时数仓服务，3.0 版本在物化视图的改进还是很足的，非常建议尝试</p><h3 id="airflow"><a href="#airflow" class="headerlink" title="airflow"></a>airflow</h3><p><a href="https://airflow.apache.org/docs/apache-airflow/stable/release_notes.html#airflow-2-7-0-2023-08-18">8月18: 2.7.0</a></p><p><img src="/2023/08/23/opensource-monthly-202308/airflow-04.png" alt="airflow release"></p><ul><li><p>python基础版本: 不再支持 3.7, 支持 3.8, 3.9, 3.10, 3.11</p></li><li><p>UI: 新 graph 界面</p></li><li><p>smtp: 默认使用 <a href="https://docs.python.org/3/library/ssl.html#ssl.create_default_context">ssl.create_default_context</a> 创建 ssl 客户端，可通过 <a href="https://airflow.apache.org/docs/apache-airflow/stable/configurations-ref.html#ssl-context">ssl_context</a> 配置其他校验级别<br><a href="https://github.com/apache/airflow/pull/33075">参考: Allows to choose SSL context for SMTP provider #33075</a></p></li><li><p>UI：出于安全性考虑，默认禁用在界面、API 和 CLI 侧<a href="https://airflow.apache.org/docs/apache-airflow/stable/howto/connection.html#testing-connections">对 connection 触发测试</a>，可通过 <a href="https://airflow.apache.org/docs/apache-airflow/stable/configurations-ref.html#test-connection">test_connection</a> 选项配置<br>可选值: Disabled, Enabled, Hidden</p></li></ul><p>之前版本的dag界面:<br><img src="/2023/08/23/opensource-monthly-202308/airflow-02.png" alt="airflow"></p><p>新版本dag界面:<br><img src="/2023/08/23/opensource-monthly-202308/airflow-03.png" alt="airflow"></p><p>总结: 基本功能改动不大，有两个主要特性都和安全性相关</p><h3 id="presto"><a href="#presto" class="headerlink" title="presto"></a>presto</h3><p><a href="https://prestodb.io/docs/current/release/release-0.283.html">8月8: 0.283</a></p><p>0.276 ~ 0.283 的部分改进</p><ul><li><p>JDBC: 增加 metadata 的缓存，通过三个配置控制: metadata-cache-ttl, metadata-cache-refresh-interval 和 metadata-cache-size<br><a href="https://prestodb.io/docs/current/connector/hive.html?highlight=metadata%20cache%20ttl#metastore-configuration-properties">参考 hive 配置</a></p></li><li><p><a href="https://github.com/prestodb/presto/issues/15909">ES: 支持配置用户密码校验</a>，参数将透传给ES</p></li></ul><h3 id="jupyter"><a href="#jupyter" class="headerlink" title="jupyter"></a>jupyter</h3><p><a href="https://jupyterlab.readthedocs.io/en/stable/getting_started/changelog.html#v4-0">4.0</a></p><p>快速使用:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm -p 8888:8888 jupyter/datascience-notebook:lab-4.0.5</span><br></pre></td></tr></table></figure><p><img src="/2023/08/23/opensource-monthly-202308/jupyter-02.png" alt="jupyterlab"></p><ul><li><p>code editor: 使用新版 codemirror 6，配置更有效和方便，比如只隐藏 markdown 格式的左侧行数</p></li><li><p>extension: 可以直接引用通过 pip 安装的依赖，不再需要本地再把 extension 项目重新 build 的过程</p></li><li><p>基本操作: 优化搜索功能，支持选中搜索、多行搜索</p></li><li><p>UI: 增加 ctrl + shift + H 快捷键查看热键，在 notebook 底部增加创建新代码块按钮等</p></li></ul><p><img src="/2023/08/23/opensource-monthly-202308/jupyter-01.png" alt="add cell"></p><ul><li>协作: 通过 <a href="https://github.com/jupyterlab/jupyter-collaboration">jupyter-collaboration</a> 支持多用户协作编辑同个 notebook</li></ul><p>总结: 4.0 版本之后界面样式和 3 差不多，不过还是能看到很明显的一些细节改进，值得尝试</p><h3 id="seatunnel"><a href="#seatunnel" class="headerlink" title="seatunnel"></a>seatunnel</h3><p><a href="https://github.com/apache/seatunnel/releases/tag/2.3.3">2.3.3</a></p><p><a href="https://mp.weixin.qq.com/s/vEh-n_8Oe050hm1pA47bbg">参考: Apache SeaTunnel 2.3.3 版本发布，CDC 支持 Schema Evolution！</a><br><a href="https://apacheseatunnel.medium.com/apache-seatunnel-2-3-3-released-with-cdc-support-for-schema-evolution-2fd78c81f2d6">Apache SeaTunnel 2.3.3 Released with CDC Support for Schema Evolution!</a></p><ul><li><p>实时同步: flink cdc 支持表结构同步（DDL）</p></li><li><p>实时同步: flink cdc 支持对无主键表的唯一索引列进行 split 拆分</p></li><li><p>mongo: 支持 mongo cdc</p></li></ul><h2 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h2><h3 id="golang"><a href="#golang" class="headerlink" title="golang"></a>golang</h3><p><a href="https://tip.golang.org/doc/go1.21">1.21</a></p><p><a href="https://go.dev/blog/go1.21">Go 1.21 is released!(8月8日)</a></p><p><a href="https://mp.weixin.qq.com/s/Nuj_cYFvBesaBbSSz5PuBg">Go1.21 那些事：泛型库、for 语义变更、统一 log/slog、WASI 等新特性，你知道多少？</a></p><p><a href="https://appliedgo.com/blog/go1-21">Is Go 1.21 already on your upgrade list? It should be!</a></p><ul><li><p>日志: 标准库新增 slog，支持格式化日志输出、自定义 handler 和 日志等级<br><a href="https://www.reddit.com/r/golang/comments/11sdqia/slog_proposal_accepted_for_go_121/">reddit 上的讨论</a>: 大部分开发者都很欢迎 go 官方支持了slog</p></li><li><p>内置函数: 新增 max、min、clear。不再需要通过 math.Max 调用，且通过泛型支持不同基础类型传参</p></li><li><p>内置函数: <a href="https://pkg.go.dev/cmp">cmp</a> 支持泛型</p></li><li><p>基础类型: map、slice 支持泛型，并提供支持泛型的 <a href="https://pkg.go.dev/maps">maps</a>、<a href="https://pkg.go.dev/slices@master">slices</a> 工具库<br>常用方法: slices.Sort、maps.Equal 等</p></li><li><p>泛型: 性能提升<br><a href="https://encore.dev/blog/go1.21-generics">Understanding Go 1.21 generics type inference</a></p></li><li><p>基本语法: for 循环变量赋值语义变更，可通过添加 <a href="https://github.com/golang/go/wiki/LoopvarExperiment">GOEXPERIMENT=loopvar</a> 参数控制让局部变量每次赋予新值，避免在循环内开启协程、使用指针时出现不符预期的结果，<a href="https://github.com/golang/go/wiki/CommonMistakes#using-reference-to-loop-iterator-variable">参考: Using reference to loop iterator variable</a></p></li><li><p>编译: <a href="https://go.dev/doc/pgo">PGO（Profile Guided Optimization）</a> 正式发布，通过在 main 代码目录放置 default.pgo（可通过 /debug/pprof/profile 接口生成的 profile）文件来开启 PGO build，将对程序性能有 2% - 7% 的提升</p></li><li><p>命令行和工具: go tool 支持向前（旧版本）兼容和向后（新版本）兼容<br>向前: 如设置 GODEBUG=http2client=0,http2server=0 可禁用 net/http 库的 http2 功能，<a href="https://go.dev/doc/godebug">参考</a><br>向后: 如通过 GOTOOLCHAIN=go1.21rc3 go test 参数设定 go tool 使用的版本，<a href="https://go.dev/doc/toolchain">参考</a></p></li><li><p>Context: context 新增 WithoutCancel 、WithDeadlineCause 、 WithTimeoutCause、<a href="https://github.com/golang/go/issues/57928">AfterFunc</a> 等方法</p></li><li><p>其他特性等: 支持 WASI；增加全局的 <a href="https://github.com/golang/go/issues/57179">$GOROOT/go.env</a> 配置解析（优先级: 系统环境变量 &gt; 用户路径下的 go.env，即 $HOME/.config/go/env &gt; $GOROOT/go.env）等</p></li></ul><p>总结: 相比泛型，像日志库、一些内置函数和 context 新增方法反而更让笔者眼前一亮，这些是在旧功能上进行的添彩功能，可能在平时更能用上</p><h3 id="c"><a href="#c" class="headerlink" title="c++"></a>c++</h3><p><a href="https://zhuanlan.zhihu.com/p/137646370">10分钟速览 C++20 新增特性</a></p><p><a href="https://oi-wiki.org/lang/new">新版 C++ 特性(c++11)</a></p><p><a href="https://blogs.embarcadero.com/what-is-modern-c-in-2023">What Is Modern C++ in 2023?</a></p><p><a href="https://blog.devgenius.io/what-is-new-in-c-20-a5ba62a28b9a">What is new in C++20</a></p><p><a href="https://en.cppreference.com/w/cpp/20">官方-C++20</a></p><p>注意: 使用 gcc 编译需要先升级到 10 以上版本 - <a href="https://stackoverflow.com/a/60515907">参考</a></p><ul><li><p>模块管理: 通过模块进行依赖引用，减小编译后文件大小<br><a href="https://zhuanlan.zhihu.com/p/350136757">扩展: C++20 新特性: modules 及实现现状</a><br><a href="https://github.com/Cpp-Club/Cxx_HOPL4_zh/blob/main/09.md#931-%E6%A8%A1%E5%9D%97">扩展: C++ 之父 Bjarne Stroustrup 对模块功能的介绍</a><br><a href="https://zhuanlan.zhihu.com/p/350136757">C++20 新特性: modules 及实现现状</a></p></li><li><p>基础语法: 支持 coroutine（协程）</p></li><li><p>基础语法: 支持 concept+requires 语法，可以更方便地使用泛型，<a href="https://zhuanlan.zhihu.com/p/107610017">参考</a></p></li><li><p>基础语法: <a href="https://zhuanlan.zhihu.com/p/86809598">Ranges</a>: 更方便地编写迭代器、过滤器的语法<br>但是对 ranges 的看法五花八门，<a href="https://zhuanlan.zhihu.com/p/603431999">参考一篇知乎</a></p></li><li><p>基础语法: 支持条件约束（<a href="https://www.modernescpp.com/index.php/c-core-guidelines-a-detour-to-contracts/">Contract Programming</a>）: 可定义前置条件、后置条件、错误、断言和不变量等，可以更早地在编译阶段发现程序问题<br>如: <a href="https://www.cppstories.com/2017/11/nodiscard/">nodiscard</a>: 规定方法返回值要获取，<a href="https://gavinray97.github.io/blog/adding-invariant-to-cpp-design-by-contract#implementing-the-invariant-call-code-generation">invariant</a>: 规定方法内部不对入参进行修改<br>注意: 只是在编译产生警告，不会直接导致编译错误</p></li><li><p>基础类型: 原子类型，操作方法有 store、load、fetch_add 等</p></li></ul><p>总结: 更新虽然很多，但是 coroutine 使用起来需要引入相关的如此多的关键字，着实让我敬而远之。<a href="https://news.ycombinator.com/item?id=26222342">类似的吐槽</a>，其中有人建议使用封装后的库 如 <a href="https://github.com/lewissbaker/cppcoro">cppcoro</a>，以及对比 Rust 语言的 Async 和 Await 用法: <a href="https://lights0123.com/blog/2020/07/25/async-await-for-avr-with-rust/">Async/Await for AVR with Rust</a></p>]]></content>
    
    
    <summary type="html">每月更新（可能）</summary>
    
    
    
    <category term="开源" scheme="http://smiecj.github.io/categories/%E5%BC%80%E6%BA%90/"/>
    
    
    <category term="大数据" scheme="http://smiecj.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    <category term="golang" scheme="http://smiecj.github.io/tags/golang/"/>
    
    <category term="开源" scheme="http://smiecj.github.io/tags/%E5%BC%80%E6%BA%90/"/>
    
    <category term="starrocks" scheme="http://smiecj.github.io/tags/starrocks/"/>
    
  </entry>
  
  <entry>
    <title>富士山与水</title>
    <link href="http://smiecj.github.io/2023/08/10/japan-travel-note-fujisan/"/>
    <id>http://smiecj.github.io/2023/08/10/japan-travel-note-fujisan/</id>
    <published>2023-08-09T16:00:00.000Z</published>
    <updated>2023-10-06T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/JDD-hAGgrzmrKvodmFqJeA">本文公众号地址</a></p><!--## JRJR 票买起来还是挺麻烦的，支付方式只能选择本地网络支付app，现金或者是实体西瓜卡。苹果钱包里面的西瓜卡在这个时候就没什么用了--><h2 id="景观列车"><a href="#景观列车" class="headerlink" title="景观列车"></a>景观列车</h2><p>坐JR到上月再坐景观列车到河口湖，慢慢从城市走向自然的感觉</p><p><img src="/2023/08/10/japan-travel-note-fujisan/fujisan-01.JPG" alt="居民房都差不多一个样"></p><p><img src="/2023/08/10/japan-travel-note-fujisan/fujisan-02.JPG" alt="景观列车"></p><p><img src="/2023/08/10/japan-travel-note-fujisan/fujisan-03.JPG" alt="快到景区"></p><p><img src="/2023/08/10/japan-travel-note-fujisan/fujisan-04.JPG" alt="公交上拍的富士山"></p><p>不过话说回来，JR 其实也不算慢了，只是相对于新干线（对应国内的高铁）来说稍微慢一点</p><h2 id="富士山的水"><a href="#富士山的水" class="headerlink" title="富士山的水"></a>富士山的水</h2><p>保持了很久的“养胃”模式，被沁人心脾的富士山水打破了</p><p><img src="/2023/08/10/japan-travel-note-fujisan/fujisan-05.JPG" alt="清澈得还在冒泡的水"></p><h2 id="富士山"><a href="#富士山" class="headerlink" title="富士山"></a>富士山</h2><p>从天上山公园，天晴号再到自然生活馆，从安然隐居山林，到山顶和山脚的风格相衬，总能发现不一样的的富士山</p><p><img src="/2023/08/10/japan-travel-note-fujisan/fujisan-06.JPG" alt="fujisan"></p><p><img src="/2023/08/10/japan-travel-note-fujisan/fujisan-07.JPG" alt="fujisan"></p><p><img src="/2023/08/10/japan-travel-note-fujisan/fujisan-08.JPG" alt="fujisan"></p><p><img src="/2023/08/10/japan-travel-note-fujisan/fujisan-09.JPG" alt="fujisan"></p><p><img src="/2023/08/10/japan-travel-note-fujisan/fujisan-10.JPG" alt="fujisan"></p>]]></content>
    
    
    <summary type="html">日本旅游日记系列</summary>
    
    
    
    <category term="旅游" scheme="http://smiecj.github.io/categories/%E6%97%85%E6%B8%B8/"/>
    
    <category term="日本" scheme="http://smiecj.github.io/categories/%E6%97%85%E6%B8%B8/%E6%97%A5%E6%9C%AC/"/>
    
    
    <category term="旅游" scheme="http://smiecj.github.io/tags/%E6%97%85%E6%B8%B8/"/>
    
    <category term="日本" scheme="http://smiecj.github.io/tags/%E6%97%A5%E6%9C%AC/"/>
    
    <category term="日记" scheme="http://smiecj.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>東京の日々</title>
    <link href="http://smiecj.github.io/2023/08/10/japan-travel-note-tokyo/"/>
    <id>http://smiecj.github.io/2023/08/10/japan-travel-note-tokyo/</id>
    <published>2023-08-09T16:00:00.000Z</published>
    <updated>2023-08-10T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/P1CZG06HA9ZI6BXlPyOR0g">本文公众号地址</a></p><h2 id="花火大会"><a href="#花火大会" class="headerlink" title="花火大会"></a>花火大会</h2><p>百闻不如一见，虽然过程有一点不小的插曲，还好把最精彩的一段看完了</p><p>当时就很好奇放出笑脸的烟花是怎么做出来的，正好今晚的 NHK 节目还科普了一下</p><p><img src="/2023/08/10/japan-travel-note-tokyo/tokyo-travel-note-01.jpg" alt="提前一个半小时已经来了不少人"></p><p><img src="/2023/08/10/japan-travel-note-tokyo/tokyo-travel-note-02.png" alt="回来后看到关于火灾的报道"></p><p><a href="https://www.nhk.jp/p/chicochan/ts/R12Z9955V3/episode/te/JYZGRL8W3W">NHK 节目: 拡大版SP▽花火の謎▽なぜ正座▽不思議なジャンプ</a></p><h2 id="新宿"><a href="#新宿" class="headerlink" title="新宿"></a>新宿</h2><p>希望是最后一次被红蓝遍天的カラオケ广告牌吸引吧😂</p><p><img src="/2023/08/10/japan-travel-note-tokyo/tokyo-travel-note-03.png" alt="歌舞伎町"></p><h2 id="浅草寺"><a href="#浅草寺" class="headerlink" title="浅草寺"></a>浅草寺</h2><p>也许是个抽签小技巧：在去浅草寺的仲见世通路边摊上，先抽中一个4等奖的小奖品，再去抽浅草寺的签</p><p><img src="/2023/08/10/japan-travel-note-tokyo/tokyo-travel-note-04.png" alt="雷门"></p><p><img src="/2023/08/10/japan-travel-note-tokyo/tokyo-travel-note-05.png" alt="背面的风神雷神"></p><h2 id="秋叶原"><a href="#秋叶原" class="headerlink" title="秋叶原"></a>秋叶原</h2><p>相比起二次元，它更配得上的符号应该是技术阿宅的天堂，包括 softmap 在内的电器店卖的各种电脑配件，能细到焊板用的各种元器件，DLY大神应该什么​电器都能做出来了</p><p><img src="/2023/08/10/japan-travel-note-tokyo/tokyo-travel-note-06.png" alt="秋叶原"></p><h2 id="J联赛"><a href="#J联赛" class="headerlink" title="J联赛"></a>J联赛</h2><p>川崎前锋主场对阵大阪钢巴，本以为是一场主队轻松把控局势的对阵，却变成了到补时阶段都一直跌宕起伏的比赛</p><p>混入客场球迷区的我们 也结结实实的被大阪球迷的欢庆包围了</p><p><img src="/2023/08/10/japan-travel-note-tokyo/tokyo-travel-note-07.png" alt="看完比赛从球场回去"></p><h2 id="东京塔-amp-东京树"><a href="#东京塔-amp-东京树" class="headerlink" title="东京塔 &amp; 东京树"></a>东京塔 &amp; 东京树</h2><p>同样是电视塔，东京塔有它的历史感，东京树有它的朝气和活力</p><p>对我来说 可能商业气氛没那么浓的东京塔更中意点吧</p><p><img src="/2023/08/10/japan-travel-note-tokyo/tokyo-travel-note-08.png" alt="从芝公园看东京塔"></p><p><img src="/2023/08/10/japan-travel-note-tokyo/tokyo-travel-note-09.png" alt="东京树"></p><h2 id="东京地铁"><a href="#东京地铁" class="headerlink" title="东京地铁"></a>东京地铁</h2><p>除了找换站难的问题，东京地铁给我最大的印象还得是座位太舒服了，所有座位都有软坐垫和靠背。要是国内也有这样的配套，家人再也不用担心我加班多晚回来了</p><h2 id="吃的"><a href="#吃的" class="headerlink" title="吃的"></a>吃的</h2><p>来东京的第一顿正餐就是拉面，差点要咸哭我了</p><p>后面吃的口味比较正常，好不好喝关键还是得在汤</p><p><img src="/2023/08/10/japan-travel-note-tokyo/tokyo-travel-note-11.png" alt="东京树下吃的还不错的拉面"></p><p>寿司和国内相比，好吃并不在肉而是在米。在筑地市场吃的这家也好，在车站买的也好，米的口感都挺不错的</p><p><img src="/2023/08/10/japan-travel-note-tokyo/tokyo-travel-note-10.png" alt="筑地市场吃的寿司"></p><p><img src="/2023/08/10/japan-travel-note-tokyo/tokyo-travel-note-12.png" alt="坐JR吃的寿司"></p><p>当然，我承认自己还是更喜欢便利店的东西，这几天把泡面、寿司、零食都吃了个遍，什么吃的都不重样，不得不感叹这就是便利店大国的实力吗</p><h2 id="一点感想"><a href="#一点感想" class="headerlink" title="一点感想"></a>一点感想</h2><p>在亲身来到了东亚之光，一个真正包容开放的大城市之后，不禁还是想写点什么。东京之所以能成为东京，有客观的原因，也有它自己的东西，而且东京在从里到外很自信地展示着，有无数抬头就能看到的现代化元素，也在行走街道的转角处，看到的历史和潮流的碰撞（神社、老房子、窄窄的小巷、地铁的设施）。这些元素可能看着和东京的定位格格不入，但是东京毫不吝啬地让我们看到。它的包容性，也不只是体现在有多少外国人在这里，而是能让任何一个来东京旅游的人，都看得到关于它的一切</p><p>一味地否定自己的文化和历史，连自己该展示的精华都没搞明白，也很难让别人看得起自己</p>]]></content>
    
    
    <summary type="html">日本旅游日记系列</summary>
    
    
    
    <category term="旅游" scheme="http://smiecj.github.io/categories/%E6%97%85%E6%B8%B8/"/>
    
    <category term="日本" scheme="http://smiecj.github.io/categories/%E6%97%85%E6%B8%B8/%E6%97%A5%E6%9C%AC/"/>
    
    
    <category term="旅游" scheme="http://smiecj.github.io/tags/%E6%97%85%E6%B8%B8/"/>
    
    <category term="日本" scheme="http://smiecj.github.io/tags/%E6%97%A5%E6%9C%AC/"/>
    
    <category term="日记" scheme="http://smiecj.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>东京景点</title>
    <link href="http://smiecj.github.io/2023/07/14/japan-travel-guide-tokyo/"/>
    <id>http://smiecj.github.io/2023/07/14/japan-travel-guide-tokyo/</id>
    <published>2023-07-13T16:00:00.000Z</published>
    <updated>2023-07-26T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本文共享文档"><a href="#本文共享文档" class="headerlink" title="本文共享文档"></a>本文共享文档</h2><p><a href="https://thorn-silkworm-729.notion.site/dd52fddbc33d43fa93b272c0544d1ea6">日本景点</a></p><h2 id="东京介绍"><a href="#东京介绍" class="headerlink" title="东京介绍"></a>东京介绍</h2><p><a href="https://zh.wikipedia.org/zh-hans/%E4%B8%9C%E4%BA%AC">东京-维基百科</a></p><p>东京（日语：東京 / とうきょう Tōkyō */?）是位于日本关东地方的都市，一般指东京都、狭义上东京都区部（即东京市区），亦可泛指东京都及周边卫星都市相连而成的“首都圈”（东京都会区）。是日本事实上的首都。<strong>东京都人口数达1399万</strong>（2022年4月），首都圈的人口数则达3800万，是目前全球规模最大的都会区。<strong>东京的GDP为全球第二</strong>，在2016年达9730亿美元，而同时东京都会区（一都三县）则高达1.8兆美元，若将东京视为一个国家，其GDP总量高于加拿大、韩国、俄罗斯等，位列世界第八。东京为亚洲最重要的世界级城市，也是传统上的全球四大世界级城市之一，全球城市指数排名前四。此外，东京亦为世界最宜居城市（英国Monocle生活品质调查）。</p><p>东京古称江户，自德川幕府时代以来开始成为日本主要都市之一，明治维新时期改为现名后，更发展为日本政治、经济、文化、交通等众多领域的枢纽中心。经过二战后的继续发展，东京不仅成为世界商业金融、流行文化与时尚重镇，亦为世界经济发展及富裕程度最高的都市之一。此外，东京还拥有复杂且密集的城市轨道交通系统，其中单就东京的两大地铁系统管辖区段每日平均运量达880万人次，繁忙程度居全球地铁第三位；如将地铁直通运转路线、私铁通勤路线及JR通勤路线纳入计算，则每日平均运量位居世界城市轨道交通运输系统第一位。</p><p>在正式的行政区划定义上，东京仅限于东京都，与道、府、县同为日本的一级行政区，辖区包含东京都区部、多摩地方以及伊豆群岛、小笠原群岛等离岛；其中，<strong>东京都区部为日本中央政府所在地</strong>。东京都同时也囊括了日本最南端（冲之鸟礁）和最东端（南鸟岛）等地理极点，拥有日本各都道府县中最多的人口数，同时也是日本人口密度最高的都道府县。</p><h2 id="23区地图"><a href="#23区地图" class="headerlink" title="23区地图"></a>23区地图</h2><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-area-02.webp" alt="东京23区地图"></p><h2 id="景点游玩整理"><a href="#景点游玩整理" class="headerlink" title="景点游玩整理"></a>景点游玩整理</h2><table><thead><tr><th>方向</th><th>区域</th><th>景点</th><th>特点</th><th>交通</th><th>开放时间</th><th>门票/购票方式</th><th>周边住宿/景点</th><th>美食</th><th>时间</th><th>其他</th></tr></thead><tbody><tr><td>中心<div style="width: 30pt"></td><td><div style="width: 40pt">新宿区</td><td><div style="width: 100pt"><a href="https://www.mafengwo.cn/poi/22535.html">新宿御苑 しんじゅくぎょえん</a></td><td><div style="width: 100pt">大型公园，赏樱花，赏枫，言叶之庭取景地</td><td><div style="width: 150pt">大江户线-国立竞技场、新宿站</td><td><a href="https://www.gotokyo.org/cn/spot/75/index.html">全日，9:00～16:30</a></td><td><div style="width: 150pt">普通票:成人500日元 (1月1日-12月31日 周一-周日) ; 半票:250日元(15岁以上青少年、65岁以上老年人)</td><td><div style="width: 250pt">新宿站步行7分钟</td><td><div style="width: 250pt">待补充</td><td><div style="width: 50pt">1-3小时</td><td></td></tr><tr><td>中心</td><td>新宿区</td><td><a href="https://www.mafengwo.cn/poi/6151659.html">新宿黄金街 新宿ゴールデン街</a></td><td>老街，居酒屋街</td><td>紧邻歌舞伎町街与花园神社，JR山手线新宿站</td><td>全年开放</td><td>无门票</td><td><a href="https://www.gotokyo.org/cn/story/guide/shinjuku-shop/index.html">购物</a>: LUMINE: 年轻潮流<br>大黑屋: 中古店<br>京王百货店:销售化妆品、时装、饰品、玩具、家居用品、日本传统工艺品</td><td><a href="https://www.gltjp.com/zh-hans/directory/item/10362/">超厉害的煮干拉面（すごい煮干(にぼし)ラーメン）</a><br><a href="https://www.klook.com/zh-TW/activity/13174-yakiniku-tei-rokkasen-shinjuku-tokyo/?aid=77&utm_medium=affiliate-alwayson&utm_source=non-network&utm_campaign=77&utm_term=">燒肉亭六歌仙</a>: 烤肉吃到饱, <a href="https://ajgogo.com/2019-09-04-2191/">具体订位方式分享</a><br><a href="https://livejapan.com/zh-tw/in-tokyo/in-pref-tokyo/in-shinjuku/article-a0002669/">其他</a></td><td>2小时</td><td>位于歌舞伎町内，晚上才热闹</td></tr><tr><td>中心</td><td>新宿区</td><td><a href="https://www.mafengwo.cn/poi/6151659.html">歌舞伎町 かぶきちょう</a></td><td>各种娱乐、风俗店</td><td>同上</td><td>全年开放</td><td>无门票</td><td>参考其他</td><td><a href="https://www.mafengwo.cn/poi/6414404.html">矶丸水产(新宿3丁目店) （Isomaru Suisan）</a>: 知名，也有人评价一般；<a href="https://www.mafengwo.cn/poi/8093848.html">蟹道乐(新宿本店)</a>: 蟹的各种吃法，味道可能一般</td><td>3小时以上</td><td>晚上热闹，人很多，也很多黑社会，最好小心，<a href="https://www.cnkirito.moe/tokyo-travel/#%E6%AD%8C%E8%88%9E%E4%BC%8E%E7%94%BA">参考</a></td></tr><tr><td>中心</td><td>千代田区</td><td><a href="https://www.mafengwo.cn/poi/6151659.html">秋叶原 秋葉原 あきはばら アキバ</a></td><td>日本三大电器街<a href="https://www.momoda8.com/morank/54.html">(另一个: 日本桥)</a>、二次元</td><td>中央、总武线 / 银座线: 秋叶原站，步行5分钟，从新宿出发公交30分钟</td><td>全年开放</td><td>无门票</td><td><a href="https://livejapan.com/zh-cn/in-tokyo/in-pref-tokyo/in-akihabara/article-a0004361/">sofmap</a>: 电脑配件</td><td><a href="https://tabelog.com/tokyo/A1310/A131001/13021102">粋な一生ラーメン</a>（评分一般）、<a href="https://tabelog.com/tw/tokyo/A1310/A131001/13219278/dtlrvwlst/">BENGAL</a>（评分居中）</td><td>3小时以上</td><td>打卡点: <a href="https://www.animate.co.jp/shop/akihabara/">ANIMATE: 漫画书、漫画周边</a></td></tr><tr><td>中心</td><td>千代田区</td><td><a href="https://www.gotokyo.org/cn/story/guide/a-noble-look-at-tokyos-imperial-palace-a-guide-to-the-royal-residence/index.html">皇居 こうきょ / 江户城 えどじょう</a></td><td>日本皇室的住所，可以参观 东御苑和外苑</td><td>千代田线 - 大手町站; 中央线 - 东京站</td><td><a href="https://zh.wikipedia.org/zh-hans/%E7%9A%87%E5%B1%85%E6%9D%B1%E5%BE%A1%E8%8B%91">东御苑</a>（皇居東御苑/こうきょひがしぎょえん）全年开放，观光游从周二到周六每天各有2次，可以<a href="https://www.bring-you.info/zh-hans/tokyo-imperial-palace#spot2">在线申请</a>（从<a href="https://sankan.kunaicho.go.jp/index.html">这里</a>看已经申请满了）</td><td><a href="https://cn.tripadvisor.com/Attraction_Review-g1066443-d479262-Reviews-Two_tiered_Bridge_Ni_ju_Bashi-Chiyoda_Tokyo_Tokyo_Prefecture_Kanto.html">二重桥 にじゅうばし</a>（需要先申请）、<a href="https://www.japan-travel.cn/spot/1736/">千鸟渊 千鳥ヶ淵 ちどりがふち</a>（皇居的护城河，赏樱）、<a href="https://www.japan-travel.cn/spot/1718/">日本武道馆</a></td><td>参考其他</td><td>1小时</td><td></td><td></td></tr><tr><td>中心</td><td>涩谷区</td><td><a href="https://www.japan-travel.cn/spot/1666/">明治神宫 明治神宮 めいじじんぐう</a></td><td>明治天皇(1852-1912)与昭宪皇太后，涩谷区中最大的一块绿地</td><td>山手线 - 原宿站; 千代田线或副都心线 - 明治神宫前站</td><td>全年开放</td><td>无门票</td><td>代代木公园</td><td>参考其他</td><td>1小时</td><td></td></tr><tr><td>中心</td><td>涩谷区</td><td><a href="https://www.japan-travel.cn/spot/2177/">涩谷全向十字路口 渋谷スクランブル交差点 Scramble</a></td><td>最经典的十字路口</td><td>涩谷车站八公出口</td><td>全年开放</td><td>无门票</td><td>参考其他</td><td>参考其他</td><td>几分钟</td><td></td></tr><tr><td>中心</td><td>涩谷区</td><td><a href="https://livejapan.com/zh-cn/in-tokyo/in-pref-tokyo/in-shibuya/spot-lj0001987">忠犬八公像 忠犬ハチ公像 ちゅうけんハチ</a></td><td><a href="https://zh.wikipedia.org/zh-sg/%E5%BF%A0%E7%8A%AC%E5%85%AB%E5%85%AC">故事</a>: 为生前习惯去东京涩谷车站迎接其主人上野英三郎教授归来，甚至在主人死后也一直等待了约10年</td><td>涩谷站</td><td>全年开放</td><td>无门票</td><td>参考其他</td><td>参考其他</td><td>几分钟</td><td></td></tr><tr><td>中心</td><td>涩谷区</td><td><a href="https://cn.tripadvisor.com/Attraction_Review-g1066456-d1373790-Reviews-Takeshita_Street-Shibuya_Tokyo_Tokyo_Prefecture_Kanto.html">竹下通 竹下通り たけしたどおり</a></td><td>时装店，小吃</td><td>山手线 - 原宿站</td><td>10:30-20:30</td><td>无门票</td><td>店: ＠cosme TOKYO 旗舰店（美妆）、WITH HARAJUKU 复合式商场</td><td><a href="https://tabelog.com/tokyo/A1306/A130601/13186805/">トッティ キャンディ ファクトリー 原宿店 （Totti Candy Factory）</a>: 巨型彩色棉花糖和粉红少女装<br><a href="https://tabelog.com/tokyo/A1306/A130601/13088711/">マリオンクレープ 原宿竹下通り店 / MARION Crepes 可丽饼</a> 招牌: 特制草莓布朗尼蛋糕＆巧克力生鲜奶油2倍<br><a href="https://tabelog.com/tokyo/A1306/A130601/13218655/">LONG! LONGER!! LONGEST</a>: 日本最长的吉拿棒、日本最长的棉花糖等</td><td>1-2小时</td><td></td></tr><tr><td>中心</td><td>港区</td><td><a href="https://www.japan-travel.cn/spot/1709/">东京塔 东京铁塔 東京タワー / とうきょうタワー</a></td><td>建于1958年，广播塔，东京第二高（2010年晴空塔建成之后），333 米（1,029 英尺），红白相间</td><td>大江户线-赤羽桥; 日比谷线-霞关</td><td>9:00-23:00</td><td>Main Deck（大眺望厅）的入场费为 1200 日元，Top Deck（特别眺望厅）的行程门票是 3,000 日元<br>在<a href="https://www.tokyotower.co.jp/cn/price/">tokyotower（官网）</a>或者<a href="https://www.klook.com/zh-CN/activity/4911-tokyo-tower-main-observatory-ticket-tokyo/">klook</a>可以预定</td><td><a href="https://tokyo.letsgojp.cn/archives/321054/">拍摄地点</a>: 芝公园4号地、赤羽桥车站～「东京铁塔下」（东京タワー下）路口、<a href="https://www.gltjp.com/zh-hant/article/item/12052/#zh-1-12">東京鐵塔停車場樓梯</a>、増上寺（增上寺） × 東京鐵塔、彩虹大橋北側遊步道</td><td><a href="https://beauty-upgrade.tw/23723">东京铁塔内美食</a></td><td>1-2小时</td><td>晚上的票可能比较火爆，需要提前1-2周预订<br>可购买礼品: 千分之一東京鐵塔</td></tr><tr><td>中心</td><td>港区</td><td><a href="https://www.gltjp.com/zh-hans/directory/item/10114/">芝公园 芝公園 しばこうえん</a></td><td>1873 年建成，日本最早的公园，赏花，东京铁塔拍摄地</td><td>浅草线-大门<br>三田线-御成门</td><td>全年开放</td><td>无门票</td><td>东京塔</td><td><a href="https://tabelog.com/matome/3394">参考</a>: クレッセント(法国料理)<br><a href="https://majohouse.com/2016/01/07/nodaiwa-minato/">野田岩</a>（鳗鱼之神）</td><td>1小时</td><td></td></tr><tr><td>中心</td><td>港区</td><td><a href="https://www.mafengwo.cn/poi/6151659.html">台场 台場 だいば</a></td><td>东京湾右下角，看整个东京湾</td><td>山手线-&gt;临海线-东京电讯; 新宿出发约50分钟</td><td>全年开放</td><td>空中列车百合鸥号，可现场或者<a href="https://www.kkday.com/zh-cn/product/28490-asakusa-to-odaiba-tokyo-waterside-water-bus-ride-japan">kkday</a>购买</td><td><a href="https://livejapan.com/zh-cn/in-tokyo/in-pref-tokyo/in-odaiba/spot-lj0002127/?sc_lid=lj_pc_article_spot01">调色板城大摩天轮 パレットタウン</a>（现场购票）<br><a href="https://www.gotokyo.org/cn/spot/39/index.html">台场海滨公园</a>（人工岛，风景不错）<br><a href="https://www.gotokyo.org/cn/story/walks-and-tours/waterfront/rainbow-bridge/index.html">彩虹大桥 レインボーブリッジ，Rainbow Bridge</a>（眺望整个东京湾，看东京塔，步行30分钟）</td><td>参考其他</td><td>2-3小时</td><td><a href="https://japantravel.navitime.com/zh-cn/area/jp/guide/NTJarea0120-zh-cn/">线路推荐: ①筑地→②丰洲→③有明→④台场</a></td></tr><tr><td>中心</td><td>港区</td><td><a href="https://bobby.tw/blog/post/227736584-%E3%80%90%E6%9D%B1%E4%BA%AC%E6%99%AF%E9%BB%9E%E3%80%91%E5%85%AD%E6%9C%AC%E6%9C%A8%E4%B9%8B%E4%B8%98hills%28%E6%96%B0%E5%9F%8E%E5%B1%95%E6%9C%9B%E5%8F%B0%29%EF%BC%9A">六本木之丘 六本木新城森大楼 ろっぽんヒルズ森タワー</a></td><td>观景台，六本木: 最多企业总部的区域，新城</td><td>日比谷线-六本木; 大江户线-六本木</td><td>全年开放</td><td>最晚8点，<a href="https://www.kkday.com/zh-my/product/18946-tokyo-roppongi-hills-mori-tower-observation-deck-ticket-japan">kkday预订</a>，可提前一个月，93元</td><td>参考其他</td><td><a href="https://www.bring-you.info/zh-hans/afuri-ramen">AFURI阿夫利</a>: 拉面店</td><td>1-3小时</td><td><a href="https://www.bring-you.info/zh-hans/roppongi-hot-spots#spot9">【东京六本木景点】六本木之丘、夜景拍摄、逛街、美食、交通、一日游攻略</a></td></tr><tr><td>中心</td><td>中央区</td><td><a href="https://www.mafengwo.cn/poi/6151659.html">银座 銀座 / ぎんざ</a></td><td>逛街<br>主要街区: 銀座通り<br>四丁目</td><td>丸之内线-银座<br>银座线-银座</td><td>全年开放</td><td>无门票</td><td><a href="https://www.gotokyo.org/cn/destinations/central-tokyo/nihombashi/index.html">日本桥 日本橋 / にほんばし</a>: 江户时代，历史和现代的融合</td><td><a href="https://tabelog.com/tokyo/A1301/A130101/13228602/">银座八五</a>: 米其林，「无酱油」淡丽系拉面<br><a href="https://www.bring-you.info/zh-hans/ginzakagari">银座篝(gou)(かがり) 松露鸡白汤拉面</a>: 鸡白汤（鶏パイタン）拉面<br><a href="https://www.bigfang.tw/blog/post/hanayamaudon-ginza">五代目 花山乌冬 银座店</a>: 五公分宽的「鬼ひも川」</td><td>3小时</td><td><a href="https://www.bring-you.info/zh-hans/ginza#musteat">【银座景点】银座一日游逛街去：必逛购物百货公司 &amp; 美食餐厅 &amp; 下午茶甜点 &amp; 住宿推荐</a></td></tr><tr><td>中心</td><td>中央区</td><td><a href="https://www.gotokyo.org/cn/spot/65/index.html">筑地场外市场 築地場外市場 築地市場 / つきじしじょう </a></td><td>海鲜街，小吃</td><td>银座走路7分钟</td><td>全年开放</td><td>无门票</td><td>银座</td><td><a href="https://venuslin.tw/tamagoyaki-tsukiji">筑地山长玉子烧</a><br><a href="https://www.tsukiji.or.jp/shoplist/cat-b/cat-4/230/">吉澤商店 よしざわしょうてん</a>: 肉饼（6:00～13:00）<br><a href="https://tabelog.com/tokyo/A1313/A131301/13145358/">まぐろのみやこ</a>: 海鲜烧<br><a href="https://tabelog.com/tokyo/A1313/A131301/13180099/">そらつき</a>: 草莓大福</td><td>1-3小时</td><td>考虑到吃的东西多，建议早上来<br>参考<a href="https://www.youtube.com/watch?v=ImqrkgHIXGw">自由行视频</a>: 筑地场外市场 -&gt; 东京塔 -&gt; 银座篝</td></tr><tr><td>城南</td><td>世田谷区</td><td><a href="https://www.klook.com/zh-TW/blog/gotokuji-temple-tokyo/">豪德寺 ごうとくじ</a></td><td>充满猫的神社</td><td>千代田线-代代木上原 -&gt; odakyu line: 豪德寺</td><td>全年开放</td><td>无门票</td><td>附近好像没啥其他景点</td><td>参考其他</td><td>1小时，从中心出发时间半小时+</td><td></td></tr><tr><td>城南</td><td>世田谷区</td><td><a href="https://www.mafengwo.cn/poi/6151659.html">下北泽 下北沢 / しもきたざわ</a></td><td>复古安静的购物街道，文艺风</td><td>京王井之头线</td><td>全年开放</td><td>无门票</td><td>明治大学、东京大学</td><td><a href="https://tokyo.letsgojp.cn/archives/72489/">推荐美食</a>: <a href="https://tabelog.com/tokyo/A1318/A131802/13164953/">ポニピリカ: 异国风情汤咖哩</a><br><a href="https://tabelog.com/tokyo/A1318/A131802/13054105/">シティー カントリー シティ （CITY COUNTRY CITY）</a>: 民谣，意大利面，咖啡</td><td>1-2小时</td><td>适合中午下午逛</td></tr><tr><td>城南</td><td>品川区</td><td><a href="https://www.gltjp.com/zh-hant/directory/item/12810/">品川花海道</a></td><td>长2公里的花田</td><td>山手线-&gt;京滨东北线 大井町, 新宿出发1小时</td><td>全年开放</td><td>无门票</td><td>无</td><td><a href="https://www.gltjp.com/zh-hant/directory/item/10742/">東京洋食屋神田Grill Atre大井町店</a>: 洋食老店<br><a href="https://www.gltjp.com/zh-hant/directory/item/12914/">南品川茶箱</a>: 茶屋、甜品，日本茶: 深蒸煎茶; 草莓餡蜜<br><a href="https://www.gltjp.com/zh-hant/directory/item/10221/">Homemade Ramen麥苗</a>: 豚骨汤拉面</td><td>1小时</td><td></td></tr><tr><td>城南</td><td>大田区</td><td><a href="https://www.gotokyo.org/cn/spot/494/index.html">Jonanjima Seaside Park 城南岛海滨公园 城南島海浜公園 じょうなんじまかいひんこうえん</a></td><td>东京湾边缘，沙滩和飞机</td><td>山手线-&gt;京滨东北线 大大森 -&gt; 森32公交, 城南岛四丁目</td><td>全年开放</td><td>无门票</td><td>参考其他</td><td>参考其他</td><td>1-2小时</td><td></td></tr><tr><td>城西</td><td>中野区</td><td><a href="https://www.gotokyo.org/cn/spot/72/index.html">中野百老汇 中野ブロードウェイ</a></td><td>比秋叶原更安静的动漫周边店</td><td>宿08<br>东西线-中野</td><td>全年开放</td><td>无门票</td><td>无</td><td><a href="https://tabelog.com/tokyo/P000094/premiseLst/">参考tabelog</a>: 都比较普通</td><td>1-3小时</td><td></td></tr><tr><td>城北</td><td>板桥区</td><td><a href="https://www.gotokyo.org/cn/spot/ev046/index.html">板桥花火大会</a></td><td><a href="https://itabashihanabi.jp/">官网</a>: 7:00-8:30; <a href="https://itabashihanabi.jp/guide.html">荒天中止</a>, <a href="https://trip.iko-yo.net/events/1404">时隔四年</a>，约 1w3k 发</td><td><a href="https://itabashihanabi.jp/access.html">官方交通说明</a><br>河川敷（カセンシキ）: 从市区出发，银座线-&gt;中阳线-&gt;南武线-&gt;矢川</td><td>8月5日</td><td><a href="https://itabashihanabi.jp/paidseat.html">付费: 陸上競技場席</a>: 凳子 5500 日元</td><td>参考其他</td><td>参考其他</td><td>2小时</td><td><a href="https://cn.tripadvisor.com/Attraction_Review-g1066446-d8820262-Reviews-Itabashi_Fireworks-Itabashi_Tokyo_Tokyo_Prefecture_Kanto.html">观景免费的</a>: 河川敷, Kasenjikikouen Soccer Field<br>需要提前1-2个小时</td></tr><tr><td>城东</td><td>台东区</td><td><a href="https://www.bring-you.info/zh-hans/sensoji-temple">浅草寺 せんそうじ</a></td><td>浅草寺创建于628年，是东京都内最古老的寺院。东京都历史最早的寺院</td><td>银座线; 从住宿出发20分钟, 神田-&gt;浅草 6个站</td><td>全年开放</td><td><a href="https://www.bring-you.info/zh-hans/asakusa-hana-kimono">和服出租(需要提前预约)</a></td><td>路线建议: 雷门 → 接仲见世通（边吃边买约0.5~1hr）  → 穿过宝藏门 → 到浅草寺参拜 → 旁边的浅草神社 → 前往上野、阿美横町、谷中银座、晴空塔<br>雷门: 670公斤重, 1960年重建, 写着风雷神门，象征了两侧的风神和雷神<br><a href="https://www.gotokyo.org/cn/spot/73/index.html">仲见世通(なかみせどおり)</a>: 小吃，工艺品<br>宝藏门后的大草鞋，400公斤重<br>进入浅草寺之前: 把香炉（こうろ）的烟揽到自己身上<br><a href="https://japantravel.navitime.com/zh-cn/area/jp/guide/NTJhowto0142-zh-cn/">洗手</a>: 鞠躬-&gt;右手拿勺清洗左手，左手拿勺清洗右手-&gt;右手拿勺清洗左手-&gt;右手给左手盛水漱口（流过嘴唇就好了）-&gt; 剩下点水清洗左手 -&gt; 倒水，直立柄勺清洗柄勺 -&gt; 再次鞠躬<br>进入神社时尽量靠两边走，中间留给神明<br>参拜:因为是佛教寺院，因此进入山门前鞠躬一次即可，不用击掌<br>投入100元鞠躬-&gt;抽签<br>买御守<br>浅草神社, 1945年空袭中幸免于难 ｜ 参考其他</td><td><a href="https://www.bring-you.info/zh-hans/sensoji-temple">UNIQLO浅草概念店</a>: 浅草寺风格的寺庙</td><td>3小时</td><td></td></tr><tr><td>城东</td><td>台东区</td><td><a href="https://www.japan-travel.cn/spot/1673/">上野公园 上野公園 / うえのこうえん</a></td><td>交通枢纽区的公园，寺庙、各种美术馆和博物馆（东京国立博物馆、国立西洋美术馆、国立科学博物馆、上野动物园）、赏樱，日本的第一座公园</td><td>大江户线-上野御徒町，新宿出发35分钟</td><td>全年开放</td><td>无门票</td><td>阿美横丁、镰仓小町通、上野恩赐公园上野樱花祭</td><td>参考其他</td><td>1小时</td><td></td></tr><tr><td>城东</td><td>台东区</td><td><a href="https://www.japan-travel.cn/spot/1706/">雨横购物街 上野阿美横町 アメヤ横丁 アメヤよこちょう</a></td><td>曾经的黑市，现在的购物天堂</td><td>上野公园走路10分钟</td><td>全年开放</td><td>无门票</td><td><a href="https://www.bring-you.info/zh-hans/ame-yoko">参考</a><br>药妆店: OS drug（オーエスドラッグ）、松本清一店（薬 マツモトキヨシ）、Sundrug（サンドラッグ）<br><a href="https://www.daikokudrug.com/">大国药妆 大國藥妝</a><br><a href="https://bobby.tw/blog/post/228013178-%E3%80%90%E6%9D%B1%E4%BA%AC%E3%80%91%E4%B8%8A%E9%87%8E%E4%BA%8C%E6%9C%A8%E8%8F%93%E5%AD%90%E5%BF%85%E8%B2%B7%EF%BC%9A%E6%9C%80%E5%A4%AF%E6%9A%A2%E9%8A%B7%E6%B8%85%E5%96%AE%EF%BC%8C">二木的菓子 二木の菓子</a>: Alfort帆船餅乾（巧克力）、明治果汁軟糖（100%果汁）、ORIHIRO蒟蒻果凍、iFactory梅干片、UHA味覺糖、日清兵衛豆皮烏龍麵、干贝</td><td><a href="https://www.bring-you.info/zh-hans/yakitori-bunraku">やきとり文乐</a>: 烤鸡</td><td>1-2小时</td><td></td></tr><tr><td>城东</td><td>墨田区</td><td><a href="https://www.gotokyo.org/cn/destinations/eastern-tokyo/skytree-and-around/index.html">东京天空树 东京晴空塔 東京スカイツリー とうきょうスカイツリー</a></td><td>世界第三高，可远观富士山</td><td>从浅草寺出发走路17分钟<br>半藏门线-押上<br>浅草线-押上</td><td>10:00~21:00</td><td><a href="https://www.tokyo-skytree.jp/cn_s/ticket/individual/">官方在线购买</a>, 比线下优惠300日元<br>天望回廊+天望甲板: 2700<br>天望甲板: 1800</td><td>参考其他</td><td>参考其他</td><td>1-2小时</td><td></td></tr><tr><td>城东</td><td>墨田区</td><td><a href="https://www.tokyo-solamachi.jp/cn/">晴空街道 晴空塔城 東京スカイツリータウン Tokyo Skytree Town</a></td><td>商业中心</td><td>东京树旁</td><td>全年开放</td><td>无门票</td><td>晴空街道3楼: 西馆（JUMP SHOP 等动漫专卖店、美食街）、东馆（Uniqlo等平价品牌）<br>4楼: 纪念品</td><td>参考<a href="https://www.tokyo-solamachi.jp/cn/restaurant/">官方推荐</a></td><td>1小时</td><td></td></tr><tr><td>城东</td><td>墨田区</td><td><a href="https://www.gotokyo.org/cn/spot/1745/index.html">江户东京博物馆 東京都江戸東京博物館 とうきょうとえどとうきょうはくぶつかん</a></td><td>江户时代的文物展示</td><td>大江户线-Ryogoku Sta.<br>门33-TOEI-RYŌGOKU-EKI-MAE</td><td>除周一</td><td>600日元门票</td><td>参考其他</td><td>参考其他</td><td>1-2小时</td><td></td></tr><tr><td>城东</td><td>江户川区</td><td><a href="https://www.gltjp.com/zh-hans/directory/item/13909/">Diamond and Flower Ferris Wheel 钻石与花之大摩天轮 ダイヤと花の大観覧车</a></td><td>日本最大的摩天轮，每圈17分钟，东京的右下角</td><td>新宿出发: 新宿线-市谷-&gt;有乐町线-新木场-&gt;京叶线-葛西临海公园</td><td>平时10:00 - 19:00 节假日 10:00 - 20:00</td><td>800日元</td><td>无</td><td>无</td><td>1小时</td><td></td></tr></tbody></table><h3 id="各个景区图片和评论参考"><a href="#各个景区图片和评论参考" class="headerlink" title="各个景区图片和评论参考"></a>各个景区图片和评论参考</h3><h4 id="新宿-新宿御苑"><a href="#新宿-新宿御苑" class="headerlink" title="新宿-新宿御苑"></a>新宿-新宿御苑</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-gyoen-01.jpeg" alt="新宿御苑"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-gyoen-02.jpeg" alt="新宿御苑"></p><h4 id="新宿-新宿黄金街"><a href="#新宿-新宿黄金街" class="headerlink" title="新宿-新宿黄金街"></a>新宿-新宿黄金街</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-shinjukugoruden-01.jpeg" alt="新宿黄金街"></p><h4 id="新宿-歌舞伎町"><a href="#新宿-歌舞伎町" class="headerlink" title="新宿-歌舞伎町"></a>新宿-歌舞伎町</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-kabukicho-01.jpeg" alt="歌舞伎町"></p><h4 id="千代田-秋叶原"><a href="#千代田-秋叶原" class="headerlink" title="千代田-秋叶原"></a>千代田-秋叶原</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-akihabara-01.jpeg" alt="秋叶原"></p><h4 id="千代田-皇居"><a href="#千代田-皇居" class="headerlink" title="千代田-皇居"></a>千代田-皇居</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-koukyo-01.jpeg" alt="皇居"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-koukyo-02.webp" alt="皇居"></p><h4 id="涩谷-明治神宫"><a href="#涩谷-明治神宫" class="headerlink" title="涩谷-明治神宫"></a>涩谷-明治神宫</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-meijijinguu-01.jpeg" alt="明治神宫"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-meijijinguu-02.jpeg" alt="明治神宫"></p><h4 id="涩谷-渋谷スクランブル交差点"><a href="#涩谷-渋谷スクランブル交差点" class="headerlink" title="涩谷-渋谷スクランブル交差点"></a>涩谷-渋谷スクランブル交差点</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-scramble-01.jpeg" alt="涩谷全向十字路口"></p><h4 id="涩谷-忠犬ハチ公像"><a href="#涩谷-忠犬ハチ公像" class="headerlink" title="涩谷-忠犬ハチ公像"></a>涩谷-忠犬ハチ公像</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-chukenhachi-01.jpeg" alt="忠犬ハチ公像"></p><h4 id="涩谷-竹下通り"><a href="#涩谷-竹下通り" class="headerlink" title="涩谷-竹下通り"></a>涩谷-竹下通り</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-takeshitadoori-01.jpeg" alt="竹下通り"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-takeshitadoori-02.jpeg" alt="竹下通り"></p><p>Totti Candy Factory</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-takeshitadoori-03.jpeg" alt="竹下通り"></p><p>MARION Crepes</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-takeshitadoori-04.jpeg" alt="竹下通り"></p><h4 id="港区-东京塔"><a href="#港区-东京塔" class="headerlink" title="港区-东京塔"></a>港区-东京塔</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-tokyotawa-01.webp" alt="东京塔"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-tokyotawa-02.jpeg" alt="东京塔"></p><h4 id="港区-芝公园"><a href="#港区-芝公园" class="headerlink" title="港区-芝公园"></a>港区-芝公园</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-shibakouen-01.jpeg" alt="芝公园"></p><h4 id="港区-台场"><a href="#港区-台场" class="headerlink" title="港区-台场"></a>港区-台场</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-daiba-01.jpeg" alt="台场"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-daiba-02.jpeg" alt="台场"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-daiba-03.jpeg" alt="台场"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-daiba-04.jpeg" alt="台场"></p><h4 id="中央区-银座"><a href="#中央区-银座" class="headerlink" title="中央区-银座"></a>中央区-银座</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-ginza-01.webp" alt="银座"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-ginza-02.jpeg" alt="银座"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-nihonbashi-01.jpeg" alt="日本桥"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-nihonbashi-02.jpeg" alt="日本桥"></p><h4 id="中央区-筑地场外市场"><a href="#中央区-筑地场外市场" class="headerlink" title="中央区-筑地场外市场"></a>中央区-筑地场外市场</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-tukijishi-01.jpeg" alt="築地場外市場"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-tukijishi-02.jpeg" alt="築地場外市場"></p><h4 id="千代田区-豪德寺"><a href="#千代田区-豪德寺" class="headerlink" title="千代田区-豪德寺"></a>千代田区-豪德寺</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-goutokuji-01.jpeg" alt="豪德寺"></p><h4 id="千代田区-下北泽"><a href="#千代田区-下北泽" class="headerlink" title="千代田区-下北泽"></a>千代田区-下北泽</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-shimokitazawa-01.jpeg" alt="下北泽"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-shimokitazawa-02.jpeg" alt="下北泽"></p><h4 id="板桥区-板桥花火大会"><a href="#板桥区-板桥花火大会" class="headerlink" title="板桥区-板桥花火大会"></a>板桥区-板桥花火大会</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-itabashi-hanabitaikai-01.jpeg" alt="板桥花火大会"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-itabashi-hanabitaikai-02.png" alt="板桥花火大会"></p><h4 id="台东区-浅草寺"><a href="#台东区-浅草寺" class="headerlink" title="台东区-浅草寺"></a>台东区-浅草寺</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-sensouji-01.jpeg" alt="浅草寺"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-sensouji-02.jpeg" alt="浅草寺"></p><h4 id="台东区-上野公园"><a href="#台东区-上野公园" class="headerlink" title="台东区-上野公园"></a>台东区-上野公园</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-uenokouen-01.webp" alt="上野公园"></p><h4 id="台东区-上野阿美横町"><a href="#台东区-上野阿美横町" class="headerlink" title="台东区-上野阿美横町"></a>台东区-上野阿美横町</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-ameya-01.jpeg" alt="上野阿美横町"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-ameya-02.jpeg" alt="上野阿美横町"></p><h4 id="墨田区-东京天空树"><a href="#墨田区-东京天空树" class="headerlink" title="墨田区-东京天空树"></a>墨田区-东京天空树</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-skytree-01.jpeg" alt="东京天空树"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-skytree-02.jpeg" alt="东京天空树"></p><h4 id="墨田区-晴空塔城"><a href="#墨田区-晴空塔城" class="headerlink" title="墨田区-晴空塔城"></a>墨田区-晴空塔城</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-skytree-town-01.jpeg" alt="晴空塔城"></p><h4 id="墨田区-東京都江戸東京博物館"><a href="#墨田区-東京都江戸東京博物館" class="headerlink" title="墨田区-東京都江戸東京博物館"></a>墨田区-東京都江戸東京博物館</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-tokyohakubutukan-01.jpeg" alt="東京都江戸東京博物館"></p><h4 id="江户川区-钻石与花之大摩天轮"><a href="#江户川区-钻石与花之大摩天轮" class="headerlink" title="江户川区-钻石与花之大摩天轮"></a>江户川区-钻石与花之大摩天轮</h4><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-diamondkanlansha-01.jpeg" alt="钻石与花之大摩天轮"></p><h3 id="其他非必逛-未整理景区"><a href="#其他非必逛-未整理景区" class="headerlink" title="其他非必逛/未整理景区"></a>其他非必逛/未整理景区</h3><p>新宿区<br><a href="https://www.gltjp.com/zh-hans/directory/item/10148/">东京都厅观景台</a><br>原因: 开放时间非常少: 每月第1・第3个星期二，观景台</p><p><a href="https://cn.tripadvisor.com/Attraction_Review-g1066457-d1373765-Reviews-Meijijingu_Gaien-Shinjuku_Tokyo_Tokyo_Prefecture_Kanto.html">明治神宫外苑</a><br>原因: 公园类型，赏银杏，秋季比较适合</p><p><a href="https://cn.tripadvisor.com/Attraction_Review-g14133673-d1173749-Reviews-Omoide_Yokocho-Nishishinjuku_Shinjuku_Tokyo_Tokyo_Prefecture_Kanto.html">新宿西口照相机街</a><br>原因: 逛街类型</p><p><a href="https://cn.tripadvisor.com/Attraction_Review-g14133673-d1594916-Reviews-Shinjuku_Chuo_Park-Nishishinjuku_Shinjuku_Tokyo_Tokyo_Prefecture_Kanto.html">新宿中央公园</a><br>公园</p><p>千代田区</p><p><a href="https://www.mafengwo.cn/gonglve/ziyouxing/283852.html">东京站</a><br>最繁忙车站，很复杂，可以购物，打个卡就好，周围的景点适合逛（皇居外苑）</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-tokyoeki-01.webp" alt="东京站"></p><p><a href="https://cn.tripadvisor.com/Attraction_Review-g1066443-d555799-Reviews-Yasukuni_Shrine-Chiyoda_Tokyo_Tokyo_Prefecture_Kanto.html">靖国神社</a><br>你懂的</p><p><a href="https://ikidane-nippon.com/zh-Hans/spots/nippon-budokan">日本武道馆</a><br>竞技场，演唱会</p><p>涩谷区<br><a href="https://cn.tripadvisor.com/Attraction_Review-g1066456-d561514-Reviews-Yoyogi_Park-Shibuya_Tokyo_Tokyo_Prefecture_Kanto.html">代代木公园</a></p><p>港区</p><p><a href="https://cn.tripadvisor.com/Attraction_Review-g14129743-d1574646-Reviews-Tokyo_Midtown-Akasaka_Minato_Tokyo_Tokyo_Prefecture_Kanto.html">东京中城</a><br>购物中心，奢侈品</p><p>中央区</p><p><a href="https://cn.tripadvisor.com/Attraction_Review-g14129573-d1373683-Reviews-Kabukiza_Theater-Ginza_Chuo_Tokyo_Tokyo_Prefecture_Kanto.html">歌舞伎剧场</a></p><p><a href="https://www.japan-travel.cn/spot/1653/">滨离宫恩赐庭园</a><br>曾经的皇家庭园</p><p>文京区</p><p><a href="https://www.gotokyo.org/cn/spot/22/index.html">六义园</a><br>江户代表性回游式假山泉水庭园</p><p><a href="https://www.gotokyo.org/cn/spot/24/index.html">小石川后乐园 小石川後楽園</a><br>东京最美的日本庭园</p><p><a href="https://www.gotokyo.org/tc/destinations/central-tokyo/tokyo-dome-and-around/index.html">东京巨蛋</a><br>体育项目，餐厅</p><p>世田谷区<br><a href="https://www.gotokyo.org/cn/spot/901/index.html">Kinuta Park 砧公园 砧公園 / きぬたこうえん</a><br>840棵樱花树</p><p>目黑区</p><p><a href="https://topmuseum.jp/chi/contents/pages/about_history.html">东京摄影美术馆</a><br>摄影和影像作品的综合性美术馆</p><p><a href="https://www.aquarium.gr.jp/">品川水族馆</a><br>水族馆<br>门票: <a href="https://www.klook.com/zh-CN/activity/5609-aqua-park-shinagawa-ticket-tokyo/">klook</a>、<a href="https://www.kkday.com/zh-cn/product/18689-tokyo-maxell-aqua-park-shinagawa-ticket-japan">kkday</a></p><p>杉并区</p><p><a href="https://cn.tripadvisor.com/Attraction_Review-g1066458-d1594552-Reviews-Wadabori_Park-Suginami_Tokyo_Tokyo_Prefecture_Kanto.html">Wadabori Park 和田堀公園</a><br>赏樱</p><p>练马区</p><p><a href="https://www.gotokyo.org/cn/spot/656/index.html">东京千寻美术馆 ちひろ美術館</a><br>水彩画主题展，美术作品</p><p><a href="https://www.gotokyo.org/cn/spot/433/index.html">石神井公园</a><br>东京最大的绿地, 新宿40分钟</p><p>荒川区</p><p><a href="https://www.gotokyo.org/jp/destinations/northern-tokyo/nippori/index.html">日暮里繊維街 日暮里ガイド</a><br>购物</p><p>丰岛区<br><a href="https://cn.tripadvisor.com/Attraction_Review-g1066460-d1425386-Reviews-Sunshine_Aquarium-Toshima_Tokyo_Tokyo_Prefecture_Kanto.html">阳光水族馆</a></p><p>台东区<br><a href="https://cn.tripadvisor.com/Attraction_Review-g14134311-d2492312-Reviews-Asakusa_Shrine-Asakusa_Taito_Tokyo_Tokyo_Prefecture_Kanto.html">浅草神社</a><br>可以体验和服</p><p><a href="https://www.japan-travel.cn/spot/663/">东京国立博物馆</a><br>日本艺术、其他国家的文物, <a href="https://www.mafengwo.cn/poi/7408.html">东洋馆</a>中展示的大部分中国的，如<a href="https://zh.wikipedia.org/zh-sg/%E7%A5%AD%E5%A7%AA%E6%96%87%E7%A8%BF">祭侄文稿</a></p><p>丰岛区</p><p><a href="https://www.gltjp.com/zh-hans/directory/item/10844/">目白庭园</a><br>典型日本庭院</p><p>参考资料:</p><p><a href="https://zhuanlan.zhihu.com/p/457227817">你了解东京吗？全方位详解日本东京23个区</a></p><p><a href="https://cn.tripadvisor.com/Attractions-g1066444-Activities-a_allAttractions.true-Chuo_Tokyo_Tokyo_Prefecture_Kanto.html">中央区景点玩乐</a></p><p><a href="https://travo.guide/japan/tokyo/best-attractions-in-minato/">【2023東京旅遊攻略】東京港區熱門景點推薦 (東京鐵塔、台場、六本木之丘)</a></p><p><a href="https://zhuanlan.zhihu.com/p/429339891">东京大田区，这些漂亮的小众拍照景点，不要错过</a></p><p>新宿区</p><p><a href="https://cn.tripadvisor.com/Attractions-g1066457-Activities-Shinjuku_Tokyo_Tokyo_Prefecture_Kanto.html">新宿区景点玩乐</a></p><p><a href="https://livejapan.com/zh-cn/in-tokyo/in-pref-tokyo/in-shinjuku/article-a0003768/">新宿散策必备！新宿各区域必访推荐景点指南</a></p><p>涩谷区</p><p><a href="https://www.bring-you.info/zh-hans/harajuku">【原宿逛街地图】原宿、竹下通好逛平价潮流服饰&amp;美食攻略，东京年轻人的购物景点</a></p><p><a href="https://tabelog.com/matome/22451/">tabelog-竹下通りで人気の食べ物！食べ歩き・イートイングルメ20選</a></p><p><a href="https://cn.tripadvisor.com/Tourism-g1066854-Shinagawa_Tokyo_Tokyo_Prefecture_Kanto-Vacations.html">品川区</a></p><p><a href="https://tokyo.letsgojp.cn/archives/525311/">东京「练马区」景点推荐！朝圣动漫圣地、松屋创始店、哈利波特主题乐园</a></p><p><a href="https://newtaipei.travel/zh-cn/regional/sightseeing/1">newtaipei-板桥</a></p><p><a href="https://www.adachikanko.net/zh-CHS/recommend/adachi_spot">足立区的观光路线和景点介绍</a></p><p>目黑区<br><a href="https://resources.realestate.co.jp/zh_CN/area-guide/%E7%9B%AE%E9%BB%91%E5%8C%BA%E6%8C%87%E5%8D%97-%E4%B8%9C%E4%BA%AC%E5%9C%B0%E5%8C%BA%E6%8C%87%E5%8D%97/">樱花道</a></p><p><a href="http://www.bytravel.cn/view/top10/index4091.html">台东区十大旅游景点</a></p><p><a href="https://www.gltjp.com/zh-hans/article/item/20114/">观光&amp;体验&amp;购物&amp;美食！东京都江东区观光指南！</a></p><p><a href="http://digjapan.travel/zh_cn/digest/katsushika.html">东 京 葛 饰</a></p><h2 id="东京地图和区域介绍"><a href="#东京地图和区域介绍" class="headerlink" title="东京地图和区域介绍"></a>东京地图和区域介绍</h2><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-area-03.jpeg" alt="东京23区治安地图"></p><p><a href="https://tokyo.letsgojp.com/archives/459880/">参考: 東京23區「治安最差」是哪區？喜歡一人旅行的要注意！</a></p><h3 id="23区"><a href="#23区" class="headerlink" title="23区"></a>23区</h3><h4 id="基本划分"><a href="#基本划分" class="headerlink" title="基本划分"></a>基本划分</h4><p>城南地区<br>世田谷区、目黑区、品川区、大田区</p><p>城西地区<br>杉並区、中野区</p><p>都心六区<br>新宿区、千代田区、涩谷区、港区、中央区、文京区</p><p>城北地区<br>练马区、板桥区、北区、豊岛区</p><p>城东地区<br>足立区、荒川区、台东区、墨田区、江东区、葛饰区、江户川区</p><p><a href="https://zhuanlan.zhihu.com/p/355390878">日本东京城南地区、城西地区（解析）</a></p><p><a href="https://zhuanlan.zhihu.com/p/357462159">日本东京城北地区、城东地区（解析）</a></p><h4 id="表格整理"><a href="#表格整理" class="headerlink" title="表格整理"></a>表格整理</h4><p><a href="https://www.zhihu.com/question/24494333">东京各区的特点是怎样的？</a></p><table><thead><tr><th>方向</th><th>区域</th><th>特点</th><th>主要景点</th></tr></thead><tbody><tr><td>中心<div style="width: 30pt"></td><td>新宿区</td><td>交通枢纽，商业街，不眠</td><td>歌舞伎町，新宿车站</td></tr><tr><td>中心</td><td>千代田区</td><td>大部分行政机关所在地，大型企业</td><td>东京展、秋叶原、日本武道馆</td></tr><tr><td>中心</td><td>涩谷区</td><td>商业百货</td><td>井ノ頭通り（十字路口）</td></tr><tr><td>中心</td><td>港区</td><td>最有逼格，电视台总部</td><td>六本木，东京塔，芝公园</td></tr><tr><td>中心</td><td>中央区</td><td>位于东京中心，经济中心</td><td>日本桥、银座</td></tr><tr><td>中心</td><td>文京区</td><td>文化和住宅</td><td>东京大学，东京巨蛋</td></tr><tr><td>城南</td><td>世田谷区</td><td>人口最多，密集住宅</td><td>豪德寺，下北泽</td></tr><tr><td>城南</td><td>目黑区</td><td>住宅，樱花</td><td>东京摄影美术馆，品川水族馆</td></tr><tr><td>城南</td><td>品川区</td><td>港口</td><td>品川花海道</td></tr><tr><td>城南</td><td>大田区</td><td>机场，高档住宅</td><td>城南岛海滨公园</td></tr><tr><td>城东</td><td>足立区</td><td>人气不高，治安不好</td><td>タカラ湯 Takarayu</td></tr><tr><td>城东</td><td>荒川区</td><td>穷，路面电车</td><td>Nippori Fabric Town</td></tr><tr><td>城东</td><td>台东区</td><td>以前也穷，日本人不想住</td><td>浅草寺，上野公园，上野阿美横町</td></tr><tr><td>城东</td><td>墨田区</td><td>相扑文化</td><td>江户东京博物馆，东京晴空塔</td></tr><tr><td>城东</td><td>江东区</td><td>东南面，填海，年轻人喜欢</td><td>丰洲市场，森大厦数位艺术美术馆：teamLab无界，日本科学未来馆</td></tr><tr><td>城东</td><td>葛饰区</td><td>老东京，安静，漫画家</td><td>葛饰纳凉花火大会，水元公园</td></tr><tr><td>城东</td><td>江户川区</td><td>外国人多</td><td>葛西临海水族园、东京葛西临海公园、钻石与花之大摩天轮</td></tr><tr><td>城西</td><td>杉並区</td><td>高级住宅，文化底蕴</td><td>大田黑公園、大宮八幡宮</td></tr><tr><td>城西</td><td>中野区</td><td>交通非常方便，人口密度高，低层住宅</td><td>中野百老匯、薬師あいロード商店街、昭和新道</td></tr></tbody></table><h4 id="千代田区"><a href="#千代田区" class="headerlink" title="千代田区"></a>千代田区</h4><p><a href="https://zh.wikipedia.org/wiki/%E5%8D%83%E4%BB%A3%E7%94%B0%E5%8D%80">千代田区</a>（日语：千代田区／ちよだく Chiyoda ku */?）是日本东京都的特别区之一，位于东京都区部的中心位置，在1947年（昭和22年）3月15日由麹町区与神田区合并而来，名称来自于江户城的别名“千代田城”。日本国会、首相官邸、最高法院、大部分中央行政机关，以及天皇住所皆座落于此，而区内的<strong>大手町、丸之内、有乐町</strong>等商圈，是许多日本大型企业总部的聚集地，因而使该区成为日本首屈一指的政治与经济中枢。<strong>东京站、秋叶原</strong>、靖国神社、神保町古书街、<strong>日本武道馆</strong>等著名景点亦位于该区内，该区住有许多政治家及公务员</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-chiyoda-01.png" alt="千代田区"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-chiyoda-02.webp" alt="千代田区"></p><h4 id="中央区"><a href="#中央区" class="headerlink" title="中央区"></a>中央区</h4><p><a href="https://zh.wikipedia.org/zh-sg/%E4%B8%AD%E5%A4%AE%E5%8D%80_(%E6%9D%B1%E4%BA%AC%E9%83%BD)">中央区</a>（日语：中央区／ちゅうおうく Chūō ku */?）是日本东京都内的23个特别区之一，由于其位于23区的正中央位置之故，因而得名。</p><p>中央区不仅地理位置处于东京的中心地，更是日本经济、信息、商业等的中心。著名的日本银行、东京证券交易所等日本经济核心都位于中央区。除此之外，包括银座、大型布庄与百货公司总社聚集的<strong>日本桥</strong>、以及以鱼货市场闻名的筑地皆位于本区范围之内。</p><p>大约位于东京23区的中央。区内有日本桥、八重洲・筑地、月岛、银座等街区。</p><p>面积为10.094km²，是东京23区中第二小的特别区，仅次于台东区。</p><p>人口130,483人，次于千代田区（2013年6月1日）。（2013年4月定居人口达13万人，是1967年以来的新高）区内有日本桥与银座等大型商业区域，让日间人口达60.6万人。此外，本区商业强烈，高楼林立，住宅方面以高层公寓与团地等集合住宅为主，独户低层住宅或低层分租公寓较为少见（多在南部的佃和月岛附近）。</p><p>道路呈现棋盘状，与他区相比较为整齐。</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-chuo-01.png" alt="中央区"></p><h4 id="港区"><a href="#港区" class="headerlink" title="港区"></a>港区</h4><p><a href="https://zhuanlan.zhihu.com/p/508954033">港区</a>（日语：港区 みなとく Minato ku */?）是日本东京都23个特别区之一，位于东京都心东南方、紧邻东京湾，以聚集诸多外国大使馆、<strong>国际气氛浓厚</strong>著称。区内较著名的商圈，包括聚集众多企业的赤坂、新桥、滨松町等商务街，外国观光客与酒吧云集的<strong>六本木</strong>，高级住宅区的麻布和白金台，高级商店街的青山，新兴观光区台场、以及进入2002年以来逐步开发完成的三个大型复合开发区——六本木新城、东京中城、以及汐留SIO-SITE。东京地标之一的东京铁塔亦位于区内</p><p>港区设立于1947年，由旧芝区、旧麻布区、旧赤坂区三区合并诞生。港区位于东京23区中央偏南，是拥有最多企业总部的区域，可说是日本企业的中心。其中、虎之门、新桥、芝为重要的办公商区，经济活动十分活跃。青山、赤坂等商业地区，六本木等娱乐重镇，麻布、白金台等住宅区，汐留、台场等大规模开发区，为港区展现各种不同风貌。东宫御所、迎宾馆（赤坂离宫）与芝公园、白金台的国立科学博物馆附属自然教育园等绿色地带带来丰富的自然环境。驻日大使馆与外资企业的大量进驻，让本地的外国人居住者比例达一成之多</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-minato-01.png" alt="港区"></p><h4 id="新宿"><a href="#新宿" class="headerlink" title="新宿"></a>新宿</h4><p><a href="https://zh.wikipedia.org/zh-sg/%E6%96%B0%E5%AE%BF%E5%8D%80">新宿区</a>（日语：新宿区／しんじゅくく Shinjuku ku */?）是日本东京都的特别区之一，为东京都厅（都政府）所在地。区内的新宿站为东京主要的交通枢纽之一，而以新宿站为中心的商圈（包括新宿副都心），为东京乃至于整个日本首要的中心商业区</p><p>新宿区位在东京市区内中央偏西的地带，区内的新宿车站是东京市区西侧最重要的交通要冲之一，包括JR山手线、JR中央本线、JR总武线与私铁公司京王电铁、小田急电铁的总部都位在新宿车站，周围还有数条地铁线行经。日本各地往来东京的长途巴士也大多停靠新宿，或以新宿为起站、终站。</p><p>以新宿车站为中心，以西（新宿西口）的西新宿是东京都政府在战后规划的中心商业区，又称为“新宿新都心”，东京都的行政中心东京都厅舍就位在此处，除此之外周遭还包围了许多大型企业总部所使用的摩天大楼，此超高层建筑群是东京最早形成的类似区域。新宿车站南口方向则是百货公司与商店街云集的商业地区，其中最著名的包括连锁百货公司高岛屋的旗舰店“高岛屋时代广场”（Takashimaya Times Square）与知名日本连锁书店纪伊国屋的总店。</p><p>相对于西新宿的现代化与整齐，新宿车站以东的东新宿地区（新宿东口），则是最热闹也是最混乱的传统商业街地区，其中，闻名海外的红灯区——<strong>歌舞伎町</strong>，便位于新宿东口范围内。</p><p>在非常受欢迎的日本漫画《城市猎人》中，就是以新宿车站东口公园作为最主要的舞台。</p><p>2016年大卖的动画电影《你的名字。》中，新海诚导演从新宿区多处景点取景，如：新宿警察署地景、<strong>新宿车站</strong>、千駄谷站、信浓町陆桥、四谷须贺町等</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-shinjuku-01.png" alt="新宿"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-shinjuku-02.png" alt="新宿"></p><h4 id="文京区"><a href="#文京区" class="headerlink" title="文京区"></a>文京区</h4><p><a href="https://zhuanlan.zhihu.com/p/510447669">文京区</a>（日语：文京区／ぶんきょうく Bunkyō ku */?）是日本东京都的23个特别区之一，划分上属于23区西部，实际位于中央偏北的位置，现任区长是成泽广修[2]。文京区的面积11.31平方千米，在23区中位列倒数第4，占东京都区部的50分之一[3]。</p><p>该区以文化教育机关和住宅街区为主，有“文之京”的美名。从明治时期以来，这里居住过夏目漱石、森鸥外、宫泽贤治等著名的文人、学者和政治家。除此以外出版、印刷业也很繁盛，并设有先进医疗设施和大型医院。区内著名的设施包括日本最高学府东京大学本部（本乡校区）、<strong>东京巨蛋</strong>和讲道馆等，六义园、后乐园和小石川植物园等古老而宽广的日本庭园也坐落于文京区内</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-bunkyo-01.png" alt="文京区"></p><h4 id="品川区"><a href="#品川区" class="headerlink" title="品川区"></a>品川区</h4><p><a href="https://zhuanlan.zhihu.com/p/506260123">品川区</a>（日语：品川区 しながわく Shinagawa ku */?）是日本东京都的特别区之一，位于东京都的南部，东濒东京湾，为东京市区聚集较多<strong>港口及工业设施</strong>的地带。名称是由境内河川目黑川的别名“品川”而来</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-shinagawa-01.jpeg" alt="品川"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-shinagawa-02.png" alt="品川"></p><h4 id="目黑区"><a href="#目黑区" class="headerlink" title="目黑区"></a>目黑区</h4><p><a href="https://zhuanlan.zhihu.com/p/513564096">目黑区</a>（日语：目黒区／めぐろく Meguro ku */?）是日本东京都下辖的特别区之一<br>东京23区西南部，主要为住宅区</p><p>目黑区位于东京的中央六区的西侧、涩谷区的南侧，是东京主要的住宅行政区之一。目黑区内有许多以低调高级住宅区而闻名的社区，例如柿之木坂、碑文谷、青叶台和驹场，以及自由之丘和中目黑等住商混合的区域。目黑区以其宁静悠闲的居住环境、富饶绿地、池塘和河川以及靠近涩谷、代官山、惠比寿和六本木的便利交通位置，成为居住在东京的欧美人士的人气居住选择</p><p>目黑区最广为人知的是目黑川沿岸种植的<strong>樱花树道</strong>，在一年一度的樱花季，河川两旁的人行道上挤满了前来赏樱花盛开的游客。目黑川沿岸也是受欢迎的高档住宅区，这里可以找到许多适合外国人居住的买/租房选择。 例如，距离目黑车站仅7分钟路程、位于目黑川畔、25层高的高层塔楼公寓MFPR目黑塔（MFPR目黒タワー）。目黑川畔沿岸还有许多中低层的公寓楼，很适合外国人的生活</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-meguro-01.png" alt="目黑"></p><h4 id="大田区"><a href="#大田区" class="headerlink" title="大田区"></a>大田区</h4><p><a href="https://zh.wikipedia.org/wiki/%E5%A4%A7%E7%94%B0%E5%8C%BA">大田区</a>（日语：大田区／おおたく Ōta ku */?）是日本东京都的特别区之一，位于东京都<strong>东南、正对东京湾</strong>。自古以来是捕鱼业发达的地区、大正时代以后形成小作坊的聚集地、至今形成了京滨工业地带。区内的东京国际机场（羽田机场）是东京的空中门户。</p><p>日本著名的高级住宅区田园调布的部分地区位于该区西部。</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-oota-02.png" alt="大田"></p><h4 id="世田谷区"><a href="#世田谷区" class="headerlink" title="世田谷区"></a>世田谷区</h4><p><a href="https://zhuanlan.zhihu.com/p/514865103">世田谷区</a>（日语：世田谷区／せたがやく Setagaya ku */?），是日本东京都区部之一，位于东京23区的<strong>西南</strong>部，以其居住环境良好的住宅区而闻名。世田谷区为东京都特别区中面积第2大，也是全日本人口最多的特别区；人口密度亦排在第14位。</p><p>世田谷区是东京23区中人口最多、面积第二大的行政区。不仅日本人，对于外国人来说也是广为人知的高档<strong>住宅区</strong>所在地，距离新宿和涩谷的车程极短，非常方便通往东京市中心。世田谷区位于东京23区的西南部，其南侧的多摩川邻接神奈川县，在地理上和象征意义上是东京郊区与市中心的边界线。</p><p>世田谷区由北到南可以分为五个地域：乌山、北泽、砧、世田谷和玉川。世田谷区域相当辽阔，从充满文青艺术气息的下北泽个性商店街（北泽地域）、寺庙群聚有如小京都的千岁乌山（乌山地域）、东京人理想居住街区的三轩茶屋（世田谷地域）、东京知名高级住宅区的成城（砧地域）、到乐天总部所在地、商业购物大楼、家庭社区和自然公园一应具全的二子玉川（玉川地域）。</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-setagaya-01.jpeg" alt="世田谷区"></p><h4 id="涩谷区"><a href="#涩谷区" class="headerlink" title="涩谷区"></a>涩谷区</h4><p><a href="https://zh.wikipedia.org/zh-sg/%E6%BE%80%E8%B0%B7%E5%8D%80">涩谷区</a>（日语：渋谷区／しぶやく Shibuya ku */?）[1]是日本东京都的特别区之一，其名称源自于位于该区<strong>中央</strong>、以涩谷站为中心的涩谷地区。</p><p>与新宿、池袋等因为位处于交通要冲上而发展出的商业街相同，涩谷也是因为位居山手线重要转运站的地位而发展成今日的盛况。其为东急集团的大本营，且各种商业活动兴旺，这尤其表现在涩谷站忠犬八公出口处，著名的百货店、时装专卖店、饮食店、咖啡店、休闲设施、特种行业等密集如云，是与新宿同样并列为“24小时不眠之街”的地区。另外，以西武百货、东急百货、巴而可（パルコ）与109百货为中心，再加上周边许多服饰店所构成的商店街街区，是最受东京年轻消费族群喜爱的购物胜地，向来拥有“年轻人之街”之美称，也使得涩谷成为日本国内外各种流行风尚的发源地。而<strong>涩谷车站八公口外</strong>、具有行人保护时相配置、属井之头通（<strong>井ノ頭通り いのかしらどおり</strong>）一部分的大型五叉路口，由于超高的行人穿越量经常被誉称为“全世界最大的交叉路口”，其庞大的行人流通量成为许多观光客参访与摄影、拍照的圣地，也经常出现在电视或电影剧情中，成为东京的象征</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-shibuya-01.png" alt="涩谷区"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-shibuya-02.png" alt="涩谷区"></p><p><a href="https://bienetrevoyage.blogspot.com/2016/04/shibuya-map.html">图片来源</a></p><h4 id="中野区"><a href="#中野区" class="headerlink" title="中野区"></a>中野区</h4><p><a href="https://zh.wikipedia.org/zh-sg/%E4%B8%AD%E9%87%8E%E5%8D%80">中野区</a>（日语：中野区／なかのく Nakano ku */?）是日本人口密度最高的底层住宅区域，位处东京都<strong>西部</strong>。区内产业主要以<strong>第三产业的服务业</strong>为中心，而事业所及从业人员个数则处于东京23区的中下位。</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-nakano-01.png" alt="中野区"></p><h4 id="杉并区"><a href="#杉并区" class="headerlink" title="杉并区"></a>杉并区</h4><p><a href="https://zhuanlan.zhihu.com/p/514857580">杉并区</a>（すぎなみく）是东京23个特别区中最内陆的行政区之一，它被夹在同属属于城西地区的练马区和世田谷区之间。对于在东京市区上班或念书的人来说，此区是一个相当不错的住宅区选择。因为 JR中央线上的许多车站位于杉并区（例如荻洼、阿佐谷、高圆寺）。</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-suginami-01.png" alt="中野区"></p><h4 id="丰岛区"><a href="#丰岛区" class="headerlink" title="丰岛区"></a>丰岛区</h4><p>丰岛区（日语：豊島区／としまく Toshima ku */?）是日本东京都内23个特别区之一，位在旧东京市的区域内西北角一带。其命名由来源自日本政府进行“废藩置县”之前，武藏国丰岛郡的古名，当东京市在进行行政区域扩大时，四个原属北丰岛郡的町被合并划入东京市的范围之内，而赋予丰岛区的命名。</p><p>丰岛区是一个人口密度高，且集时尚与传统、年轻与老年于一体、富有个性的区域。境内最重要的市街为<strong>池袋</strong>车站为中心的商业区，除此之外，驹込、有“老年人的原宿”之称的巢鸭、大冢、高级住宅区的目白等地区都是丰岛区境内比较知名的市街，东京市区内最重要的铁路路线JR山手线在这几个地区都设有车站。</p><p>曾经是东京都内第一高楼的太阳城（サンシャインシティ）就位在区内的池袋地区。区役所位于JR山手线池袋站东口。</p><p>根据1965年的国势调查结果，本区为日本人口密度最高的自治体（前回调查的第一名为1东京都台东区）[1]（页面存档备份，存于互联网档案馆）。2005年的国势调查，仅次于东京都中野区为全日本第二位，2010年再次成为第一。</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-toshima-01.jpeg" alt="丰岛区"></p><h4 id="北区"><a href="#北区" class="headerlink" title="北区"></a>北区</h4><p><a href="https://zhuanlan.zhihu.com/p/514567481">北区</a>实际上就是东南西北的“北区”，因其地处东京最北端的地区之一，北侧隔着荒川与埼玉县的川口市和户田市相邻，东侧隔着隅田川与足立区相邻、东南侧和荒川区接壤、西侧和板桥区接壤、南侧则和丰岛区和文京区接壤。</p><p>与东京北部的大部分地区一样，北区的居民主要是劳工阶级家庭、单身上班族以及越来越多的外国居民（主要来自亚洲国家）。北区有四条河川纵横交错，拥有富饶的绿色空间，并且平民化的物价，使其成为非常适合家庭居住的行政区。</p><p>北区是东京23区中车站最多的行政区，主要车站前往崎玉县、东京市中心甚至神奈川县都相当方便。北区的主要住宅区包括：十条、赤羽和王子。北区的外国居民主要来自亚洲（依序是中国、韩国、越南、菲律宾、尼泊尔和台湾）。当东京国际法国学校（Lycée Français International de Tokyo）于2012年将校舍迁移至北区泷野川时，也为北区增添了点西洋国际色彩。但总体而言，北区给人蓝领阶级和下町风情的印象。</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-kita-01.png" alt="北区"></p><h4 id="板桥区"><a href="#板桥区" class="headerlink" title="板桥区"></a>板桥区</h4><p><a href="https://zhuanlan.zhihu.com/p/512959361">板桥区</a>（いたばし）是东京北部行政区之一，其北侧隔着荒川和埼玉县户田市相邻、西侧和埼玉县和光市接壤。板桥区的气氛宁静、朴素低调、适合家庭居住，许多自然公园和河川河堤蜿蜒穿过恬静住宅区。</p><p>板桥区的外国居民主要来自亚洲（依序是中国、韩国、越南、菲律宾、尼泊尔）板桥区是东京23区中，中国居民第3多的行政区。但东京国际法国学校（Lycée Français International de Tokyo）于当2012年将校舍迁移至北区泷野川时，由于板桥区的新板桥站实际上是离该校最近的车站，大多数乘电车上下课的法国学生都会在新板桥站或板桥站上下车，因此也为板桥区添增了西方色彩。</p><p>板桥区虽然不是东京市中心（除了住宅区就是以日用品制造业为主的中小工场）。但是，这种远离城市喧嚷的环境提供当地居民悠闲生活和亲近绿色空间的优势。板桥区主要车站都在搭电车至池袋、新宿和大手町等主要车站不到30分钟或约30分钟的通勤范围内</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-itabashi-01.png" alt="板桥区"></p><h4 id="练马区"><a href="#练马区" class="headerlink" title="练马区"></a>练马区</h4><p><a href="https://zhuanlan.zhihu.com/p/510946883">练马区</a>（日语：練馬区／ねりまく Nerima ku */?）是东京23区中人口第二多的行政区（仅次于世田谷区），突显了其作为住宅区的受欢迎程度。练马区北侧与埼玉县和光市接壤、东侧为板桥区、其西侧与西东京市接壤，南侧则与中野区、杉并区和武藏野市接壤。练马区和这些相邻接的地区都是东京西郊的主要居住社区。</p><p>练马区以拥有众多的漫画家而闻名，有“日本动漫发祥地”之称。著名的日本漫画《哆啦A梦》《忍者小灵精》以及《机器人少女Z》、《四月是你的谎言》的故事场景就在本区（光丘）。这里是《东京食尸鬼》故事的主要舞台，包括著名经典恐怖片《咒怨》的那座“鬼屋”也在此行凶作恶。闻名的游乐地丰岛园亦在本区。练马区是加速世界(AW)中日珥（Prominence) 的领土</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-rerimaku-01.png" alt="练马区"></p><h4 id="城东地区"><a href="#城东地区" class="headerlink" title="城东地区"></a>城东地区</h4><h4 id="台东区"><a href="#台东区" class="headerlink" title="台东区"></a>台东区</h4><p><a href="https://zhuanlan.zhihu.com/p/511277935">台东区</a>（日语：台東区／たいとうく Taitō ku */?）是东京23区中面积最小的行政区，却是最古老最著名的江户下町街区所在地。广受外国游客欢迎的<strong>浅草</strong>位于台东，在那里可以找到东京历史最悠久的寺庙“<strong>浅草寺</strong>”。探索浅草周边地区是了解东京历史的绝佳方式，因为这里是东京最古老的市街区许多神社每年都会举行各种传统节日祭典，例如每年5月于浅草神社举行的三社祭。</p><p>台东区也是<strong>上野阿美横丁、上野恩赐公园</strong>（含博物馆、美术馆）和<strong>上野动物园</strong>的所在地，非常受当地居民和国内外游客欢迎。台东区以商业市街主，也有一部分住宅区。商业市街和观光区以外的街区大都安静并保有昭和初期东京市街风貌。住宅以公寓和大厦居多，但也有部分独栋住宅。由于台东区<strong>近邻文京区和千代田区的学术和商业区</strong>，因此对于在东京市中心工作/念书又喜爱传统下町的人来说，住在台东区是个不错的选择</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-taitou-01.jpeg" alt="台东区"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-taitou-02.png" alt="台东区"></p><h4 id="墨田区"><a href="#墨田区" class="headerlink" title="墨田区"></a>墨田区</h4><p><a href="https://zhuanlan.zhihu.com/p/511823310">墨田区</a>（日语：墨田区／すみだく Sumida ku */?）是夹于荒川和隅田川之间的行政区，区内有许多知名地标，例如两国国技馆、江户东京博物馆和<strong>东京晴空塔</strong>。晴空塔是到访东京的外国游客的人气观光景点，由押上(晴空塔)搭乘电车可直达羽田机场或成田机场，因此晴空塔附近有许多住宿比市中心便宜的短期出租公寓。江户东京博物馆和大相扑比赛会场的两国国技馆位在两国，到访这些设施可以了解昔日东京的悠久历史。</p><p>墨田区除了作为观光区受欢迎之外，墨田区的住宅区相当适合居住，由于部分车站通勤至主要商业区相当快速，是个可以享受观光休闲和交通之便的宜居之地</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-sumida-02.png" alt="墨田区"></p><h4 id="江东区"><a href="#江东区" class="headerlink" title="江东区"></a>江东区</h4><p><a href="https://zhuanlan.zhihu.com/p/504335320">江东区</a> （日语：江東区／こうとうく Kōtō ku */?） 位于中央区以东、墨田区以南，隅田川和荒川分别构成了江东区的西边和东边的天然边界。由于区内运河与桥梁众多，亦被称作为“水彩都市”。以海产闻名的<strong>筑地市场</strong>（场内市场）也在2018年10月搬迁至此区，成为丰洲市场。该区有七成面积都是通过填海产生。历史上，江东区的内陆地区是庶民社区，随着日本现代化，江东区出现许多中小型下町工厂，龟户与锦糸町（墨田区）周边形成了繁华的副都心商业区。近年，随着都市开发，东京湾岸的填海地兴建了许多高层办公大楼、公园绿地与超高层公寓大楼，吸引了许多白领阶级家庭在此置产居住。</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-koutou-01.png" alt="江东区"></p><h4 id="荒川区"><a href="#荒川区" class="headerlink" title="荒川区"></a>荒川区</h4><p><a href="https://zhuanlan.zhihu.com/p/502047369">荒川区</a>（日语：荒川区／あらかわく Arakawa ku */?）位于东京的东北部，北面是足立区，南面是台东区和文京区。荒川区的区名来自”荒川”，但荒川区北面边境实为”隅田川”。荒川是老市区和新兴住宅区的混合体，可以找到<strong>日暮里纤维街</strong>和南千住的高层塔楼公寓。荒川区最南端的<strong>日暮里</strong>是区内最大的交通枢纽，搭乘京成Skyliner（Keisei Skyliner）前往成田机场仅约36分钟车程。</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-arakawa-01.png" alt="荒川区"></p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-arakawa-02.png" alt="荒川区"></p><h4 id="足立区"><a href="#足立区" class="headerlink" title="足立区"></a>足立区</h4><p><a href="https://zhuanlan.zhihu.com/p/512370279">足立区</a> （日语：足立区／あだちく Adachi ku */?）是以住宅为主的行政区，是东京23区中平均租金最便宜的区之一。虽然足立区被认为是庶民居住的下町，但足立区最具代表性的北千住是一个相当发达且繁忙的转运站、商业区、大学城和住宅区。车站有两家百货公司和充满活力的商店街。</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-adachi-01.png" alt="足立区"></p><h4 id="葛饰区"><a href="#葛饰区" class="headerlink" title="葛饰区"></a>葛饰区</h4><p>位于东京23区东北角的葛饰区给人的印象与新宿都心摩天高楼相去甚远。<a href="https://zhuanlan.zhihu.com/p/505021340">葛饰区</a> （日语：葛飾区／かつしかく Katsushika ku */?）与周围的台东区、足立区、墨田区和江户川区都被视为下町（下町地区在历史上被认为是庶民居住的工商社区、老街、老社区）。但与经过规划、观光业盛行的台东区和墨田区相比，葛饰区的下町给人一种更传统、安静、更慢活的老东京生活方式。</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-katushika-01.png" alt="葛饰区"></p><h4 id="江户川区"><a href="#江户川区" class="headerlink" title="江户川区"></a>江户川区</h4><p><a href="https://zhuanlan.zhihu.com/p/517606696">江户川区</a>（日语：江戸川区／えどがわく Edogawa ku */?）位于东京23区的最东侧，为荒川和江户川之间的狭长地带。江户川区区名来自东侧的江户川，区的西侧为荒川、南侧面向东京湾、北侧与葛饰区接壤。江户川区的中心地区由中川南北向贯穿，南部地区的葛西临海公园一带则主要为海埔新生地。</p><p>由于江户川区东西南侧面向河川和海洋，区内有非常多公园和绿地，例如河堤公园和葛西临海公园，这些绿地提供了当地居民非常多的户外活动选项，希望远离城市喧嚣的家庭非常适合在此悠闲生活。</p><p>除了公园绿地，房租低廉、适合养育子女以及前往东京市中心的便利通勤等条件也使江户川区发展成以家庭居住为主的行政区。该区大多数社区拥有安静住宅氛围，吸引许多追求较低住房成本的日本、中国、印度家庭搬到这里。</p><p><img src="/2023/07/14/japan-travel-guide-tokyo/tokyo-edogawa-01.png" alt="江户川区"></p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="2023之后的新景点"><a href="#2023之后的新景点" class="headerlink" title="2023之后的新景点"></a>2023之后的新景点</h3><p><a href="https://www.bring-you.info/zh-hans/harry-potter-studio-tour-tokyo">板桥区-阿利波特地方</a></p>]]></content>
    
    
    <summary type="html">日本旅游攻略系列</summary>
    
    
    
    <category term="旅游" scheme="http://smiecj.github.io/categories/%E6%97%85%E6%B8%B8/"/>
    
    <category term="日本" scheme="http://smiecj.github.io/categories/%E6%97%85%E6%B8%B8/%E6%97%A5%E6%9C%AC/"/>
    
    
    <category term="旅游" scheme="http://smiecj.github.io/tags/%E6%97%85%E6%B8%B8/"/>
    
    <category term="日本" scheme="http://smiecj.github.io/tags/%E6%97%A5%E6%9C%AC/"/>
    
    <category term="攻略" scheme="http://smiecj.github.io/tags/%E6%94%BB%E7%95%A5/"/>
    
  </entry>
  
  <entry>
    <title>献给朝阳下的你</title>
    <link href="http://smiecj.github.io/2023/06/14/tomoo-yoake/"/>
    <id>http://smiecj.github.io/2023/06/14/tomoo-yoake/</id>
    <published>2023-06-13T16:00:00.000Z</published>
    <updated>2023-10-28T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/g64NCHwgzFON62VFrU9I1w">本文公众号</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">夜明けの君へ</span><br><span class="line">作词 &amp; 作曲：TOMOO</span><br><span class="line">编曲：アイコトバ</span><br><span class="line"></span><br><span class="line">あの丸い月によく似た瞳が笑う</span><br><span class="line">「めんどくさい」ってからかう声を追いかけた</span><br><span class="line">おどけたポーズも　震えるため息も</span><br><span class="line">見逃せない流星と同じ</span><br><span class="line"></span><br><span class="line">那双好似满月般微笑的眼睛</span><br><span class="line">伴随着“真麻烦啊”这样的笑侃</span><br><span class="line">不熟练的摆姿势也好，颤抖着的叹息声也好</span><br><span class="line">漫天闪耀的流星们也是如此吧</span><br><span class="line"></span><br><span class="line">かっこいいって思わずにはいられなくてさ</span><br><span class="line">呆気にとられて　色づいてく日々</span><br><span class="line">頭の中では　鳴り続けるシャッター</span><br><span class="line">でも少しも伝えきれてない</span><br><span class="line"></span><br><span class="line">抑制不住的觉得你很帅气的想法</span><br><span class="line">不觉中惊讶发现 每一天都过得五彩缤纷</span><br><span class="line">脑海中闪过的快门声也从不停止鸣响</span><br><span class="line">然而这份心情，还从未能让你感受到</span><br><span class="line"></span><br><span class="line">ああ</span><br><span class="line">今　君の光を受け取ったなら</span><br><span class="line">その時からもう　消えない光</span><br><span class="line">不安も　迷いも　追い越してきた</span><br><span class="line">眠れぬ夜に　届いた光</span><br><span class="line"></span><br><span class="line">啊啊</span><br><span class="line">如果现在的我 可以沐浴在你的光亮下</span><br><span class="line">从这时起 这束光就再不会消失</span><br><span class="line">翻越了不安和迷茫</span><br><span class="line">我的无眠之夜，也将洒下光芒</span><br><span class="line"></span><br><span class="line">怖かったのは僕だけじゃなかった</span><br><span class="line">一番聞いてほしい一言ほど</span><br><span class="line">だれにも言えずに　しまいこんだまま</span><br><span class="line">開け方すら忘れかけて</span><br><span class="line"></span><br><span class="line">对未来害怕的 或许不止我一个</span><br><span class="line">仅仅是这样一句大家最想听到的话</span><br><span class="line">我却没有对任何人说，只是藏在心里</span><br><span class="line">就连如何开口，都快要忘记</span><br><span class="line"></span><br><span class="line">一体いつからどこに隠れてたんだろう</span><br><span class="line">きっと迷子になってただけの涙</span><br><span class="line">君の前で僕は　こんな顔してるんだな</span><br><span class="line">止まってた時間が走り出す</span><br><span class="line"></span><br><span class="line">到底是何时开始把自己深藏在某处</span><br><span class="line">一定是因为迷茫而只顾顿足落泪吧</span><br><span class="line">在你面前的我，原来也是这样的神情</span><br><span class="line">凝固的时间，再一次向前出发了</span><br><span class="line"></span><br><span class="line">ああ　君が見つけてくれた時から</span><br><span class="line">僕はもう一度　僕になれたよ</span><br><span class="line">ひとりきりでは気付けないまま</span><br><span class="line">こんな景色も　愛されてたこと</span><br><span class="line"></span><br><span class="line">啊啊，从你发现我的那一刻开始</span><br><span class="line">我再一次找回了我自己</span><br><span class="line">一个人的时候或许永远不会发现</span><br><span class="line">还有这样的风景，一直爱抚着我</span><br><span class="line"></span><br><span class="line">僕らの日々は</span><br><span class="line">暗闇がなくちゃ　星が見えなくて</span><br><span class="line">完璧じゃないから　君に出会えた</span><br><span class="line">完璧じゃないから、</span><br><span class="line"></span><br><span class="line">我们所经历的每一天</span><br><span class="line">如果没有黑暗，也不会看到漫天星光</span><br><span class="line">正是不完美的我，才能遇见你</span><br><span class="line">不完美的我…</span><br><span class="line"></span><br><span class="line">今　ほんとの声を聴き合えたなら</span><br><span class="line">やっと僕らは　夜明けの星座</span><br><span class="line">ただ君がいて　ただ僕がいて</span><br><span class="line">ここにしかない　意味になってく</span><br><span class="line">如果现在 我们可以倾听彼此真正的声音</span><br><span class="line">我们终将拥有那黎明之际的星座</span><br><span class="line">只要你我相伴在这里</span><br><span class="line">终会创造独属我们的意义</span><br><span class="line">君と朝日を迎えにいくよ</span><br><span class="line">愿同你一起，去迎接新一缕朝阳</span><br></pre></td></tr></table></figure><h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><p>MV 的胶片感十足</p>]]></content>
    
    
    <summary type="html">TOMOO 充满积极氛围的歌</summary>
    
    
    
    <category term="音乐" scheme="http://smiecj.github.io/categories/%E9%9F%B3%E4%B9%90/"/>
    
    <category term="TOMOO" scheme="http://smiecj.github.io/categories/%E9%9F%B3%E4%B9%90/TOMOO/"/>
    
    
    <category term="音乐" scheme="http://smiecj.github.io/tags/%E9%9F%B3%E4%B9%90/"/>
    
    <category term="日语" scheme="http://smiecj.github.io/tags/%E6%97%A5%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>ES数据同步到hive</title>
    <link href="http://smiecj.github.io/2023/06/10/emr-es-to-hive/"/>
    <id>http://smiecj.github.io/2023/06/10/emr-es-to-hive/</id>
    <published>2023-06-09T16:00:00.000Z</published>
    <updated>2023-06-10T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>来自用户的需求: 用户有一部分数据来自 elasticsearch ，我们已经支持了通过 presto 查询 es 数据。但是用户需要将 es 表 和 hive 表做关联查询，而 presto 是不能跨数据源进行 join 查询的。所以需要先把 es 数据导入到 hive 中</p><p>用户对数据同步周期的要求并不高 一天1-2次就可以了，所以继续使用我们emr集群中已有的 azkaban 服务进行调度，把 es 数据同步到 hive 的过程写到 azkaban 中，实现了7张表的定期同步</p><h2 id="hive-创建-es-外表"><a href="#hive-创建-es-外表" class="headerlink" title="hive 创建 es 外表"></a>hive 创建 es 外表</h2><p><a href="https://blog.csdn.net/baichoufei90/article/details/104246011">参考教程-Elasticsearch-Hive</a></p><h3 id="hive-引入-elasticsearch-hadoop-依赖包"><a href="#hive-引入-elasticsearch-hadoop-依赖包" class="headerlink" title="hive 引入 elasticsearch-hadoop 依赖包"></a>hive 引入 elasticsearch-hadoop 依赖包</h3><p>hive 默认不支持创建 es 外表，需要引入 <a href="https://mvnrepository.com/artifact/org.elasticsearch/elasticsearch-hadoop">elasticsearch-hadoop</a> 依赖包</p><p>修改 hive.aux.jars.path 配置, 多个可以用逗号分隔，如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive.aux.jars.path=file:///usr/hdp/2.6.3.0-235/hive/auxlib/elasticsearch-hadoop-hive-8.8.0.jar</span><br></pre></td></tr></table></figure><h3 id="创建-hive-外表"><a href="#创建-hive-外表" class="headerlink" title="创建 hive 外表"></a>创建 hive 外表</h3><p>sql 示例:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">EXTERNAL</span> <span class="keyword">TABLE</span> temp.es_external_table ( fieldNameA STRING, fieldNameB STRING ) STORED <span class="keyword">BY</span> <span class="string">&#x27;org.elasticsearch.hadoop.hive.EsStorageHandler&#x27;</span></span><br><span class="line">TBLPROPERTIES(</span><br><span class="line">    <span class="string">&#x27;es.resource&#x27;</span><span class="operator">=</span><span class="string">&#x27;es索引名&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;es.nodes&#x27;</span><span class="operator">=</span><span class="string">&#x27;es_host&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;es.port&#x27;</span><span class="operator">=</span><span class="string">&#x27;es_port&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;es.mapping.names&#x27;</span><span class="operator">=</span><span class="string">&#x27;fieldNameA:fieldNameA,fieldNameB:fieldNameB&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>这里踩了一个坑: 由于 hive 创建表会忽略大小写，不管 sql 中定义的字段是什么样子，都会统一转成小写。所以导致es 中的驼峰名称字段 会映射失败，最后查出的数据都是 null</p><p><a href="https://blog.csdn.net/qq_40999403/article/details/103929305">类似的坑</a>-创建mongodb 外表时遇到的</p><p>因此需要显式地通过 <strong>es.mapping.names</strong> 配置指定字段名称的关联关系，像示例那样</p><h2 id="同步脚本"><a href="#同步脚本" class="headerlink" title="同步脚本"></a>同步脚本</h2><p>从 es 表到 hive 表，大致步骤为: 创建 hive 外表，关联 es 数据 =&gt; 创建 hive 内表 =&gt; 同步外表数据到内表</p><p>过程写到脚本中如下: (create_hive_to_es_table.sh)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 获取指定索引的所有 es 表字段</span></span><br><span class="line">get_index_field_ret=`curl http://<span class="variable">$&#123;es_address&#125;</span>/<span class="variable">$&#123;index_name&#125;</span>?pretty=<span class="literal">true</span>`</span><br><span class="line">field_arr=`<span class="built_in">echo</span> <span class="variable">$&#123;get_index_field_ret&#125;</span> | jq -r <span class="string">&quot;.<span class="variable">$&#123;index_name&#125;</span>.mappings.properties | keys | join(\&quot; \&quot;)&quot;</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建 hive 外表</span></span><br><span class="line">temp_table_name=<span class="string">&quot;temp.es_<span class="variable">$&#123;index_name&#125;</span>&quot;</span></span><br><span class="line">temp_rename_table_name=<span class="string">&quot;<span class="variable">$&#123;hive_db&#125;</span>.es_<span class="variable">$&#123;index_name&#125;</span>_bak&quot;</span></span><br><span class="line">actual_table_name=<span class="string">&quot;<span class="variable">$&#123;hive_db&#125;</span>.es_<span class="variable">$&#123;index_name&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">create_external_table_sql=<span class="string">&quot;CREATE EXTERNAL TABLE <span class="variable">$&#123;temp_table_name&#125;</span> (&quot;</span></span><br><span class="line"><span class="keyword">for</span> current_field <span class="keyword">in</span> <span class="variable">$&#123;field_arr[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    create_external_table_sql=<span class="string">&quot;<span class="variable">$&#123;create_external_table_sql&#125;</span> <span class="variable">$&#123;current_field&#125;</span> STRING,&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">create_external_table_sql=`<span class="built_in">echo</span> <span class="variable">$&#123;create_external_table_sql&#125;</span> | sed <span class="string">&#x27;s/,$//g&#x27;</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment">### 组装 es.mapping.names</span></span><br><span class="line">create_external_table_sql=<span class="string">&quot;<span class="variable">$&#123;create_external_table_sql&#125;</span>) STORED BY &#x27;org.elasticsearch.hadoop.hive.EsStorageHandler&#x27; TBLPROPERTIES(&#x27;es.resource&#x27;=&#x27;<span class="variable">$&#123;index_name&#125;</span>&#x27;,&#x27;es.nodes&#x27;=&#x27;<span class="variable">$&#123;es_host&#125;</span>&#x27;,&#x27;es.port&#x27;=&#x27;<span class="variable">$&#123;es_port&#125;</span>&#x27;,&#x27;es.mapping.names&#x27;=&#x27;&quot;</span></span><br><span class="line"><span class="keyword">for</span> current_field <span class="keyword">in</span> <span class="variable">$&#123;field_arr[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    create_external_table_sql=<span class="string">&quot;<span class="variable">$&#123;create_external_table_sql&#125;</span><span class="variable">$&#123;current_field&#125;</span>:<span class="variable">$&#123;current_field&#125;</span>,&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">create_external_table_sql=`<span class="built_in">echo</span> <span class="variable">$&#123;create_external_table_sql&#125;</span> | sed <span class="string">&#x27;s/,$//g&#x27;</span>`</span><br><span class="line"></span><br><span class="line">create_external_table_sql=<span class="string">&quot;<span class="variable">$&#123;create_external_table_sql&#125;</span>&#x27;)&quot;</span></span><br><span class="line">drop_external_table_sql=<span class="string">&quot;drop table if exists <span class="variable">$&#123;temp_table_name&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;create external sql: <span class="variable">$&#123;create_external_table_sql&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">beeline -n <span class="variable">$&#123;hive_user&#125;</span> -u <span class="variable">$&#123;hive_server&#125;</span> -e <span class="string">&quot;<span class="variable">$&#123;drop_external_table_sql&#125;</span>&quot;</span></span><br><span class="line">beeline -n <span class="variable">$&#123;hive_user&#125;</span> -u <span class="variable">$&#123;hive_server&#125;</span> -e <span class="string">&quot;<span class="variable">$&#123;create_external_table_sql&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建 hive 临时内表</span></span><br><span class="line">create_temp_table_sql=<span class="string">&quot;CREATE TABLE <span class="variable">$&#123;temp_rename_table_name&#125;</span> AS SELECT * FROM <span class="variable">$&#123;temp_table_name&#125;</span>&quot;</span></span><br><span class="line">drop_temp_table_sql=<span class="string">&quot;drop table if exists <span class="variable">$&#123;temp_rename_table_name&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;create temp table sql: <span class="variable">$&#123;create_temp_table_sql&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">beeline -n <span class="variable">$&#123;hive_user&#125;</span> -u <span class="variable">$&#123;hive_server&#125;</span> -e <span class="string">&quot;<span class="variable">$&#123;drop_temp_table_sql&#125;</span>&quot;</span></span><br><span class="line">beeline -n <span class="variable">$&#123;hive_user&#125;</span> -u <span class="variable">$&#123;hive_server&#125;</span> -e <span class="string">&quot;<span class="variable">$&#123;create_temp_table_sql&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 重命名表（用于快速重建用户直接用的表）</span></span><br><span class="line"></span><br><span class="line">create_actual_table_sql=<span class="string">&quot;ALTER TABLE <span class="variable">$&#123;temp_rename_table_name&#125;</span> RENAME TO <span class="variable">$&#123;actual_table_name&#125;</span>&quot;</span></span><br><span class="line">drop_actual_table_sql=<span class="string">&quot;drop table if exists <span class="variable">$&#123;actual_table_name&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;create actual table sql: <span class="variable">$&#123;create_actual_table_sql&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">beeline -n <span class="variable">$&#123;hive_user&#125;</span> -u <span class="variable">$&#123;hive_server&#125;</span> -e <span class="string">&quot;<span class="variable">$&#123;drop_actual_table_sql&#125;</span>&quot;</span></span><br><span class="line">beeline -n <span class="variable">$&#123;hive_user&#125;</span> -u <span class="variable">$&#123;hive_server&#125;</span> -e <span class="string">&quot;<span class="variable">$&#123;create_actual_table_sql&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><h2 id="azkaban-任务"><a href="#azkaban-任务" class="headerlink" title="azkaban 任务"></a>azkaban 任务</h2><h3 id="定义任务流程"><a href="#定义任务流程" class="headerlink" title="定义任务流程"></a>定义任务流程</h3><p>需要重建7张表，因此定义成 父任务 -&gt; 7个子任务</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># es_to_hive_parent.job</span></span><br><span class="line"><span class="attr">type</span>=command</span><br><span class="line"></span><br><span class="line"><span class="attr">command</span>=echo <span class="string">&quot;es to hive success!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dependencies</span>=table1,table2,table3,table4,table5,table6,table7</span><br></pre></td></tr></table></figure><p>因为前面具体外表的创建流程 已经写在脚本中了，所以子任务这里直接调用 create_hive_to_es_table.sh 就行</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># table1.job</span></span><br><span class="line"><span class="attr">type</span>=flow</span><br><span class="line"></span><br><span class="line"><span class="attr">job.name</span>=table1</span><br><span class="line"><span class="attr">flow.name</span>=ES_TO_HIVE</span><br><span class="line"></span><br><span class="line"><span class="attr">index.name</span>=es索引名</span><br><span class="line"><span class="attr">hive_db</span>=目标 hive 库名</span><br><span class="line"></span><br><span class="line"><span class="comment"># ES_TO_HIVE.job</span></span><br><span class="line"><span class="attr">type</span>=command</span><br><span class="line"></span><br><span class="line"><span class="attr">command</span>=sh create_hive_to_es_table.sh <span class="variable">$&#123;es.address&#125;</span> <span class="variable">$&#123;index.name&#125;</span> <span class="variable">$&#123;hive.server&#125;</span> <span class="variable">$&#123;hive.user&#125;</span> <span class="variable">$&#123;hive.db&#125;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>基于目前的资料搜索 这种方案应该是 es数据同步到 hive 比较通用的。但是确实不适合大批量数据同步的场景，也不能直接同步增量数据</p><p>想同步增量数据的话 应该需要从数据源头入手了，比如 es 数据是来自 kafka 的，那么需要通过类似 canal 的服务来同步增量数据，架构和这里说到的远远不同</p>]]></content>
    
    
    <summary type="html">一次用户数据的处理过程</summary>
    
    
    
    <category term="大数据" scheme="http://smiecj.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="大数据" scheme="http://smiecj.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    <category term="emr" scheme="http://smiecj.github.io/tags/emr/"/>
    
    <category term="hive" scheme="http://smiecj.github.io/tags/hive/"/>
    
    <category term="azkaban" scheme="http://smiecj.github.io/tags/azkaban/"/>
    
  </entry>
  
  <entry>
    <title>【翻译】世界の秘密 歌曲鉴赏</title>
    <link href="http://smiecj.github.io/2023/05/07/vaundy-sekainohimitu/"/>
    <id>http://smiecj.github.io/2023/05/07/vaundy-sekainohimitu/</id>
    <published>2023-05-06T16:00:00.000Z</published>
    <updated>2023-06-21T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/Leegilq_cWkseBxgAg25fQ">本文公众号</a></p><p><a href="https://media.framu.world/columns/lyrics_consideration/sekainohimitsu">原文-世界の秘密【Vaundy】歌詞の意味を考察！世界の秘密に気づいても日々を楽しむ方法とは？</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这次我们来欣赏 Vaundy 于2020年12月创作的数字单曲 「世界の秘密」（世界的秘密）。这首后续被作为 大学生SNS 平台 「Dtto」的 CM 曲，WOWOW（日本第一家付费商业卫星电视台）的原创剧 「こころのフフフ」的主题曲，以及 マルハニチロ 冷冻食品公司的新中华街系列电视广告「こだわりが、見えてきた」的主题曲</p><div style="position: relative; padding: 30% 45%;"><iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="https://player.bilibili.com/player.html?id=357742772&bvid=BV1tX4y1q7bt&cid=1174643073&page=1&as_wide=1&high_quality=1&danmaku=1&autoplay=1" frameborder="no" scrolling="no"></iframe></div><h2 id="歌曲部分"><a href="#歌曲部分" class="headerlink" title="歌曲部分"></a>歌曲部分</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">きっと僕ら何かに追われてる</span><br><span class="line">漠然としてるけど</span><br><span class="line">四六時中グダグダと</span><br><span class="line">チクチクが流れる</span><br><span class="line">波に乗せて</span><br><span class="line">ネットサーフィン</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">一直在被什么推着前进的我们</span><br><span class="line">有时也会陷入迷茫</span><br><span class="line">即使这样，也会选择无所事事地度过一天</span><br><span class="line">任由不安的声音拂过耳边</span><br><span class="line">跟着网络的节奏</span><br><span class="line">思想随波逐流</span><br></pre></td></tr></table></figure><p>「世界の秘密」创作于新冠病毒盛行的2020年，当时社会呼吁民众非特殊情况不外出。也正因如此，在家过着孤单无聊、需要靠网络充实生活的人也更多了</p><p>不过即便是新冠之前，年轻人对网络产生依赖的社会问题也已经逐渐浮现出来了</p><p>被时间追赶着，被焦虑推怂着，离开了网络，仿佛就无法生存下去，这首歌主要描绘了这样一群人的样子。也揭示着这样的一种社会现象: 人们对社会形势、日常生活漠不关心，内心时而混乱，时而焦虑，时而感伤。也不限于年轻人，<strong>在当下社会中过得茫然而又不安，只能把内心寄托于网络世界的人们确实是越来越多了</strong></p><p><img src="/2023/05/07/vaundy-sekainohimitu/09.png" alt="MV画面"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">何か、これはあーだこーだ言って</span><br><span class="line">古臭いな</span><br><span class="line">それはそれで、なんだかんだ言って</span><br><span class="line">新しいな</span><br><span class="line">そんな無駄な繰り返しを、また繰り返して</span><br><span class="line">僕ら、生きていくうちに</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">我们总是说着 「啊，这不就是那个啥吗</span><br><span class="line">早就过气了呀」</span><br><span class="line">「咦，快看那个那个</span><br><span class="line">有点新意哦」</span><br><span class="line">就这样无聊的对话，重复来重复去</span><br><span class="line">我们就是按这种方式生活的吧</span><br></pre></td></tr></table></figure><p>接着第一句歌词「在被什么推着前进的我们」，这个东西是什么，相比「时间」来说，社会中的 「流行趋势」可能更加准确</p><p>更具体的，包括网络世界中的各种「话题」、「人气」（打榜）、SNS （social network software）上的 「点赞」等等</p><p><strong>我们每天都要从网络上接收庞大的信息量，（大脑不知疲倦地打着标签），脑海里无休止地做着 「那个是新事物，还是旧东西」的选择题，某种程度上也可以说是 「毫无意义的周而复始」</strong>罢了</p><p>不过，即使是过着日复一日和 SNS 深度绑定的生活，「我」注意到自己身上，还是发生了一些不起眼的变化</p><p><img src="/2023/05/07/vaundy-sekainohimitu/04.png" alt="MV画面"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">アイムソーリー</span><br><span class="line">気づいちゃったよ</span><br><span class="line">アイムソーリー</span><br><span class="line">気づいちゃったよ</span><br><span class="line">世界のこと</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">I am sorry</span><br><span class="line">我注意到了</span><br><span class="line">I am sorry</span><br><span class="line">我发现了</span><br><span class="line">关于世界的事情</span><br></pre></td></tr></table></figure><p>「我」在为 「发现了世界的事情」而“感到抱歉”</p><p>「世界的事情」也照应了歌名「世界的秘密」，不过虽然「我」发现了它，歌词中也没有直接说明是什么。顺着思路联想的话， 「我」或许是对「世界的起源、组成、运作和趋势」有点理解了</p><p>年少时候一直没有发现的「世界的事情」，直到长大（有了一些社会阅历）才理解一些事，那一瞬间多少会感到“遗憾”吧</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ステップだけ、ステップだけ、置いてきちゃってよ</span><br><span class="line">僕ら、涙に合わせて</span><br><span class="line">リズムに乗っている</span><br><span class="line">はず</span><br><span class="line">ステップだけ、ステップだけ、置いてきちゃっても</span><br><span class="line">僕ら、笑顔の数だけ</span><br><span class="line">ブレイクできるはず</span><br><span class="line">だから</span><br><span class="line">アイムソーリー</span><br><span class="line">気づいちゃっても</span><br><span class="line">アイムソーリー</span><br><span class="line">忘れといてよ</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">唯有前进，唯有前进，放下内心的烦恼</span><br><span class="line">我们啊，就是这样 感动落泪 感同身受</span><br><span class="line">才能跟着旋律，悠然起舞吧</span><br><span class="line">那么</span><br><span class="line">唯有向前，唯有向前，释放内心的负担</span><br><span class="line">我们啊，就是这样 无忧无虑 无数次欢笑</span><br><span class="line">才能了解自己，突破瓶颈吧</span><br><span class="line"></span><br><span class="line">所以啊</span><br><span class="line">I am sorry</span><br><span class="line">即使是注意到了</span><br><span class="line">I am sorry</span><br><span class="line">还是把它忘了吧</span><br></pre></td></tr></table></figure><p>本来很多道理都是简单易懂的，花上大篇幅去解释和表现，反而会适得其反，更难理解。Vaundy 就通过音乐的表现方式，将年轻人比较感性的社会问题通过自由的形式表现了出来</p><p>诸如「step、rhythm、break」这种舞蹈和音乐上的用语，向着同样依托着音乐之力生活下去的人们传递着自己的思考</p><p>思考之后，给出的就是面对这样一个网络世界的答案: 即使是在面对人生的一些重要阶段，比如一个难以迈过的台阶（step），<strong>即使是在这个过程充满着苦涩和悲伤，最后也一定能在某个时刻回身微笑</strong>。所以啊，即使世界上、社会上有让你在意的细枝末节，也请你忘记它们，继续前进</p><!----- bgm: 隐形的翅膀--><p><img src="/2023/05/07/vaundy-sekainohimitu/06.png" alt="MV画面"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">今日どっかで悪者が死んだらしい</span><br><span class="line">でもたくさんの命が救われたらしい</span><br><span class="line">正義と倫理と命を天秤にかけて</span><br><span class="line">量った声明で</span><br><span class="line">難しいことはもう分からない</span><br><span class="line">けれど</span><br><span class="line">実は僕らが悪者だったかもしれない</span><br><span class="line">なんて考えると</span><br><span class="line">彼の気持ちが分かるかもしれない</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">今天好像在哪里有“坏人”离开了世界</span><br><span class="line">但也有很多人的生命因此得救了</span><br><span class="line">我们总是端量着正义、伦理和生命的天平</span><br><span class="line">然后说出自己的见解</span><br><span class="line">复杂点的东西我也说不准</span><br><span class="line">然而</span><br><span class="line">我们是否也曾经站在了坏人那一边呢</span><br><span class="line">有时也这么想着</span><br><span class="line">也许就能理解那个人的心情了吧</span><br></pre></td></tr></table></figure><p>「让我们在疫情管控而百无聊赖的日子里，寻找一些和音乐相关的乐子吧」作者传达着这样的想法。不过有时候呢，本来「我」已经选择「忘记」的「世界的秘密」，还是会让我忍不住又去注意（它到底是什么）</p><p>这一段是对「世界的秘密」逐渐清晰的认识，对应着前面歌词的「感伤之中的笑容和乐趣」。「<strong>善恶的判断和区别并不是绝对的，而是相对的</strong>」，这些「善恶的价值判断」们，也是「世界组成」的一部分</p><p><img src="/2023/05/07/vaundy-sekainohimitu/07.png" alt="MV画面"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">アイムソーリー</span><br><span class="line">気づいちゃったよ</span><br><span class="line">アイムソーリー</span><br><span class="line">気づいちゃったよ</span><br><span class="line">自分のこと</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">I am sorry</span><br><span class="line">我注意到了哦</span><br><span class="line">I am sorry</span><br><span class="line">我发现了哦</span><br><span class="line">关于自己的秘密</span><br></pre></td></tr></table></figure><p>这一段的视角，从「世界」转向了「自己」。<strong>之前对「世界」的思考还是比较宏观的（正义、伦理、生命价值的思考，都是人类的价值取向），把视角缩小到「自身」之后，「我」也有了一些之前没有的见解</strong></p><p>小时候的「我」觉得「善恶的评判标准是绝对的」，认为「正义最后一定会邪恶」，但成了「大人」之后发现，即使是在「坏人」那边，有时也会存在「正义」的一面</p><p>「坏人死了，但是因为他的死，改变了一部分人的想法，从而拯救了他们」如果站在这种「伦理观」，会发现社会需要在人权问题上实现「生命平等」，其实是很难的</p><p>类似这样在「世界」各个国家，各个区域都存在的矛盾问题，在「自身」也会有类似的存在</p><p><img src="/2023/05/07/vaundy-sekainohimitu/11.png" alt="MV画面"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ステップだけ、ステップだけ、置いてきちゃってよ</span><br><span class="line">僕ら、涙に合わせて</span><br><span class="line">リズムに乗っている</span><br><span class="line">はず</span><br><span class="line">ステップだけ、ステップだけ、置いてきちゃっても</span><br><span class="line">僕ら、笑顔の数だけ</span><br><span class="line">ブレイクできるはず</span><br><span class="line">そうだろ？</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">唯有前进，唯有前进，放下内心的烦恼</span><br><span class="line">我们啊，就是这样 感动落泪 感同身受</span><br><span class="line">才能跟着旋律，悠然起舞吧</span><br><span class="line">那么</span><br><span class="line">唯有向前，唯有向前，释放内心的负担</span><br><span class="line">我们啊，就是这样 无忧无虑 无数次欢笑</span><br><span class="line">才能突破自己，创造未来</span><br><span class="line">就是这样的吧？</span><br></pre></td></tr></table></figure><p>和第一段副歌基本相同，「所以…把它忘了吧」变成了「就是这样的吧」</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">探してた未来に追いついて</span><br><span class="line">その時初めて気づいたんだ</span><br><span class="line">これが良い事か悪い事か</span><br><span class="line">これが「世界の秘密」ってやつか</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">向着曾经憧憬的未来追寻而去</span><br><span class="line">到那时，才终于发觉</span><br><span class="line">这种追求，到底是不是个好事呢</span><br><span class="line">这其实就是所谓的「世界的秘密」吧</span><br></pre></td></tr></table></figure><p>作者再对他所追求的「世界的秘密」说明了他的理解: 「<strong>善恶的评判只是相对的，世界就是不停地围绕着正义、伦理和生命的平衡而转</strong>」</p><p>「step」有「阶梯」的一层意味，这里Vaundy或许也表达着一种希望: 「<strong>登上了大人阶梯的我们，如果还能够保持那一份对世界的秘密 不那么深虑的童心，偶尔苦中作乐，欣赏音乐的同时不断寻求突破，那就更好了</strong>」</p><!--## 最后在这个通过「上网冲浪」就能知道「世界发生的事情」的时代，看起来获取一手信息更容易了，但反而因此感到混乱、迷茫的人也更多了随着日复一日的生活，脑海中日积月累地冒出越来越多伤心事情的时候，通过音乐让自己心情放松一些，就显得更加重要了不管发生了什么事，都让我们背起行囊，及时寻乐吧--><p><img src="/2023/05/07/vaundy-sekainohimitu/01.png" alt="MV画面"></p><h2 id="译者后言"><a href="#译者后言" class="headerlink" title="译者后言"></a>译者后言</h2><p>如今在网络媒体看到的各种时事热点，很多都自带着事物的「新旧」，思想的「善恶」，选择的「对错」等等标签，新闻和评论区的吵吵闹闹，仿佛都在让我们做个选择，一定要站队到某一边去</p><p>这种日复一日地打着标签、做着选择的生活，是不是偶尔跳出来看，把这些看似对立的标签放在一起，当作是人们的不同价值观而已。不论对错，而论这些价值观形成的原因，再从当事人角度出发，为什么现实中他做了这个选择，她又做了那种选择，能让我们更看得清这个「世界的秘密」呢</p><!--社会的复杂是不可能改变的，唯一能改变的就是自己。别人，但是自己想变成什么样还是可以决定的其他角度: 想起罗翔所说的，乌托邦的世界是不存在的，但是人类的意义就是去追求，去实现这样的乌托邦--><p><img src="/2023/05/07/vaundy-sekainohimitu/08.png" alt="MV画面"></p>]]></content>
    
    
    <summary type="html">网络世界的那些选择题们</summary>
    
    
    
    <category term="音乐" scheme="http://smiecj.github.io/categories/%E9%9F%B3%E4%B9%90/"/>
    
    <category term="Vaundy" scheme="http://smiecj.github.io/categories/%E9%9F%B3%E4%B9%90/Vaundy/"/>
    
    
    <category term="音乐" scheme="http://smiecj.github.io/tags/%E9%9F%B3%E4%B9%90/"/>
    
    <category term="日语" scheme="http://smiecj.github.io/tags/%E6%97%A5%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>大数据任务调度和数据同步组件初探</title>
    <link href="http://smiecj.github.io/2023/04/30/emr-scheduler/"/>
    <id>http://smiecj.github.io/2023/04/30/emr-scheduler/</id>
    <published>2023-04-29T16:00:00.000Z</published>
    <updated>2023-04-29T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/xiaoliizi/article/details/130569690">本文csdn博客地址</a><br><a href="https://mp.weixin.qq.com/s/peTA227Wt336hWj14wWKwg">本文公众号地址</a></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>数据从最原始的状态，可能是一个 excel，一个文本，或者是来自业务数据库的数据，格式各种各样，落地到<a href="https://www.oracle.com/cn/database/what-is-a-data-warehouse/">数据仓库</a>、<a href="https://www.sap.cn/products/technology-platform/hana/what-is-a-data-lake.html">数据湖</a>中，数据的同步过程 是必不可少的</p><p><img src="/2023/04/30/emr-scheduler/16.png" alt="数据同步"></p><p><a href="https://www.cnblogs.com/liugp/p/17297756.html">图片来源</a></p><p>传统的数据同步方式主要是基于定时任务的模式，通过任务调度服务，每天定时将原始数据提取（<strong>extract</strong>），进行清洗处理，比如过滤掉重复数据（<strong>transform</strong>），最后存入数仓（<strong>load</strong>），即 <a href="https://www.ibm.com/cn-zh/topics/etl">ETL</a> 任务模式。这种模式对数据的实时性要求不高，常见的同步工具有 datax、sqoop</p><p><img src="/2023/04/30/emr-scheduler/17.png" alt="ETL"></p><p>实时同步，则需要让同步任务一直处于运行状态，有新数据进来需要在<strong>秒级别内</strong>更新。这种情况下传统的调度模式就不能满足了，需要能时刻监测数据同步状态、管理和启停任务、甚至动态分配任务资源。一种常见的模式是 任务通过 <strong>spark / flink</strong> 等流式任务引擎去执行，然后在上层通过 k8s 或其他任务管理平台 进行调度</p><p>本质上实时同步数据的模式和 ETL 是一样的，对数据依然有 抽取、清洗和写入的操作。只是<strong>时效性、任务管理复杂度、资源动态分配能力</strong>上，要求会更高</p><p><img src="/2023/04/30/emr-scheduler/18.png" alt="流批一体"></p><p><a href="https://zhuanlan.zhihu.com/p/531318115">图片来源-DataFunTalk：阿里建设一站式实时数仓的经验分享</a></p><p>搭建可以在公司内通用的 EMR 平台，除了满足数据同步的功能，还需要提供任务调度的功能，因为用户的任务各种各样，可能是自定义的 spark / flink 任务，python 脚本 对数据自行处理的任务 等等，所以需要提供能让用户自行上传任务、执行任务的平台</p><p><img src="/2023/04/30/emr-scheduler/19.png" alt="xxl-job"></p><p><a href="https://www.cnblogs.com/gaoqiaoliangjie/p/15390703.html">图片来源-xxl-job工作原理解析</a></p><p>不过相比数据同步 离线和实时同步架构相差较大，任务调度平台架构的发展则不离其宗，基本变化不大</p><p>本文将会对业界主流的任务调度服务 和 数据同步服务 做一些介绍，大家可以参考，择优选择更适合自己业务需求的服务 进行尝试</p><h2 id="任务调度组件"><a href="#任务调度组件" class="headerlink" title="任务调度组件"></a>任务调度组件</h2><p>这里列举三个主流的任务调度服务: <a href="https://github.com/azkaban/azkaban">azkaban</a>、<a href="https://github.com/apache/airflow">airflow</a> 和 <a href="https://github.com/apache/dolphinscheduler">dolphinscheduler</a>。我们先分别看基于这三个组件 数仓的架构可能是什么样的，然后系统对比，最后大致看下使用页面</p><h3 id="传统离线数仓-azkaban"><a href="#传统离线数仓-azkaban" class="headerlink" title="传统离线数仓: azkaban"></a>传统离线数仓: azkaban</h3><p><img src="/2023/04/30/emr-scheduler/01.png" alt="离线数仓"></p><p><a href="https://winway.github.io/2022/05/24/bigdata-stack-dw">大数据开发之路-离线数仓</a></p><h3 id="实时离线融合-airflow"><a href="#实时离线融合-airflow" class="headerlink" title="实时离线融合: airflow"></a>实时离线融合: airflow</h3><p><img src="/2023/04/30/emr-scheduler/02.png" alt="airflow"></p><p><a href="https://kids-first.github.io/kf-airflow-dags/warehouse.html">Data Warehouse</a></p><h3 id="实时离线融合-dolphinscheduler"><a href="#实时离线融合-dolphinscheduler" class="headerlink" title="实时离线融合: dolphinscheduler"></a>实时离线融合: dolphinscheduler</h3><p><img src="/2023/04/30/emr-scheduler/03.png" alt="dolphinscheduler"></p><p><a href="https://blog.csdn.net/weixin_42138677/article/details/119685577">基于DolphinScheduler的使用浅谈数仓分层及模型设计</a></p><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p><a href="https://cloud.tencent.com/developer/article/1979180">大数据调度平台分类大对比(Oozie/Azkaban/AirFlow/XXL-Job/DolphinScheduler)</a></p><p><a href="https://blog.csdn.net/kyle0349/article/details/108947115">【大数据】【调度】Airflow 和 Azkaban的选型</a></p><table><thead><tr><th>特性\组件</th><th>airflow</th><th>dolphinscheduler</th><th>azkaban</th></tr></thead><tbody><tr><td>web界面</td><td>有，功能比较多</td><td>有，且支持中文</td><td>有，比较简单</td></tr><tr><td>工作流语法</td><td>python代码内定义，可通过界面查看但不能编辑</td><td>可视化编辑，对小白很友好，但不适合通过代码编排</td><td>配置文件</td></tr><tr><td>跨dag/project依赖</td><td>支持，可通过 <a href="https://airflow.apache.org/docs/apache-airflow/stable/howto/operator/external_task_sensor.html">ExternalTaskSensor</a> 配置</td><td>不支持</td><td>不支持</td></tr><tr><td>易用程度</td><td>安装和维护上手难度高，<a href="https://airflow.apache.org/docs/apache-airflow/stable/core-concepts/overview.html">组件</a>包括 WebServer、Scheduler、Worker</td><td>安装维护上手难度高，<a href="https://dolphinscheduler.apache.org/zh-cn/docs/3.1.5/about/glossary">组件</a>包括 master、api、alert、worker 等，不过界面支持中文，可视化编辑任务比较友好</td><td>上手难度低，只有 webserver、executor 两个组件</td></tr><tr><td>变量定义</td><td>支持全局参数，和一些内置模板变量，如 </td><td>不支持全局变量</td><td>不支持全局变量</td></tr><tr><td>调度中心HA</td><td><a href="https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/scheduler.html#running-more-than-one-scheduler">支持</a> ，对 db 版本有要求（mysql &gt;= 8）</td><td>支持</td><td><a href="https://github.com/azkaban/azkaban/issues/952">不支持</a></td></tr><tr><td>执行器HA</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>权限管控</td><td>支持用户、任务级别配置</td><td>用户角色支持管理员、普通用户两种，不支持项目层级配置</td><td>支持用户、任务级别配置</td></tr><tr><td>任务监控</td><td>可通过定义 <a href="https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/callbacks.html">on_failure_callback</a> 在任务结束后触发提醒，<a href="https://feijin.github.io/2021/03/14/airflow-alert-example/">示例</a>，支持<a href="https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/metrics.html">metrics</a></td><td><a href="https://dolphinscheduler.apache.org/zh-cn/docs/3.1.5/guide/alert/alert_plugin_user_guide">支持任务告警</a>，支持通过企业微信、飞书等方式发送</td><td>可配置 job 的 failure.emails 让任务失败后发送邮件提醒</td></tr></tbody></table><p>总结: ds 对各种 ETL 任务类型的界面化配置支持更好，airflow 更适合 python 基础较好的团队使用，编排任务代码化 笔者认为也是一种趋势。azkaban 较为传统，使用起来更简单，也更适合定义流程简单的 ETL 任务，但是相比前两个组件，更新不是特别活跃</p><h3 id="airflow-架构和界面"><a href="#airflow-架构和界面" class="headerlink" title="airflow 架构和界面"></a>airflow 架构和界面</h3><p><img src="/2023/04/30/emr-scheduler/04.png" alt="airflow"></p><p><img src="/2023/04/30/emr-scheduler/05.png" alt="airflow"></p><p><a href="https://airflow.apache.org/docs/apache-airflow/stable/core-concepts/overview.html">Architecture Overview</a></p><h3 id="dolphinscheduler-界面"><a href="#dolphinscheduler-界面" class="headerlink" title="dolphinscheduler 界面"></a>dolphinscheduler 界面</h3><p><img src="/2023/04/30/emr-scheduler/06.png" alt="dolphinscheduler"></p><h3 id="azkaban-架构和界面"><a href="#azkaban-架构和界面" class="headerlink" title="azkaban 架构和界面"></a>azkaban 架构和界面</h3><p><img src="/2023/04/30/emr-scheduler/07.png" alt="azkaban"></p><p><img src="/2023/04/30/emr-scheduler/08.png" alt="azkaban"></p><p><a href="https://www.hnbian.cn/posts/5d59c988.html">1. Azkaban 介绍</a></p><h2 id="数据同步组件"><a href="#数据同步组件" class="headerlink" title="数据同步组件"></a>数据同步组件</h2><p>对数据同步而言，支持更多的数据源是更重要的，传统数据同步工具，如 <a href="https://github.com/apache/sqoop">sqoop</a>、<a href="https://github.com/alibaba/DataX">datax</a> ，都是对基于hadoop的传统数仓、基于关系型数据库 支持更好，不过对更现代的 <a href="https://en.wikipedia.org/wiki/Online_analytical_processing">OLAP</a>、甚至<a href="https://www.oracle.com/cn/big-data/what-is-data-lakehouse">湖仓一体</a>的架构支持并不够好</p><p>随着发展，功能更强大的同步组件 如 <a href="https://github.com/apache/incubator-seatunnel">seatunnel</a>、<a href="https://github.com/DTStack/chunjun">chunjun</a> 也逐渐占有了一席之地，在业务使用实际场景中可以优先选择它们</p><h3 id="sqoop"><a href="#sqoop" class="headerlink" title="sqoop"></a>sqoop</h3><p><img src="/2023/04/30/emr-scheduler/09.png" alt="sqoop"></p><p><a href="https://blog.csdn.net/mamamalululu00000000/article/details/100013482">Sqoop原理和架构</a></p><p><a href="https://www.jianshu.com/p/23ec3a386dc9">【知识】ETL大数据集成工具Sqoop、dataX、Kettle、Canal、StreamSets大比拼</a></p><p>特点：</p><ul><li>离线全量同步，不支持增量导入</li><li>仅支持关系型数据库，比如从 mysql 同步到 hive</li><li>任务运行方式: mapreduce</li></ul><h3 id="datax"><a href="#datax" class="headerlink" title="datax"></a>datax</h3><p><img src="/2023/04/30/emr-scheduler/10.png" alt="datax"></p><p><a href="https://github.com/alibaba/DataX/blob/master/introduction.md">阿里云开源离线同步工具DataX3.0介绍</a></p><p><img src="/2023/04/30/emr-scheduler/11.png" alt="datax"></p><p><a href="https://dengchuncui.github.io/2020/10/22/%E3%80%90%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E3%80%91DATAX%20%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/">数据同步 DATAX 工作原理及源码解读</a></p><p>特点：</p><ul><li>相比 sqoop 支持的数据源更丰富，支持非关系型数据库（如从 mysql 写到 hdfs、mongodb、es 等） </li><li>表字段的映射，必须提前写成json配置</li><li>同步任务在单节点运行（在执行 datax 的节点运行）</li></ul><h3 id="canal"><a href="#canal" class="headerlink" title="canal"></a>canal</h3><p><img src="/2023/04/30/emr-scheduler/12.png" alt="canal"></p><p><a href="https://www.cnblogs.com/caoweixiong/p/11824423.html">Canal——原理架构及应用场景</a></p><p>特点：</p><ul><li>只能同步增量数据（本质：模拟 mysql slave 进行数据同步）</li><li>支持数据源: kafka、rocketmq、hbase、elasticsearch</li><li>实时任务管理：需要单独部署管理服务，如 cloudin-datax、Canal Admin</li></ul><h3 id="datalink"><a href="#datalink" class="headerlink" title="datalink"></a>datalink</h3><p><img src="/2023/04/30/emr-scheduler/13.png" alt="datalink"></p><p><a href="https://github.com/ucarGroup/DataLink">git-ucarGroup/DataLink</a></p><p>特点：</p><ul><li>支持增量数据同步任务的管理，基本任务启停、同步状态检查等</li><li>对 canal 、datax 等同步工具进行了封装，支持数据源: mysql、hbase、elasticsearch、kafka、kudu</li><li>神州租车开源，现在不再维护，不过基本功能比较完善</li></ul><p><a href="https://mp.weixin.qq.com/s?__biz=MzkwOTIxNDQ3OA==&mid=2247533077&idx=1&sn=2034a6897883e149b350b39facc98f6a&source=41#wechat_redirect">神州优车数据交换平台的架构、建设与痛点难点详解</a></p><h3 id="seatunnel"><a href="#seatunnel" class="headerlink" title="seatunnel"></a>seatunnel</h3><p><img src="/2023/04/30/emr-scheduler/14.png" alt="seatunnel"></p><p><a href="https://www.cnblogs.com/liugp/p/17297756.html">【大数据】什么是数据集成？（SeaTunnel 集成工具介绍）</a></p><p>特点：</p><ul><li>通过spark / flink 方式同步数据，支持更多现代数据源（clickhouse、doris、iceberg 等）</li><li>UI 还不是很完善</li><li>笔者后续会更详细地体验这个工具，补充和更多实时同步组件的使用对比</li></ul><h3 id="airbyte"><a href="#airbyte" class="headerlink" title="airbyte"></a>airbyte</h3><p><img src="/2023/04/30/emr-scheduler/15.png" alt="airbyte"></p><p><a href="https://docs.airbyte.com/understanding-airbyte/high-level-view">Architecture overview</a></p><p>特点：</p><ul><li>完全云原生化的数据同步服务，一个同步任务对应一个容器</li><li>适用ETL 场景（配置定时任务，最小周期<a href="https://discuss.airbyte.io/t/does-airbyte-sync-near-real-time-or-streaming-syncs/354">5分钟</a>，并不是完全实时）</li><li>上手难度高，学有余力可以尝试</li></ul><h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><p>对于任务调度平台来说，本质上都是 <strong>定时 + 触发任务 + 管理任务</strong> 的使用机制，基本架构都离不开 <strong>scheduler + task worker</strong>，相差不大</p><p>但对于数据同步组件来说，现在有一种离线往实时迁移的趋势。所以 诸如 sqoop、datax 这种传统离线数据同步方式应该会逐渐淡出，相比较，seatunnel 、 airbyte 这种后起之秀 一定会越来越强大。不过，实时也意味着需要更灵活的资源分配方式，需要掌握更深的技术栈，对开发人员要求也会更高</p><p>Anyway，所有大数据架构的底层都是存储。数据如果是存放在 hdfs + hive 这种传统数仓架构，对实时性要求不高，那么 sqoop + azkaban / airflow 模式就完全足够了。数据需要存放在 clickhouse / kudu 这种 OLAP 存储，业务需要获取实时数据进行分析，那么就需要 seatunnel 这种实时同步的服务。没有绝对的哪个更好，只有更合适</p>]]></content>
    
    
    <summary type="html">大数据组件调研</summary>
    
    
    
    <category term="大数据" scheme="http://smiecj.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="大数据" scheme="http://smiecj.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    <category term="emr" scheme="http://smiecj.github.io/tags/emr/"/>
    
  </entry>
  
  <entry>
    <title>不妨与众不同</title>
    <link href="http://smiecj.github.io/2023/04/17/tomoo-rashiku/"/>
    <id>http://smiecj.github.io/2023/04/17/tomoo-rashiku/</id>
    <published>2023-04-16T16:00:00.000Z</published>
    <updated>2023-04-16T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/tn5yrKOxwKbg7vxFuwO3cg">本文公众号</a></p><h2 id="歌词和翻译"><a href="#歌词和翻译" class="headerlink" title="歌词和翻译"></a>歌词和翻译</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">あの服に 釘付けなのに</span><br><span class="line">なんでまた 後ずさり</span><br><span class="line">僕じゃなくて服が僕をきちゃいそう</span><br><span class="line"></span><br><span class="line">对那件衣服，突然有点爱不释手</span><br><span class="line">但为什么之后又临阵退却</span><br><span class="line">仿佛穿上之后就不是我自己了</span><br><span class="line"></span><br><span class="line">やーやー 続けてみれば</span><br><span class="line">みんなから慣れてくるのさ</span><br><span class="line">おしゃれボーイはそうそそのかしてた</span><br><span class="line"></span><br><span class="line">呀，不过再多保持这种风格的话</span><br><span class="line">大家说不定就能习惯了吧</span><br><span class="line">对面那位帅哥，似乎还在邀请我共舞呢</span><br><span class="line"></span><br><span class="line">らしくもなくたっていいでしょう</span><br><span class="line">着こなせるか NO かはあとじゃない鏡をにらんで迷ううちに</span><br><span class="line">You, your, you, I my, me</span><br><span class="line">季節が変わるよ</span><br><span class="line"></span><br><span class="line">不妨与众不同</span><br><span class="line">合身 Yes or No，这问题就先抛到一边去吧</span><br><span class="line">面对镜子前精心装扮的自己，陶醉之时</span><br><span class="line">身边无数的你和我</span><br><span class="line">还有窗外的季节，仿佛都在改变</span><br><span class="line"></span><br><span class="line">昨日までの僕がこうなら</span><br><span class="line">今日もこうじゃなくちゃ</span><br><span class="line">なんてな訳ないな引っ張られなくていい</span><br><span class="line"></span><br><span class="line">昨天的我是这种风格</span><br><span class="line">今天的我想尝试非同寻常</span><br><span class="line">这种太过勉强的执念，就暂时放在一边好啦</span><br><span class="line"></span><br><span class="line">「あの人」になりたいんじゃない</span><br><span class="line">「パーフェクト」も違うなあ</span><br><span class="line">ただ 僕は僕を引き伸ばしたいだけ</span><br><span class="line"></span><br><span class="line">不能成为「那样的人」为好</span><br><span class="line">达不到「perfect」的程度也罢</span><br><span class="line">只是想展示，就这样原原本本的自我</span><br><span class="line"></span><br><span class="line">あるのはいつも願いだけ</span><br><span class="line">あるのはいつも願いだけ</span><br><span class="line">あるのはいつも願いだけ</span><br><span class="line">残るのはいつも願いだけ</span><br><span class="line"></span><br><span class="line">唯有让我坚持的愿望</span><br><span class="line">唯有期待改变的愿望</span><br><span class="line">唯有和你相关的愿望</span><br><span class="line">唯有这些愿望，留存于心</span><br><span class="line"></span><br><span class="line">らしくもなくたっていいでしょう</span><br><span class="line">真似でもふりでもやって損じゃない</span><br><span class="line">もっと楽しくなれるよ You you</span><br><span class="line">No one knows who I am</span><br><span class="line">No one knows who you are</span><br><span class="line"></span><br><span class="line">不妨与众不同</span><br><span class="line">真心或是伪装，都无计得失</span><br><span class="line">你呀，不妨卸下更多的重负</span><br><span class="line">谁也不会在意我的真面目</span><br><span class="line">也不会在意你酒量有几度</span><br><span class="line"></span><br><span class="line">らしくもなくたっていいでしょう</span><br><span class="line">大通りに出るしかないのさ</span><br><span class="line">しれっと着替えて歩いてれば</span><br><span class="line">You are you, I am I</span><br><span class="line">季節が笑うよ</span><br><span class="line">ドキドキしてるよ</span><br><span class="line"></span><br><span class="line">那就特立独行吧</span><br><span class="line">大道理他们爱说，也没办法</span><br><span class="line">换身轻装，说走就走</span><br><span class="line">你就是你，我还是我</span><br><span class="line">季节随风笑</span><br><span class="line">内心跟你跳</span><br></pre></td></tr></table></figure><h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><p>现实中真能这么随意任性就好了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/tn5yrKOxwKbg7vxFuwO3cg&quot;&gt;本文公众号&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;歌词和翻译&quot;&gt;&lt;a href=&quot;#歌词和翻译&quot; class=&quot;headerlink&quot; title=&quot;歌词和翻译</summary>
      
    
    
    
    <category term="音乐" scheme="http://smiecj.github.io/categories/%E9%9F%B3%E4%B9%90/"/>
    
    <category term="TOMOO" scheme="http://smiecj.github.io/categories/%E9%9F%B3%E4%B9%90/TOMOO/"/>
    
    
    <category term="音乐" scheme="http://smiecj.github.io/tags/%E9%9F%B3%E4%B9%90/"/>
    
    <category term="日语" scheme="http://smiecj.github.io/tags/%E6%97%A5%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>shell 常用工具指令</title>
    <link href="http://smiecj.github.io/2023/04/14/shell-tools/"/>
    <id>http://smiecj.github.io/2023/04/14/shell-tools/</id>
    <published>2023-04-13T16:00:00.000Z</published>
    <updated>2023-04-14T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/xiaoliizi/article/details/130158402">本文csdn博客地址</a></p><h2 id="常用组件-服务安装"><a href="#常用组件-服务安装" class="headerlink" title="常用组件/服务安装"></a>常用组件/服务安装</h2><p>背景: 不同语言组件开发需求，需要经常快速切换开发环境，或者在新机器安装开发环境。于是将常用开发语言的安装 固化成脚本，方便后续使用</p><p>项目: <a href="https://github.com/smiecj/shell-tools">shell-tools</a></p><p>举例: 安装 trino 较高版本，需要 jdk17，通过这个项目 直接执行 <strong>make java-new</strong> 即可</p><p>安装完成后，环境变量中自动就配置了 jdk17</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># java</span><br><span class="line">export JAVA_HOME=/usr/java/jdk-17.0.6+10 # java</span><br></pre></td></tr></table></figure><h2 id="hive-表迁移"><a href="#hive-表迁移" class="headerlink" title="hive 表迁移"></a>hive 表迁移</h2><p><a href="https://www.jianshu.com/p/82af10e8249e">参考-hive数据迁移</a></p><p>背景: 需要跨集群迁移 hive 表结构，涉及两步: 迁移表数据 和 迁移表结构</p><h3 id="表数据迁移"><a href="#表数据迁移" class="headerlink" title="表数据迁移"></a>表数据迁移</h3><p>如果两个集群环境相通，可直接迁移 hdfs 数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su ods -c &quot;hadoop distcp hdfs://source_cluster/apps/hive/warehouse/db_name.db hdfs://target_cluster/apps/hive/warehouse/db_name/db&quot;</span><br></pre></td></tr></table></figure><p>如果网络不互通，需要先把数据下载下来，再手动传到目标集群。如果数据量不大还是可行的<br>su hdfs -c “hdfs dfs -get hdfs://cluster_name/apps/hive/warehouse/db_name.db/table_name”</p><p>for current_table in ${table_arr[@]}<br>do<br>    su hdfs -c “hdfs dfs -get hdfs://cluster_name/apps/hive/warehouse/db_name.db/${current_table}”<br>done</p><h3 id="表结构迁移"><a href="#表结构迁移" class="headerlink" title="表结构迁移"></a>表结构迁移</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">table_arr=(需要导出的表列表)</span><br><span class="line"></span><br><span class="line">echo &quot;&quot; &gt;&gt; /tmp/ddl.sql</span><br><span class="line">for current_table in $&#123;table_arr[@]&#125;</span><br><span class="line">do</span><br><span class="line">beeline -u jdbc:hive2://hive_server_host:10000/dw -n hive -e &quot;show create table $&#123;current_table&#125;&quot; 2&gt;/dev/null | sed &#x27;s/.*createtab_stmt.*//g&#x27; | sed &#x27;s/.*--.*//g&#x27; | sed &#x27;s/| //g&#x27; | sed -E &#x27;s/ +\|//g&#x27; &gt;&gt; /tmp/ddl.sql</span><br><span class="line">echo &quot;;&quot; &gt;&gt; /tmp/ddl.sql</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>然后在目标环境 执行导出的 ddl.sql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">beeline -n user -u jdbc:hive2://hive_server_host:10000/db_name -f /tmp/ddl.txt</span><br></pre></td></tr></table></figure><h2 id="批量添加-ssh-key"><a href="#批量添加-ssh-key" class="headerlink" title="批量添加 ssh key"></a>批量添加 ssh key</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ip_list=(需要添加的机器列表)</span><br><span class="line">ssh_port=22</span><br><span class="line"></span><br><span class="line">ssh_public_key_arr=(&quot;ssh-rsa ...&quot;)</span><br><span class="line"></span><br><span class="line">IFS=&quot;&quot;</span><br><span class="line">for current_ip in $&#123;ip_list[@]&#125;</span><br><span class="line">do</span><br><span class="line">ssh -p$&#123;ssh_port&#125; $&#123;current_ip&#125; &quot;echo &#x27;&#x27; | sudo tee -a /root/.ssh/authorized_keys&quot;</span><br><span class="line">for current_ssh_key in $&#123;ssh_public_key_arr[@]&#125;</span><br><span class="line">do</span><br><span class="line">ssh -p$&#123;ssh_port&#125; $&#123;current_ip&#125; &quot;echo &#x27;$&#123;current_ssh_key&#125;&#x27; | sudo tee -a /root/.ssh/authorized_keys&quot;</span><br><span class="line">done</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="frp-反向代理批量安装"><a href="#frp-反向代理批量安装" class="headerlink" title="frp 反向代理批量安装"></a>frp 反向代理批量安装</h2><p>公司内网禁用了 服务部署环境 ssh 端口和本地开发环境的连接，登录机器需要通过 <a href="https://docs.jumpserver.org/zh/master/">jumpserver</a> 非常不方便</p><p>参考 <a href="https://github.com/fatedier/frp">frp</a> 项目，写了一个批量在多节点安装 frpc 的脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># frps 安装</span><br><span class="line">echo &quot;sshd:127.0.0.1&quot; &gt;&gt; /etc/hosts.allow</span><br><span class="line"></span><br><span class="line">mkdir -p /opt/modules/frps</span><br><span class="line">pushd /opt/modules/frps</span><br><span class="line">curl -LO https://github.com/fatedier/frp/releases/download/v0.40.0/frp_0.40.0_linux_amd64.tar.gz</span><br><span class="line">tar -xzvf frp_0.40.0_linux_amd64.tar.gz</span><br><span class="line">cd frp_0.40.0_linux_amd64</span><br><span class="line">echo &quot;&quot;&quot;</span><br><span class="line">[common]</span><br><span class="line">bind_port = 7001</span><br><span class="line">authenticate_new_work_conns = true</span><br><span class="line">authenticate_heartbeats = true</span><br><span class="line">authentication_method = token</span><br><span class="line">token = frp认证token</span><br><span class="line">&quot;&quot;&quot; &gt; frps.ini</span><br><span class="line">nohup ./frps -c ./frps.ini &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">popd</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># frpc 批量安装</span><br><span class="line"></span><br><span class="line">ip_list=(需要安装的节点列表)</span><br><span class="line">remote_port=6001</span><br><span class="line">ssh_port=22</span><br><span class="line"></span><br><span class="line">for current_ip in $&#123;ip_list[@]&#125;</span><br><span class="line">do</span><br><span class="line"></span><br><span class="line">ssh -p$&#123;ssh_port&#125; $&#123;current_ip&#125; &quot;mkdir -p /opt/modules/frpc &amp;&amp; cd /opt/modules/frpc &amp;&amp; curl -LO https://github.com/fatedier/frp/releases/download/v0.40.0/frp_0.40.0_linux_amd64.tar.gz &amp;&amp; tar -xzvf frp_0.40.0_linux_amd64.tar.gz &amp;&amp; cd frp_0.40.0_linux_amd64 &amp;&amp; hostname=`hostname | sed &#x27;s/\..*//g&#x27;` &amp;&amp; echo -e &quot;\n[common]\nserver_addr = router1\nserver_port = 7001\nauthenticate_new_work_conns = true\nauthenticate_heartbeats = true\nauthentication_method = token\ntoken = frp认证token\n[ssh_$&#123;remote_port&#125;]\ntype = tcp\nlocal_port = $&#123;ssh_port&#125;\nremote_port = $&#123;remote_port&#125;&quot; | tee frpc.ini&quot;</span><br><span class="line"></span><br><span class="line">ssh -p$&#123;ssh_port&#125; $&#123;current_ip&#125; &quot;ps -ef | grep &#x27;frpc&#x27; | grep -v grep | awk &#x27;&#123;print \$2&#125;&#x27; | xargs --no-run-if-empty kill -9&quot;</span><br><span class="line">ssh -p$&#123;ssh_port&#125; $&#123;current_ip&#125; &quot;nohup /opt/modules/frpc/frp_0.40.0_linux_amd64/frpc -c /opt/modules/frpc/frp_0.40.0_linux_amd64/frpc.ini &gt; /dev/null 2&gt;&amp;1 &amp;&quot;</span><br><span class="line"></span><br><span class="line">ssh -p$ $&#123;current_ip&#125; &#x27;echo &quot;sshd:127.0.0.&quot; | tee -a /etc/hosts.allow&#x27;</span><br><span class="line"></span><br><span class="line">remote_port=$((remote_port+1))</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="快速访问指定容器名"><a href="#快速访问指定容器名" class="headerlink" title="快速访问指定容器名"></a>快速访问指定容器名</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># /usr/bin/goto</span><br><span class="line"></span><br><span class="line">#!/bin/bash</span><br><span class="line"># set -euxo pipefail</span><br><span class="line"></span><br><span class="line">echo &quot;hello go!&quot;</span><br><span class="line"></span><br><span class="line">if [ $# -lt 2 ]; then</span><br><span class="line">        echo &quot;Invalid input!&quot;</span><br><span class="line">        exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">node_name=$1</span><br><span class="line">env_name=$2</span><br><span class="line"></span><br><span class="line"># goto container dev_zsh</span><br><span class="line">if [ &quot;$node_name&quot; == &quot;container&quot; ]; then</span><br><span class="line">        container_name=$env_name</span><br><span class="line">        container_count=`docker ps -a --filter name=^$container_name\$ | grep -v &quot;CREATED&quot; | wc -l | sed &#x27;s/\t//g&#x27; | sed &#x27;s/ //g&#x27;`</span><br><span class="line">        if [ &quot;1&quot; == &quot;$container_count&quot; ]; then</span><br><span class="line">                container_id=`docker ps -a --filter name=^$container_name\$ | grep -v &quot;CREATED&quot; | sed &#x27;s/ .*//g&#x27;`</span><br><span class="line">                docker exec -it $container_id /bin/zsh</span><br><span class="line">                if [ 0 -ne $? ]; then</span><br><span class="line">                        docker exec -it $container_id /bin/bash</span><br><span class="line">                fi</span><br><span class="line">        else</span><br><span class="line">                echo &quot;container: $env_name, get count $container_count, will not enter&quot;</span><br><span class="line">        fi</span><br><span class="line">        exit</span><br><span class="line">else</span><br><span class="line">        echo &quot;command not valid&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># goto container dev: bash into container name &quot;dev&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">分享最近自己常用的shell脚本</summary>
    
    
    
    <category term="开发工具" scheme="http://smiecj.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    <category term="shell" scheme="http://smiecj.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/shell/"/>
    
    
    <category term="Linux" scheme="http://smiecj.github.io/tags/Linux/"/>
    
    <category term="shell" scheme="http://smiecj.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>github action 基于个人项目实践</title>
    <link href="http://smiecj.github.io/2023/04/04/github-action/"/>
    <id>http://smiecj.github.io/2023/04/04/github-action/</id>
    <published>2023-04-03T16:00:00.000Z</published>
    <updated>2023-06-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/xiaoliizi/article/details/131145170">本文csdn地址</a></p><h2 id="DevOps-和-Jenkins"><a href="#DevOps-和-Jenkins" class="headerlink" title="DevOps 和 Jenkins"></a>DevOps 和 Jenkins</h2><p>作为一名开发，虽然也没有经常听到 <strong><a href="https://en.wikipedia.org/wiki/DevOps">Devops</a> （研发和运维一体化）这个概念</strong>，但日常工作中已经无处不在地用着 DevOps 工具。自研也好，基于开源项目改造也好，互联网公司基本都会有自已的一套 DevOps 工具</p><p>所谓 DevOps 这个概念，不过是在我们日常开发流程上抽象一层，把<strong>开发、测试、运维</strong>等角色，日常的手动操作，都<strong>抽象成特定的语言/模板表述</strong>。有了这一层抽象之后，任务的<strong>自动化</strong>就有基础了。自动化之后 各个角色也能够从杂事中解放出来，分担其他角色的事情，或是更专注于领域深层的技术</p><p>一个完全没有实现自动化的研发体系，会是什么样的呢？想象一下：开发需要三头六臂，一边忙着开发需求，一边因为单元测试不够完善，不停地改着来自线上环境退回的 bug 单，甚至还要和运维 battle 服务部署的细节；测试一边要用 jmeter 给开发刚发布到测试环境的服务做压测，一边还要被测试组长批评: 这么基本的 bug 你怎么没有测出来？运维，那就更不用说了，这边数据库需要扩容，那边服务需要发布，根本没有停下休息的时候</p><!--开发需要完成需求功能开发，进行编写代码、提交到仓库、保证。测试需要保证上线生产环境的服务完整想象一下如果整个开发流程 都需要手动，会是一个什么场景: **开发人员**准时准点（下划线）并跟**测试人员**通知说 需求已经开发完成，可以**测试**了，测试人员又回头跟你说，那你在测试环境**发布一下版本**，开发就说好，于是**在开发机器上**执行 mvn package 给**项目打好了包**，把文件传给测试，测试开始**在测试机上执行测试用例**，所有用例都通过之后，又**通知开发**: 好你这个服务可以发布了，于是开发又要把包发给**运维人员**，**运维在生产环境把服务包部署好**，最后由**用户验收需求**。好了，整个过程 大家都掉了不少头发--><p>光是想象一下就已经头大了。如果不依靠成熟的工具 去分担一些琐事，不管是什么角色，都无法专注自己应该做的事</p><p>于是我们要先说到 <strong><a href="https://github.com/jenkinsci/jenkins">Jenkins</a></strong>: 一个开源的 <a href="https://en.wikipedia.org/wiki/CI/CD">CI/CD</a> （持续集成、持续开发） 服务，对 DevOps 流程做了很好的抽象，上面说到的所有过程，在 Jenkins 中都变成了<strong>插件</strong>。不管你是开发 测试 还是运维，总能在<a href="https://plugins.jenkins.io/">插件市场</a>中找到适合自己的，只需要按照既定的模板写好任务流程 ，就能自动化地执行任务了</p><p><img src="/2023/04/04/github-action/11.png" alt="Jenkins 插件市场"></p><p>举个例子，<a href="https://plugins.jenkins.io/golang">Go</a> 这个插件，就可以帮你做好 golang 环境的初始化工作。你只需要把服务编译、打包指令写好就行，以后都可以用同一个模板<br>官方示例:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">  <span class="comment">// 选择任意执行机器</span></span><br><span class="line">  agent any</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义 golang 版本为 1.19，插件会自动帮我们在执行器中安装这个版本</span></span><br><span class="line">  tools &#123; go &#x27;1.19&#x27; &#125;</span><br><span class="line"></span><br><span class="line">  stages &#123;</span><br><span class="line">    stage(&#x27;Build&#x27;) &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">        <span class="comment">// 打印 golang 版本</span></span><br><span class="line">        sh &#x27;go version&#x27;</span><br><span class="line">        <span class="comment">// 编译产生可执行文件</span></span><br><span class="line">        sh &#x27;go build -o main ./main.go&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过正是因为Jenkins对流程的抽象程度很高，上手难度也并不低。它的<strong>任务定义语法、插件系统、容器化部署、集群部署</strong> ，每一块都可以深度展开。本文的重点并不是要深入介绍 Jenkins，也不是把目光放到公司级别: 几千上万人使用的DevOps工具是什么样子的，而是<strong>专注于我们自己</strong>，在自己项目的日常开发中，是否也能用上这样能给我们带来便利的工具呢？</p><p>笔者遇到的场景是，自己开发了一个服务镜像仓库（包含各种服务的 Dockerfile），以及一个后台服务。镜像更新了什么功能，需要在本地重新构建镜像提交到 docker hub 仓库；后台项目实现了新功能，想跑跑单元测试 验证完整性，也需要在本地手动执行所有单测方法。虽然说熟能生巧，但总归是<strong>需要自己去“亲力亲为”的事</strong></p><p>正好，今天的主角 <strong><a href="https://docs.github.com/en/actions">Github Action</a></strong>: 这样一个Github直接提供给我们的 自动化CI/CD 工具，就派上了用场。有了它，不管我的服务什么时候需要更新，我都只管把代码提交到 github，剩下的部署和测试过程，都交给 action 帮我执行就好，是真的 <strong>save my time</strong> 了</p><h2 id="本文内容概览"><a href="#本文内容概览" class="headerlink" title="本文内容概览"></a>本文内容概览</h2><p>本文将从 github action 的使用方式入手，介绍它的基本语法，了解如何从零开始构建 action 任务。然后从笔者个人的实践出发，探讨 action 是否真的可以帮助我们提升开发效率<!--。最后扩展了解一下其他的公有云持续构建产品，看看网上其他人对这些产品的使用体验--></p><h2 id="github-action"><a href="#github-action" class="headerlink" title="github action"></a>github action</h2><h3 id="创建-action-任务"><a href="#创建-action-任务" class="headerlink" title="创建 action 任务"></a>创建 action 任务</h3><p><a href="https://docs.github.com/en/actions/quickstart">官方教程-Quickstart for GitHub Actions</a></p><p>Github Action 任务和 Github 代码仓库之间是绑定关系，<strong>一个 action 任务的描述文件最终会挂载到项目的 .github/workflows 目录下</strong>。我们可以在Github 上创建一个项目，然后按照官方文档的 quickstart 示例来提交一个 action 任务，就能体验基本功能了</p><p>这个任务不需要和仓库代码有任何关系，一个空项目都可以提交 action 任务</p><p>示例任务: （触发条件为 push 代表任意提交都会触发执行）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">name: GitHub Actions Demo</span><br><span class="line">run-name: $&#123;&#123; github.actor &#125;&#125; is testing out GitHub Actions 🚀</span><br><span class="line">on: [push]</span><br><span class="line">jobs:</span><br><span class="line">  Explore-GitHub-Actions:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      # 打印一些 github action 自带的环境变量，如 github.event_name: 时间名称（push）、github.ref: 分支名（refs/heads/smiecj-patch-1）</span><br><span class="line">      - run: echo &quot;🎉 The job was automatically triggered by a $&#123;&#123; github.event_name &#125;&#125; event.&quot;</span><br><span class="line">      - run: echo &quot;🐧 This job is now running on a $&#123;&#123; runner.os &#125;&#125; server hosted by GitHub!&quot;</span><br><span class="line">      - run: echo &quot;🔎 The name of your branch is $&#123;&#123; github.ref &#125;&#125; and your repository is $&#123;&#123; github.repository &#125;&#125;.&quot;</span><br><span class="line">      - name: Check out repository code</span><br><span class="line">        uses: actions/checkout@v3</span><br><span class="line">      - run: echo &quot;💡 The $&#123;&#123; github.repository &#125;&#125; repository has been cloned to the runner.&quot;</span><br><span class="line">      - run: echo &quot;🖥️ The workflow is now ready to test your code on the runner.&quot;</span><br><span class="line">      - name: List files in the repository</span><br><span class="line">        run: |</span><br><span class="line">          ls $&#123;&#123; github.workspace &#125;&#125;</span><br><span class="line">      - run: echo &quot;🍏 This job&#x27;s status is $&#123;&#123; job.status &#125;&#125;.&quot;</span><br></pre></td></tr></table></figure><p>提交任务过程: 首先在仓库的 Action 一栏 创建一个自定义任务</p><p><img src="/2023/04/04/github-action/06.png" alt="创建 github action"></p><p>然后会提示 是选择直接 commit 到主分支 还是创建一个单独分支 并创建 pr，这里建议选择后者</p><p><img src="/2023/04/04/github-action/07.png" alt="提交 github action"></p><p>pr创建完成后，将自动触发 action 任务的执行，如下图 显示任务执行中</p><p><img src="/2023/04/04/github-action/08.png" alt="action 状态"></p><p>action 执行的每一个步骤（step）都有非常详细的日志</p><p><img src="/2023/04/04/github-action/10.png" alt="action 日志"></p><p>如果我们需要把刚才创建的 action 流程保存下来，可以把这个 pr 合并。也可以直接在本地开发时手动创建 .github/workflows 目录，将流程定义保存成 yml 文件，提交到仓库后就能自动触发执行了</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><table><thead><tr><th>概念</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions#workflows">Workflow</a></td><td>任务单位，一个 github action yaml 文件即对应一个任务，一个 workflow 下 可定义多个 job</td></tr><tr><td><a href="https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions#events">Event</a></td><td>触发 workflow 运行的事件，可以是一次 commit 提交，一次 pr 合并请求，到达设定的触发时间等</td></tr><tr><td><a href="https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions#jobs">Job</a></td><td>Workflow 内定义的具体执行的任务，同一个 Workflow 中的任务将会在同一个 Runner 中运行，因此可以设定依赖关系，上一个 Job 的产物可以在下一个 Job 使用。默认没有依赖关系的 Job 将会并行执行</td></tr><tr><td><a href="https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions#actions">Action</a></td><td>将 Workflow 开放为模板，可在 Market 中供别人使用</td></tr><tr><td><a href="https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions#runners">Runner</a></td><td>Workflow 执行环境，每个 Runner 同时只能运行一个 job。若有特殊需求，可以使用<a href="https://docs.github.com/en/actions/using-github-hosted-runners/using-larger-runners">更高性能的执行器</a>，或者使用<a href="https://docs.github.com/en/actions/hosting-your-own-runners">自己部署的执行器</a></td></tr></tbody></table><h3 id="Market"><a href="#Market" class="headerlink" title="Market"></a>Market</h3><p><a href="https://github.com/marketplace?type=actions">Github Action Market</a> 类似刚才提到的 Jenkins Market，有非常多现成的，可以直接复用的任务。分类包括: 服务发布（如将服务发布到 aws）、安全（CodeQL 扫描）、持续集成（编译）、自动化（提交issue后自动回复）、页面生成（Hugo），非常丰富</p><p><img src="/2023/04/04/github-action/17.png" alt="choose a workflow from market"></p><h3 id="Workflow-基本语法"><a href="#Workflow-基本语法" class="headerlink" title="Workflow 基本语法"></a>Workflow 基本语法</h3><p><a href="https://docs.github.com/en/actions/using-workflows/about-workflows">About workflows</a></p><h4 id="触发条件"><a href="#触发条件" class="headerlink" title="触发条件"></a>触发条件</h4><p>对应基本概念中的 Action，常见配置有:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 在提交到 main 分支时触发（PR 不会触发）</span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">    - main</span><br><span class="line">    - release/*</span><br><span class="line"></span><br><span class="line"># 提交 合并到 main 分支的 PR 时触发</span><br><span class="line">on:</span><br><span class="line">  pull_request:</span><br><span class="line">    branches:</span><br><span class="line">    - main</span><br><span class="line"></span><br><span class="line"># push / pr 且不论分支</span><br><span class="line">on:</span><br><span class="line">  [push, pull_request]</span><br><span class="line"></span><br><span class="line"># 定时触发</span><br><span class="line"># 注意: 触发时间为中时区 而不是当地时间 / crontab 表达式中最后一位的 day of the week 范围为 0-6</span><br><span class="line">on:</span><br><span class="line">  schedule:</span><br><span class="line">    - cron:  &#x27;30 5,17 * * *&#x27;</span><br></pre></td></tr></table></figure><p><a href="https://docs.github.com/zh/actions/using-workflows/events-that-trigger-workflows">更多触发条件</a></p><h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">on:</span><br><span class="line">  workflow_dispatch</span><br><span class="line"></span><br><span class="line">env:</span><br><span class="line">  DAY_OF_WEEK: Monday</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  greeting_job:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    env:</span><br><span class="line">      Greeting: Hello</span><br><span class="line">    steps:</span><br><span class="line">      - name: &quot;Say Hello Mona it&#x27;s Monday&quot;</span><br><span class="line">        run: echo &quot;$Greeting $First_Name. Today is $DAY_OF_WEEK!&quot;</span><br><span class="line">        env:</span><br><span class="line">          First_Name: Mona</span><br></pre></td></tr></table></figure><p><a href="https://docs.github.com/zh/actions/learn-github-actions/variables#default-environment-variables">常见默认环境变量</a>，如 GITHUB_ACTOR 表示流程发起者</p><h4 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h4><p>对应概念的 Runner 执行器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jobs:</span><br><span class="line">  my_job:</span><br><span class="line">    name: deploy to staging</span><br><span class="line">    runs-on: ubuntu-18.04</span><br></pre></td></tr></table></figure><p><a href="https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources">可选 Runner 列表</a></p><p>Linux 执行器的默认分配资源：2核7G 14G SSD – 基本够用了</p><h4 id="初始化各语言环境"><a href="#初始化各语言环境" class="headerlink" title="初始化各语言环境"></a>初始化各语言环境</h4><p>在Market中搜索关键字 actions/setup-语言名，大部分语言都有官方插件 支持初始化语言环境。比如如我们需要编译一个 java + maven 工程，就可以使用 <a href="https://github.com/actions/setup-java">actions/setup-java</a> 插件，它会帮我们装好 java、maven、gradle 和 sbt 等环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">name: Java CI</span><br><span class="line"></span><br><span class="line">on: [push]</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line"></span><br><span class="line">    steps:</span><br><span class="line">      - uses: actions/checkout@v3</span><br><span class="line">      - name: Set up JDK 17</span><br><span class="line">        uses: actions/setup-java@v3</span><br><span class="line">        with:</span><br><span class="line">          java-version: &#x27;17&#x27; # 安装 Java 版本</span><br><span class="line">          distribution: &#x27;temurin&#x27; # 开源jdk 类型，可选 Zulu、Temurin 和 AdoptOpenJDK</span><br><span class="line">      - name: Build with Maven</span><br><span class="line">        # 通过 maven 编译项目</span><br><span class="line">        run: mvn --batch-mode --update-snapshots package</span><br></pre></td></tr></table></figure><h4 id="产物"><a href="#产物" class="headerlink" title="产物"></a>产物</h4><p>有一些action任务的执行结果 我们是希望 github 先帮我们保管的，比如服务编译后用于发布服务的安装包，或是测试报告等</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 上传</span><br><span class="line">jobs:</span><br><span class="line">  example-job:</span><br><span class="line">    name: Save output</span><br><span class="line">    steps:</span><br><span class="line">      - shell: bash</span><br><span class="line">        run: |</span><br><span class="line">          expr 1 + 1 &gt; output.log</span><br><span class="line">      - name: Upload output file</span><br><span class="line">        uses: actions/upload-artifact@v3</span><br><span class="line">        with:</span><br><span class="line">          name: output-log-file</span><br><span class="line">          path: output.log</span><br><span class="line"></span><br><span class="line"># 下载</span><br><span class="line">jobs:</span><br><span class="line">  example-job:</span><br><span class="line">    steps:</span><br><span class="line">      - name: Download a single artifact</span><br><span class="line">        uses: actions/download-artifact@v3</span><br><span class="line">        with:</span><br><span class="line">          name: output-log-file</span><br></pre></td></tr></table></figure><p>Workflow 的更多语法，如 <a href="https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows">构建过程缓存</a>、<a href="https://docs.github.com/en/actions/using-workflows/reusing-workflows">引用其他项目的 workflow</a> 可参考官方文档</p><h3 id="限额"><a href="#限额" class="headerlink" title="限额"></a>限额</h3><p><a href="https://docs.github.com/en/actions/learn-github-actions/usage-limits-billing-and-administration">Usage limits, billing, and administration</a></p><p>既然是商用产品 免费使用的限额一定是有的，一部分限制如下:</p><ul><li>单次 Job 的执行时间: 6小时</li><li>Workflow 的执行时间: 35天</li><li>一小时内 请求 github api 次数: 1000次</li><li>同时运行的 job 数量: 20个（可以升级账号扩容），超过的将会排队</li></ul><p>个人使用的话 同时运行 job 数 这个比较需要留意。不过避免超过限制的方式也简单: 不同任务的触发时间尽量错开，比如编译A服务设置在凌晨2点触发，编译B服务设置到凌晨3点</p><h2 id="个人实践"><a href="#个人实践" class="headerlink" title="个人实践"></a>个人实践</h2><p>掌握了 Github Action 的基本语法后，就可以基于具体的项目来实践了。笔者进行了镜像自动构建、单测覆盖率统计 两种任务的部署</p><h3 id="镜像构建"><a href="#镜像构建" class="headerlink" title="镜像构建"></a>镜像构建</h3><p>之前做了一些开发环境镜像 和 大数据服务镜像 写成了 Dockerfile，都是在本地手动触发构建和提交的。现在都可以让 github action 帮我自动构建，定期提交到镜像仓库了</p><p><a href="https://frederick-s.github.io/2021/12/26/build-and-push-docker-image-to-docker-hub-with-github-actions/">参考博客-使用 GitHub Actions 自动构建和推送 Docker 镜像到 Docker Hub</a></p><h4 id="准备-dockerhub-开启二次登录-和-创建-token"><a href="#准备-dockerhub-开启二次登录-和-创建-token" class="headerlink" title="准备: dockerhub 开启二次登录 和 创建 token"></a>准备: dockerhub 开启二次登录 和 创建 token</h4><p>首先为了账号尽量安全，不要在 Github 上直接配置账号密码（权限过大），我们需要在 Docker Hub 给自己的账号创建Token</p><p><a href="https://docs.docker.com/docker-hub/access-tokens">参考-Create and manage access tokens</a></p><p>登录 Docker hub -&gt; 右上角账号 -&gt; Account Settings -&gt; Security -&gt; New Access Token</p><p><img src="/2023/04/04/github-action/01.png" alt="创建token"></p><p>如上图，创建了一个 Github Action 专用 token ，因为需要提交/覆盖镜像 所以 Write 权限是需要的。当然这个权限还是比较大，我们还是需要注意保管好 不要泄露</p><p>然后将这个 token 在 github 中配置，登录 github -&gt; 进入需要添加 action 任务的仓库 -&gt; Settings -&gt; Secrets and variables -&gt; Actions -&gt; New repository secret 。secret key 将作为任务的配置</p><p><img src="/2023/04/04/github-action/02.png" alt="配置token"></p><h4 id="准备-项目中提供-Dockerfile"><a href="#准备-项目中提供-Dockerfile" class="headerlink" title="准备: 项目中提供 Dockerfile"></a>准备: 项目中提供 Dockerfile</h4><p>既然需要支持 通过 action 自动构建镜像，在项目中提供 Dockerfile 自然也是必须的</p><p>以 <a href="https://github.com/apache/superset">superset</a> 为例，根路径下的 <a href="https://github.com/apache/superset/blob/master/Dockerfile">Dockerfile</a>，action 文件中有发布镜像流程 <a href="https://github.com/apache/superset/blob/master/.github/workflows/docker-release.yml">docker-release.yml</a> ，算是一个非常标准的参考项目了</p><p>如何给自己的服务编写 Dockerfile，也可以以不同语言的开源项目 Dockerfile 作为参考，对 Dockerfile 语法有一个大致了解就行。标准过程都是 <strong>定义编译镜像 -&gt; 编译生成可执行文件 -&gt; 定义服务运行镜像 -&gt; 拷贝二进制文件 -&gt; 定义服务启动指令</strong></p><h4 id="定义任务"><a href="#定义任务" class="headerlink" title="定义任务"></a>定义任务</h4><p>以笔者项目 <a href="https://github.com/smiecj/docker-centos/blob/main/.github/workflows/build_dev_python.yml">docker-centos</a> 为例: 定期构建 python 开发环境镜像任务如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&quot;0 3 * * 0&quot;</span> <span class="comment"># 每周一3点（中时区）开始构建</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">docker:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">fetch-depth:</span> <span class="number">0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">QEMU</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">docker/setup-qemu-action@v1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Docker</span> <span class="string">Buildx</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">docker/setup-buildx-action@v1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Login</span> <span class="string">to</span> <span class="string">DockerHub</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">docker/login-action@v1</span> </span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DOCKERHUB_USERNAME</span> <span class="string">&#125;&#125;</span> <span class="comment"># 对应前面配置的 docker hub 登录凭证</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DOCKERHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">build_dev_python</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">REPO=mzsmieli</span> <span class="string">cmd=push</span> <span class="string">platform=linux/amd64,linux/arm64</span> <span class="string">make</span> <span class="string">build_dev_python</span> <span class="comment"># 该指令将触发 docker buildx build ... --push 进行镜像的构建和提交</span></span><br></pre></td></tr></table></figure><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p>action 任务的执行记录</p><p><img src="/2023/04/04/github-action/13.png" alt="执行记录"></p><p>镜像仓库中可以看到上次更新时间正好就是周一</p><p><img src="/2023/04/04/github-action/12.png" alt="镜像仓库"></p><h3 id="单元测试覆盖率统计"><a href="#单元测试覆盖率统计" class="headerlink" title="单元测试覆盖率统计"></a>单元测试覆盖率统计</h3><p>一个完善的后台项目除了业务逻辑代码，还会包含大量的<a href="https://en.wikipedia.org/wiki/Unit_testing">单元测试</a>（即基本方法测试），用于正式上线前的自测。单元测试写得质量如何，其中一个重要评判标准就是<a href="https://en.wikipedia.org/wiki/Code_coverage">单测覆盖率</a>，即<strong>所有的单元测试所覆盖的业务代码行数 / 总业务代码行数 比例</strong>。覆盖率越高，说明单测越完整，实际上线时出现问题的概率也越低</p><p>而这个单测覆盖率的统计过程 如果能交给 Github Action 帮我们做，<strong>每天输出覆盖率报告</strong>，自然也能省不少心</p><h4 id="项目准备"><a href="#项目准备" class="headerlink" title="项目准备"></a>项目准备</h4><p>要统计单测覆盖率 当然我们要先给项目写好一部分单测。每种语言都会有自己的<strong>单测编写规范</strong> 和 <strong>单测框架库</strong>。框架库如何选择，可以在写单测之前了解一下 官方或者社区有没有比较流行好用的，选择一个自己用着更顺手的就行</p><p>规范这块则尽量参考官方文档，如一些后台语言的单测规范:</p><ul><li><a href="https://pkg.go.dev/testing">go-testing</a></li><li><a href="https://docs.python.org/3/library/unittest.html">python-unittest</a></li><li><a href="https://junit.org/junit5/docs/current/user-guide">java-junit5</a></li></ul><h4 id="环境准备-创建-mysql-service"><a href="#环境准备-创建-mysql-service" class="headerlink" title="环境准备 - 创建 mysql service"></a>环境准备 - 创建 mysql service</h4><p><a href="https://ovirium.com/blog/how-to-make-mysql-work-in-your-github-actions">参考-How to make MySQL work in your GitHub Actions</a></p><p>由于单测执行环境一般是在自己电脑 或者公司的测试环境，和线上环境是网络隔离的，我们需要给一些无法实际执行的函数写好<a href="https://en.wikipedia.org/wiki/Mock_object">mock</a> 。所谓mock，就是让我们编写的函数 在特定输入下 <strong>返回特定输出</strong>，比如我们的服务对接 一个客户系统，在本地环境无法连上客户的环境，就需要 mock 用户服务的接口，自己写接口输出，来<strong>模拟真实环境的情况</strong></p><p>对于业务层代码来说，写好 mock 取决于业务数据的分类规模。但对于更底层的<strong>数据接口层</strong>，如 gorm，需要 mock 的场景就更多了。比如业务层需要考虑 用户传入参数为 a、b、c 的输出，分别对应 d、e、f，那么数据接口层就要考虑 a、b、c 的首次存入、重复存入、事务存入等情况，除了 d、e、f 还需要返回各种错误提示。写好完整的 mock 比业务层要复杂多了</p><p>考虑到这点，数据库的交互部分我没有写 mock，而是直接通过 action 的 service 功能，启动一个 mysql 服务来完成项目中 需要依赖数据库的代码测试</p><h4 id="定义任务-1"><a href="#定义任务-1" class="headerlink" title="定义任务"></a>定义任务</h4><p>最终任务定义:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">services:</span></span><br><span class="line">      <span class="attr">mysql:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">mysql:5.7</span> <span class="comment"># 通过官方的 5.7 版本镜像来启动 mysql</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">root_password</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="number">3306</span><span class="string">:3306</span></span><br><span class="line">        <span class="attr">options:</span> <span class="string">--health-cmd=&quot;mysqladmin</span> <span class="string">ping&quot;</span> <span class="string">--health-interval=10s</span> <span class="string">--health-timeout=5s</span> <span class="string">--health-retries=3</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">fetch-depth:</span> <span class="number">0</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">master</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">setup</span> <span class="string">goalng</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-go@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">go-version:</span> <span class="string">&#x27;&gt;=1.17.0&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init</span> <span class="string">mysql</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          # 初始化单测需要用到的数据库表</span></span><br><span class="line"><span class="string">          mysql -h127.0.0.1 -P3306 -uroot -proot_password -e &quot;create database temp&quot;</span></span><br><span class="line"><span class="string">          mysql -h127.0.0.1 -P3306 -uroot -proot_password -Dtemp &lt; db/mysql/mysql_test.sql</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          # 执行项目下的所有单测用例，并生成测试报告</span></span><br><span class="line"><span class="string">          go test -covermode=count -coverprofile=coverprofile.cov -run=&quot;^Test&quot; -coverpkg=$(go list ./... | grep -v &quot;/test&quot; | tr &#x27;\n&#x27; &#x27;,&#x27;) ./...</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Collect</span> <span class="string">Test</span> <span class="string">Coverage</span> <span class="string">File</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/upload-artifact@v3</span>  <span class="comment"># 上传测试覆盖率报告，即上个指令生成的 coverprofile.cov</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">go_common_coverage</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">coverprofile.cov</span></span><br></pre></td></tr></table></figure><h4 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h4><p>执行记录和上传的文件:</p><p><img src="/2023/04/04/github-action/14.png" alt="执行记录"></p><h3 id="github-首页构建"><a href="#github-首页构建" class="headerlink" title="github 首页构建"></a>github 首页构建</h3><p>对个人开发者而言，github action 还可以用于 个人博客、应用app 的定期发布。github 首页就有点类似个人博客，可以按 markdown 语法编写内容，进行自我展示</p><p>我的 github 首页:</p><p><img src="/2023/04/04/github-action/15.png" alt="github首页"></p><p>不过我还没有实现首页自动更新，这里以另一个github用户 <a href="https://github.com/wuhan005/wuhan005">E99p1ant</a> 的 首页项目为例。他将首页的 markdown 文件内容写成了模板样式，通过 action 任务，定期读取模板 并生成最终展示的首页样式</p><p>如图 他的项目的 README_template.md 文件只是模板，实际内容来自同一个仓库的 profile.yml</p><p><img src="/2023/04/04/github-action/16.png" alt="模板文件"></p><h4 id="任务定义"><a href="#任务定义" class="headerlink" title="任务定义"></a>任务定义</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Update</span> <span class="string">Profile</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Go</span> <span class="number">1.16</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-go@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">go-version:</span> <span class="number">1.16</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">&amp;</span> <span class="string">Run</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          # 执行主进程 将 模板文件 生成真正的首页效果</span></span><br><span class="line"><span class="string">          # 过程: 读取 README_template.md 作为模板，profile.yml 作为内容，替换 template 中的 &#123;&#123;PROJECTS&#125;&#125; 和 &#123;&#123;CVE&#125;&#125;，生成最终的 README.md</span></span><br><span class="line"><span class="string">          go build . &amp;&amp; ./main &amp;&amp; rm main</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Git</span> <span class="string">Commit</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          git add README.md</span></span><br><span class="line"><span class="string">          git commit -S -m &quot;Update README.md&quot; || true # 内容没有变化时 commit 会报错，所以需要忽略报错，否则最后一步不会执行</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Push</span> <span class="string">changes</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">ad-m/github-push-action@master</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h2 id="其他商用CI-CD工具"><a href="#其他商用CI-CD工具" class="headerlink" title="其他商用CI/CD工具"></a>其他商用CI/CD工具</h2><p>基本每个云厂商都会有 配套产品，如 <a href="https://azure.microsoft.com/en-us/products/devops/pipelines">Azure Pipeline</a>, <a href="https://aws.amazon.com/cn/codepipeline">AWS CodePipeline</a> 和 <a href="https://circleci.com/">CircleCI</a> 等</p><p>不过既然是商用 就代表具有一定的使用门槛，场景也受限，往往会和厂商的其他服务配套才能使用。如此一对比，就更凸显 Github Action 对我们个人开发者的易用性了</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从自己的实际体验来看，即使用上了 Github Action 也不会带来很明显的感知。但它带来的方便依然是存在的。就好像你在公司所用的所有基础设施（机器、数据库、sso服务等）一样。只有去刻意注意 才会发现它们的存在: 原来它们背后也凝聚了一群开发者的智慧，帮我们省去了非常多的工作</p><!--如果 Github Action 对你来说也会是这样的一个工具，能 save your time，那不妨就尝试用起来--><p>最后再分享前段时间看到的<a href="https://mp.weixin.qq.com/s/bOnW8gDJ-dXp4KbAjhDw9A">一段话</a>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">但是像区块链这些东西，你就扪心自问一下，区块链是不是所有公司都在用？没有用就让那些猪在天上再飞一会，指不定哪天风停了呢。但是，今天那些很强劲的风已经刮了十多年、二十年了，你为啥不去呢？</span><br></pre></td></tr></table></figure><p>不敢说 今年大火的 chatgpt 能有多少人真正用得上，因为刚刚以产品的形态进入公众视野，还没有沉淀下来。但是诸如 Github Action 这种 DevOps 工具，已经发展很多年，使用方式也在很多大厂得到了实践，还是很值得了解和实践的</p>]]></content>
    
    
    <summary type="html">自动化流水线平台的使用</summary>
    
    
    
    <category term="开发工具" scheme="http://smiecj.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    <category term="github" scheme="http://smiecj.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/github/"/>
    
    
    <category term="云服务" scheme="http://smiecj.github.io/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="github" scheme="http://smiecj.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>【翻译】Bye bye me 歌曲鉴赏</title>
    <link href="http://smiecj.github.io/2023/03/01/vaundy-byebyeme/"/>
    <id>http://smiecj.github.io/2023/03/01/vaundy-byebyeme/</id>
    <published>2023-02-28T16:00:00.000Z</published>
    <updated>2023-02-28T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="译者序"><a href="#译者序" class="headerlink" title="译者序"></a>译者序</h2><p>回忆对我们来说，偶尔顿足回首，确实会有不同的味道，但回忆终究只会是回忆，捧起它是很有分量，放下它也可变得轻盈。如果你步履蹒跚，不妨试试 放下一些回忆，轻装前进吧</p><p><a href="https://media.framu.world/columns/lyrics_consideration/bye-by-me/">原文-Bye by me【Vaundy】歌詞の意味を考察！ドラマ「捨ててよ、安達さん。」OPテーマ</a></p><p><a href="https://www.youtube.com/watch?v=b3H5RvRHiYs">歌曲MV(油管)</a><br><a href="https://www.bilibili.com/video/BV1NZ4y147MY">歌曲MV(B站)</a></p><h2 id="作者序"><a href="#作者序" class="headerlink" title="作者序"></a>作者序</h2><p>这次让我们一起来欣赏 Vaundy 2020年4月发布的数字单曲，由他亲自作词作曲编曲 <strong>「Bye by me」</strong>的歌词吧</p><p>这首歌也被作为 安达祐实（ 安達 祐実／あだち ゆみ）主演的电视剧  <strong>「丢掉吧，安达小姐」</strong>（放送时间：2020年4月-7月）的片头曲</p><p>剧情：安达小姐 被委托参加 「每期“丢掉”一个自己的物品」 连载系列的制作 ，之后，每次准备扔掉什么东西的时候，都会做一个梦，梦里出现了神秘的少女，还有尚未丢掉的东西，变成了人的样子，向自己恳求“请丢掉我吧”<br>当然，最后这些物品也不一定被扔掉了，可能卖掉，或者送给别人，只是换了个地方并“重获新生”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">译者: </span><br><span class="line">整部剧主线就是安达祐实 作为童星出道，成为演员所经历的故事。一集讲述一个故事，更像是舞台剧，节奏比较慢，挺适合茶余饭后当“点心”</span><br></pre></td></tr></table></figure><p><img src="/2023/03/01/vaundy-byebyeme/suteteyo01.jpeg" alt="剧照"></p><h2 id="歌曲部分"><a href="#歌曲部分" class="headerlink" title="歌曲部分"></a>歌曲部分</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">まんでい今日は</span><br><span class="line">どこへ行くの？</span><br><span class="line">まぁいいけど</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">今天是周一了</span><br><span class="line">你要去哪里呢？</span><br><span class="line">嘛，去哪都好啦</span><br></pre></td></tr></table></figure><p>第一段就体现了电视剧的主题 <strong>「即使是要丢掉一些东西，也请你放心」</strong></p><p>安达小姐作为主角 对话的搭档，正是她平日在犹豫是否要丢掉的东西。在梦中，它们变成了安达回忆中真实存在的某个人，和她对话</p><p>大部分东西都是在安达每次工作出门前，目所能及的</p><p>不过这些物品，在安达小姐的梦中，并没有特别地依依不舍。他们似乎不在乎自己最后是否被丢掉，只是在被丢掉之前，希望从安达小姐那里，得到它们疑惑已久的答案</p><p><img src="/2023/03/01/vaundy-byebyeme/suteteyo02.jpeg" alt="剧照"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ちゅーすでぃ今日も</span><br><span class="line">お仕事だったんでしょ？</span><br><span class="line">まぁいいけど</span><br><span class="line">まぁいいけど</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">今天星期二了</span><br><span class="line">这会你也是刚下班吧？</span><br><span class="line">嘛，工作上怎样都好啦</span><br><span class="line">怎样都好</span><br></pre></td></tr></table></figure><p>周二的安达小姐，迎着家里一些东西“欢迎”的目光回到家，有一种<strong>将要和他们轻声交谈、平日也守护着彼此的气氛</strong></p><p>假定我们自己身边的物品，也有自己的意识，和主人一同生活许久了，主人身上细微的变化，还有内心的小心思，恐怕也是能感受到吧</p><p><img src="/2023/03/01/vaundy-byebyeme/suteteyo06.jpeg" alt="剧照"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">うぇんずでぃ今日は</span><br><span class="line">何を見ているの？</span><br><span class="line">辛いでしょ</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">今天到周三了</span><br><span class="line">你这会在看什么呢？</span><br><span class="line">很辛苦对吧</span><br></pre></td></tr></table></figure><p>通过这次节目 安达小姐也发现了真正不舍得丢掉的一些东西，以及那些割舍不掉的回忆</p><p>周三，安达小姐又心绪复杂地扔掉了一个充满回忆的东西，梦中那东西甚至还安慰她道「很辛苦对吧」</p><p>也许因为是别人赠予的东西吧，丢掉它之前，安达唤起了更多回忆</p><p><img src="/2023/03/01/vaundy-byebyeme/suteteyo09.jpeg" alt="剧照"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">またさ</span><br><span class="line">遠く去った過去の日々に</span><br><span class="line">名前をつけて</span><br><span class="line">いたんでしょ</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我们呢</span><br><span class="line">给已经过去许久的每一天</span><br><span class="line">都赋予了属于它们的名字</span><br><span class="line">今天也是，对吧？</span><br></pre></td></tr></table></figure><p>明明是不需要的东西，却不舍得丢掉，大概是还<strong>对「过去」的一些回忆 充满着纠结</strong></p><p>「向过去之日赋予名」这种诗意般的表现，也是对应着电视剧中对欲弃之物“拟人化”的表现形式</p><p>或许 「不要忘记过去的荣耀」、「对前任还抱有幻想」 这种 「还试想回到过去的日子」 任性的想法，在我们身上也会有</p><p><img src="/2023/03/01/vaundy-byebyeme/suteteyo11.jpeg" alt="剧照"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">お帰り、でももういいよ</span><br><span class="line">伝えたいことは特にないから</span><br><span class="line">お帰り、でももういいの</span><br><span class="line">覚えてることも</span><br><span class="line">もうないよ</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">欢迎回来，怎样都好啦</span><br><span class="line">你想说的话，我们都能理解</span><br><span class="line">欢迎回来，已经没事啦</span><br><span class="line">需要你去用力记住的东西</span><br><span class="line">不过是一些浮云啦</span><br></pre></td></tr></table></figure><p>「已经可以了」在这部剧中的充分体现，就是「丢掉也没关系」</p><p>对剧中的“主角们”将会被丢掉的东西来说，设定就是「充满着 安达小姐 对过去难以割舍的回忆」</p><p>为了<strong>从「过去」的执念中解放出来，把这些东西丢掉</strong>也许是一个不错的方式</p><p>安达小姐一开始对于丢掉一些东西、忘记过去还抱有一丝罪恶感，于是拟人化的物品们 开始安慰她 「反正把我留着也没有什么意义了」</p><p><img src="/2023/03/01/vaundy-byebyeme/suteteyo08.jpeg" alt="剧照"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">さーすでぃ今日は</span><br><span class="line">どこに行ってきたの？</span><br><span class="line">遅いでしょ</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">今天星期四了</span><br><span class="line">你去了哪里逛呢？</span><br><span class="line">回来得有点晚哟</span><br></pre></td></tr></table></figure><p>周四 在家担心着安达小姐回来有点晚了的“东西” ，默默散发着一丝母爱</p><p>安达小姐作为童星很早就出道，现在也已经是母亲了</p><p>这是否也暗示着 每次梦里都会出现的神秘的少女 和安达的紧密联系呢？</p><p><img src="/2023/03/01/vaundy-byebyeme/suteteyo05.jpeg" alt="剧照"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ふらいでぃ今日は</span><br><span class="line">思い出していたの？</span><br><span class="line">あのことを</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">又是周五了</span><br><span class="line">你是否记起了</span><br><span class="line">那段久未拾起的回忆呢？</span><br></pre></td></tr></table></figure><p>周五的安达小姐，想要扔掉的「那个东西」是一段「回忆」，或者说「观念」（和其他集扔掉的都是实物 有所不同）</p><p>观众看到这集（第五集：想被别人喜欢），或许会在自己的记忆中有所共鸣吧？（为了去迁就、成全别人，去做过一些费力不讨好的事）</p><p><img src="/2023/03/01/vaundy-byebyeme/suteteyo10.jpeg" alt="剧照"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">でもさ</span><br><span class="line">遠く去った過去の日々と</span><br><span class="line">サヨナラしたら</span><br><span class="line">楽でしょ</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">但是吧</span><br><span class="line">如果对曾经的日子</span><br><span class="line">好好说一声“再见”的话</span><br><span class="line">也许就可以释怀吧？</span><br></pre></td></tr></table></figure><p>标题 「Bye by me」字面意思就是（和过去的自己）「再见」</p><p>与其反复记起过去的一些回忆，不如把它们都存放在内心深处 一个不容易被发现的角落</p><p>对过去的那些执着，也随着旧物品一起丢掉，才能感受到「解脱」吧</p><p><img src="/2023/03/01/vaundy-byebyeme/suteteyo04.jpeg" alt="剧照"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">休みの夜のやけ酒も</span><br><span class="line">それくらいにして</span><br><span class="line">もういいだろ？</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">就好像在休息日的夜晚</span><br><span class="line">举杯畅饮那般</span><br><span class="line">这样就满足了吗</span><br></pre></td></tr></table></figure><p>温馨提醒: 过度饮酒当然是不健康的</p><p>副歌部分的「已经足够了」，在这里对应的就是倒入杯中之酒已经「足够了」</p><p>沉浸在「过去」，不断地给自己添酒买醉，与其陷入这种恶循环，不妨停下片刻，提醒自己 「（喝的酒）<strong>差不多已经够了吧</strong>」，或许就能从这种循环中解脱出来</p><p><img src="/2023/03/01/vaundy-byebyeme/suteteyo07.jpeg" alt="剧照"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">愛していたんだきっと</span><br><span class="line">思い出すことを</span><br><span class="line">愛して、愛して</span><br><span class="line">満たしているなら</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">你一定还牵挂着</span><br><span class="line">一些放不下的回忆吧</span><br><span class="line">想念着，困扰着</span><br><span class="line">满腔思绪，如果快要承受不住</span><br></pre></td></tr></table></figure><p>「向回忆致以拥抱」这种生活态度，也许是最高级的温柔</p><p>被「过去」束缚住，尽管有所自觉，也难免深陷对自己这种状态的厌恶当中。这种情况下还能改善现状，<strong>必定是被别人「关心」着，或者是被别人肯定着</strong>，才能以轻松的心态继续前进（否则一定需要时间去调整的）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">忘れても、もういいよ</span><br><span class="line">伝えたいことはもう伝えたから</span><br><span class="line">忘れても、もういいよ</span><br><span class="line">この先もいっぱいたまっていくから</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">不如放下那些回忆吧，也没什么</span><br><span class="line">你心里想说的话，都已经传达给我们了</span><br><span class="line">就算再也不记得那些事，也没关系</span><br><span class="line">以后你还会拥有更多更多的回忆</span><br></pre></td></tr></table></figure><p>「已经可以了」还有一种含义就是 「<strong>忘记（那些回忆）也没关系</strong>」</p><p>我们所生活的时刻，也是由无数个「当下」连结而成的，认知也好，记忆也好，都是在不断增加的过程。<strong>平时 想追求怎样的目标，想在什么事情上花更多精力，还是取决于自己</strong>。对那些让自己不开心的事情，最好就「忘记」吧，向前看，发现更值得去热爱的事情</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">愛してやまない傷を</span><br><span class="line">無くして新しい日々を</span><br><span class="line">またね</span><br><span class="line">Bye by me~~</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">抚慰快愈合的伤痕</span><br><span class="line">挥别将结束的一天</span><br><span class="line">再见啦，明天的我</span><br><span class="line">Bye by me~~</span><br></pre></td></tr></table></figure><p>最后一段副歌 总结了作者的一种<strong>反向对待人生烦恼</strong>的态度：​ 「接受回忆在内心的伤痕」的同时，「越积越多的身边物品和烦恼，都把它们丢掉吧」（译者：其实就是电视剧的主题）</p><p>简单点做起，那不如就<strong>明天起床，以轻松愉快的态度，去迎接新的一天吧</strong></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>MV才是这首歌的灵魂</p><p>通过闪现的方式讲述一段故事之后</p><p>在某一瞬间，这些回忆好像都消失不见，回到现实，我还是我自己，一直都是活在当下的自己</p>]]></content>
    
    
    <summary type="html">跟过去道别</summary>
    
    
    
    <category term="音乐" scheme="http://smiecj.github.io/categories/%E9%9F%B3%E4%B9%90/"/>
    
    <category term="Vaundy" scheme="http://smiecj.github.io/categories/%E9%9F%B3%E4%B9%90/Vaundy/"/>
    
    
    <category term="音乐" scheme="http://smiecj.github.io/tags/%E9%9F%B3%E4%B9%90/"/>
    
    <category term="日语" scheme="http://smiecj.github.io/tags/%E6%97%A5%E8%AF%AD/"/>
    
  </entry>
  
</feed>
